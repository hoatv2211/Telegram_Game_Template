<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WTelegramBot</name>
    </assembly>
    <members>
        <member name="T:WTelegram.Bot">
            <summary>
            A client to use the Telegram Bot API
            </summary>
        </member>
        <member name="P:WTelegram.Bot.Client">
            <summary>This gives you access to the underlying Client API</summary>
        </member>
        <member name="F:WTelegram.Bot.Manager">
            <summary>The underlying UpdateManager (can be useful as Peer resolver for Client API calls)</summary>
        </member>
        <member name="P:WTelegram.Bot.BotId">
            <inheritdoc/>
        </member>
        <member name="P:WTelegram.Bot.WantUnknownTLUpdates">
            <summary>
            Generate Unknown Updates for all raw TL Updates that usually would have been silently ignored by Bot API (see <see cref="F:Telegram.Bot.Types.Update.TLUpdate"/>)
            </summary>
        </member>
        <member name="F:WTelegram.Bot._initTask">
            <summary>Task launched from constructor</summary>
        </member>
        <member name="F:WTelegram.Bot.StickerSetNames">
            <summary>Cache StickerSet ID => Name</summary>
        </member>
        <member name="F:WTelegram.Bot.CachedMessages">
            <summary>Cache used by <see cref="M:WTelegram.Bot.GetMessage(TL.InputPeer,System.Int32)"/></summary>
        </member>
        <member name="F:WTelegram.Bot.AllUpdateTypes">
            <summary>Special value meaning "all UpdateTypes" accepted</summary>
        </member>
        <member name="M:WTelegram.Bot.NotAllowed(Telegram.Bot.Types.Enums.UpdateType)">
            all <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> except Unknown=0, ChatMember=13, MessageReaction=15, MessageReactionCount=16
        </member>
        <member name="M:WTelegram.Bot.#ctor(System.String,System.Int32,System.String,System.Data.Common.DbConnection,WTelegram.SqlCommands)">
            <summary>Create a new <see cref="T:WTelegram.Bot"/> instance.</summary>
            <param name="botToken">The bot token</param>
            <param name="apiId">API id (see https://my.telegram.org/apps)</param>
            <param name="apiHash">API hash (see https://my.telegram.org/apps)</param>
            <param name="dbConnection">DB connection for storage and later resume</param>
            <param name="sqlCommands">Template for SQL strings (auto-detect by default)</param>
        </member>
        <member name="M:WTelegram.Bot.#ctor(System.Func{System.String,System.String},System.Data.Common.DbConnection,System.String[],System.Boolean)">
            <summary>Create a new <see cref="T:WTelegram.Bot"/> instance.</summary>
            <param name="configProvider">Configuration callback</param>
            <param name="dbConnection">DB connection for storage and later resume</param>
            <param name="sqlCommands">SQL queries for your specific DB engine (null for auto-detect)</param>
            <param name="waitForLogin">Should the constructor wait synchronously for login to complete <i>(necessary before further API calls)</i>.<br/>Set to <see langword="false"/> and use <c>await botClient.GetMe()</c> to wait for login asynchronously instead</param>
        </member>
        <member name="M:WTelegram.Bot.Dispose">
            <summary>You must call Dispose to properly save state, close connection and dispose resources</summary>
        </member>
        <member name="M:WTelegram.Bot.SaveState">
            <summary>Save current state to database</summary>
        </member>
        <member name="M:WTelegram.Bot.GetUpdates(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">
            <summary>Use this method to receive incoming updates using <a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">long polling</a></summary>
            <param name="offset">Identifier of the first update to be returned, typically the Id of the last update you handled <u>plus one</u>. Negative values are offset from the end of the pending updates queue</param>
            <param name="limit">Limits the number of updates to be retrieved (1-100)</param>
            <param name="timeout">Timeout in seconds for long polling. 0 to return immediately</param>
            <param name="allowedUpdates">A list of the <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> you want your bot to receive. Specify an empty list to receive
            all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>. If null, the previous setting will be used.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <remarks>In order to avoid getting duplicate updates, recalculate <paramref name="offset"/> after each server response</remarks>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.InputUser(System.String)">
            <summary>Obtain a InputUser from username, or null if resolve failed</summary>
        </member>
        <member name="M:WTelegram.Bot.InputUser(System.Int64)">
            <summary>Obtain a InputUser for this user (useful with Client API calls)</summary>
        </member>
        <member name="M:WTelegram.Bot.InputPeerUser(System.Int64)">
            <summary>Obtain a InputPeerUser for this user (useful with Client API calls)</summary>
        </member>
        <member name="M:WTelegram.Bot.User(System.Int64)">
            <summary>return User if found in known users (DB), or null</summary>
        </member>
        <member name="M:WTelegram.Bot.InputChannel(Telegram.Bot.Types.ChatId)">
            <summary>Obtain a InputChannel for this chat (useful with Client API calls)</summary><remarks>May throw exception if chat is unknown</remarks>
        </member>
        <member name="M:WTelegram.Bot.Chat(System.Int64)">
            <summary>return Chat if found in known chats (DB), or null</summary>
        </member>
        <member name="M:WTelegram.Bot.InputPeerChat(Telegram.Bot.Types.ChatId)">
            <summary>Obtain a InputPeerChat for this chat (useful with Client API calls)</summary><remarks>May throw exception if chat is unknown</remarks>
        </member>
        <member name="M:WTelegram.Bot.ClearCaches">
            <summary>Free up some memory by clearing internal caches that can be reconstructed automatically<para>Call this periodically for heavily used bots if you feel too much memory is used by TelegramBotClient</para></summary>
        </member>
        <member name="M:WTelegram.Bot.GetChatMemberList(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>Use this method to get a list of members in a chat (can be incomplete).</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="limit">The maximum number of member to fetch (big number might be slow to fetch, and Telegram might still restrict the maximum anyway)</param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects that contains information about chat members</returns>
            <remarks>⚠️ For big chats, Telegram will likely limit the total number of members you can obtain with this method</remarks>
        </member>
        <member name="M:WTelegram.Bot.GetMessagesById(Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Get chat messages based on their messageIds</summary>
            <param name="chatId">The chat id or username</param>
            <param name="messageIds">The message IDs to fetch. You can use <c>Enumerable.Range(startMsgId, count)</c> to get a range of messages</param>
            <returns>List of messages that could be fetched</returns>
        </member>
        <member name="M:WTelegram.Bot.GetMe">
            <summary>A simple method for testing your bot’s auth token.</summary>
            <returns>Returns basic information about the bot in form of a <see cref="M:WTelegram.Bot.User(System.Int64)"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.Close">
            <summary>Use this method to close the bot instance before moving it from one local server to another. You need to
            delete the webhook before calling this method to ensure that the bot isn't launched again after server
            restart. The method will return error 429 in the first 10 minutes after the bot is launched.</summary>
        </member>
        <member name="M:WTelegram.Bot.SendTextMessage(Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.LinkPreviewOptions,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send text messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="text">Text of the message to be sent, 1-4096 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="entities">List of special entities that appear in message text, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.ForwardMessage(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Use this method to forward messages of any kind. Service messages can't be forwarded.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.ForwardMessages(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>Use this method to forward multiple messages of any kind. If some of the specified messages can't be found
            or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded.
            Album grouping is kept for forwarded messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original messages were sent
            (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageIds">Identifiers of 1-100 messages in the chat from_chat_id to forward.
            The identifiers must be specified in a strictly increasing order.</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.CopyMessage(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean)">
            <summary>Use this method to copy messages of any kind. Service messages and invoice messages can't be copied.
            The method is analogous to the method
            <see cref="!:ForwardMessage(ForwardMessageRequest)"/>,
            but the copied message doesn't have a link to the original message.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="caption">New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <returns>Returns the <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent message on success.</returns>
        </member>
        <member name="M:WTelegram.Bot.CopyMessages(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32[],System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>Use this method to copy messages of any kind. If some of the specified messages can't be found or copied,
            they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages
            can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field
            <see cref="!:Poll.CorrectOptionId">CorrectOptionId</see> is known to the bot. The method is analogous to the method
            <see cref="!:ForwardMessages(ForwardMessagesRequest)"/>, but the
            copied messages don't have a link to the original message. Album grouping is kept for copied messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original messages were sent
            (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageIds">Identifiers of 1-100 messages in the chat <paramref name="fromChatId"/> to copy.
            The identifiers must be specified in a strictly increasing order.</param>
            <param name="removeCaption">Pass <see langword="true"/> to copy the messages without their captions</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendPhoto(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send photos.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="photo">Photo to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a photo that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from
            the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size.
            The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20</param>
            <param name="caption">Photo caption (may also be used when resending photos by <see cref="T:Telegram.Bot.Types.InputFileId"/>),
            0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="hasSpoiler">Pass <see langword="true"/> if the photo needs to be covered with a spoiler animation</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendAudio(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.String,System.String,Telegram.Bot.Types.InputFile,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send audio files, if you want Telegram clients to display them in the music player.
            Your audio must be in the .MP3 or .M4A format. Bots can currently send audio files of up to 50 MB in size,
            this limit may be changed in the future.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="audio">Audio file to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send an audio file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio
            file from the Internet, or upload a new one using multipart/form-data</param>
            <param name="caption">Audio caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height
            should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be
            reused and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendDocument(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.InputFile,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send general files. Bots can currently send files of any type of up to 50 MB in size,
            this limit may be changed in the future.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="document">File to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet,
            or upload a new one using multipart/form-data</param>
            <param name="caption">Document caption (may also be used when resending documents by file_id), 0-1024 characters after
            entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="disableContentTypeDetection">Disables automatic server-side content type detection for files uploaded using multipart/form-data</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendVideo(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Int32,System.Int32,Telegram.Bot.Types.InputFile,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as
            <see cref="T:Telegram.Bot.Types.Document"/>). Bots can currently send video files of up to 50 MB in size, this limit may be
            changed in the future.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="video">Video to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a video that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the
            Internet, or upload a new video using multipart/form-data</param>
            <param name="caption">Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="width">Video width</param>
            <param name="height">Video height</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="hasSpoiler">Pass <see langword="true"/> if the video needs to be covered with a spoiler animation</param>
            <param name="supportsStreaming">Pass <see langword="true"/>, if the uploaded video is suitable for streaming</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendAnimation(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Int32,System.Int32,Telegram.Bot.Types.InputFile,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). Bots can currently
            send animation files of up to 50 MB in size, this limit may be changed in the future.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="animation">Animation to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send an animation that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an
            animation from the Internet, or upload a new animation using multipart/form-data</param>
            <param name="caption">Animation caption (may also be used when resending animation by <see cref="T:Telegram.Bot.Types.InputFileId"/>),
            0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="duration">Duration of sent animation in seconds</param>
            <param name="width">Animation width</param>
            <param name="height">Animation height</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="hasSpoiler">Pass <see langword="true"/> if the animation needs to be covered with a spoiler animation</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendVoice(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice
            message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent
            as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>). Bots can currently send voice messages of up to 50 MB
            in size, this limit may be changed in the future.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="voice">Audio file to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a file that exists
            on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from
            the Internet, or upload a new one using multipart/form-data</param>
            <param name="caption">Voice message caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="duration">Duration of the voice message in seconds</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendVideoNote(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>As of <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>, Telegram clients
            support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="videoNote">Video note to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a video note that
            exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. Sending
            video notes by a URL is currently unsupported</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="length">Video width and height, i.e. diameter of the video message</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendMediaGroup(Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia},Telegram.Bot.Types.ReplyParameters,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio
            files can be only grouped in an album with messages of the same type.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="medias">An array describing messages to be sent, must include 2-10 items</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.Message"/>s that were sent is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendLocation(Telegram.Bot.Types.ChatId,System.Double,System.Double,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send point on the map.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="latitude">Latitude of location</param>
            <param name="longitude">Longitude of location</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="livePeriod">Period in seconds for which the location will be updated, should be between 60 and 86400</param>
            <param name="heading">For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified</param>
            <param name="proximityAlertRadius">For live locations, a maximum distance for proximity alerts about approaching another chat member,
            in meters. Must be between 1 and 100000 if specified</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageLiveLocation(Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="M:WTelegram.Bot.StopMessageLiveLocation(Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)"/>.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="heading">Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified</param>
            <param name="proximityAlertRadius">Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageLiveLocation(System.String,System.Double,System.Double,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="M:WTelegram.Bot.StopMessageLiveLocation(System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)"/>.</summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="heading">Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified</param>
            <param name="proximityAlertRadius">Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
        </member>
        <member name="M:WTelegram.Bot.StopMessageLiveLocation(Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.StopMessageLiveLocation(System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires.</summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
        </member>
        <member name="M:WTelegram.Bot.SendVenue(Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send information about a venue.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="foursquareId">Foursquare identifier of the venue</param>
            <param name="foursquareType">Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
            “arts_entertainment/aquarium” or “food/icecream”.)</param>
            <param name="googlePlaceId">Google Places identifier of the venue</param>
            <param name="googlePlaceType">Google Places type of the venue. (See
            <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>)</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
            <a href="https://core.telegram.org/bots/api#sendvenue"/>
        </member>
        <member name="M:WTelegram.Bot.SendContact(Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send phone contacts.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="lastName">Contact's last name</param>
            <param name="vCard">Additional data about the contact in the form of a vCard, 0-2048 bytes</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the action will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendPoll(Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,Telegram.Bot.Types.Enums.PollType,System.Boolean,System.Nullable{System.Int32},Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send a native poll.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="question">Poll question, 1-300 characters</param>
            <param name="options">A list of answer options, 2-10 strings 1-100 characters each</param>
            <param name="isAnonymous"><see langword="true"/>, if the poll needs to be anonymous, defaults to <see langword="true"/></param>
            <param name="type">Poll type, <see cref="F:Telegram.Bot.Types.Enums.PollType.Quiz"/> or <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular"/></param>
            <param name="allowsMultipleAnswers"><see langword="true"/>, if the poll allows multiple answers, ignored for polls in quiz mode</param>
            <param name="correctOptionId">0-based identifier of the correct answer option, required for polls in quiz mode</param>
            <param name="explanation">Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll,
            0-200 characters with at most 2 line feeds after entities parsing</param>
            <param name="explanationParseMode">Mode for parsing entities in the explanation. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details</param>
            <param name="explanationEntities">List of special entities that appear in the poll explanation, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="openPeriod">Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together
            with <paramref name="closeDate"/></param>
            <param name="closeDate">Point in time when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds
            in the future. Can't be used together with <paramref name="openPeriod"/></param>
            <param name="isClosed">Pass <see langword="true"/>, if the poll needs to be immediately closed. This can be useful for poll preview</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the action will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendDice(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.Emoji,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send an animated emoji that will display a random value.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="emoji">Emoji on which the dice throw animation is based. Currently, must be one of <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>,
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football"/>,
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/> or <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine"/>. Dice can have values 1-6 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts"/> and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/>, values 1-5 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball"/> and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football"/>, and values 1-64 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine"/>.</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the action will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SendChatAction(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Int32,System.String)">
            <summary>Use this method when you need to tell the user that something is happening on the bot’s side. The status is
            set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).</summary>
            <example><para>
            The <a href="https://t.me/imagebot">ImageBot</a> needs some time to process a request and upload the
            image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may
            use <see cref="!:SendChatAction(SendChatActionRequest)"/> with
            <see cref="!:SendChatActionRequest.Action"/> = <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/>.
            The user will see a “sending photo” status for the bot.</para>
            <para>We only recommend using this method when a response from the bot will take a <b>noticeable</b> amount of time to arrive.</para></example>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="chatAction">Type of action to broadcast. Choose one, depending on what the user is about to receive:
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.Typing"/> for <see cref="!:SendTextMessageAsync">text messages</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/> for
            <see cref="!:SendPhoto(SendPhotoRequest)">photos</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo"/> for
            <see cref="!:SendVideo(SendVideoRequest)">videos</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice"/> for
            <see cref="!:SendVoice(SendVoiceRequest)">voice notes</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument"/> for
            <see cref="!:SendDocument(SendDocumentRequest)">general files</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation"/> for
            <see cref="!:SendLocation(SendLocationRequest)">location data</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote"/> for
            <see cref="!:SendVideoNote(SendVideoNoteRequest)">video notes</see></param>
            <param name="messageThreadId">Unique identifier for the target message thread; supergroups only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the action will be sent</param>
        </member>
        <member name="M:WTelegram.Bot.SetMessageReaction(Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReactionType},System.Boolean)">
            <summary>Use this method to change the chosen reactions on a message. Service messages can't be reacted to.
            Automatically forwarded messages from a channel to its discussion group have the same
            available reactions as messages in the channel.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the target message. If the message belongs to a media group, the reaction
            is set to the first non-deleted message in the group instead.</param>
            <param name="reaction">New list of reaction types to set on the message. Currently, as non-premium users, bots can
            set up to one reaction per message. A custom emoji reaction can be used if it is either
            already present on the message or explicitly allowed by chat administrators.</param>
            <param name="isBig">Pass <see langword="true"/> to set the reaction with a big animation</param>
        </member>
        <member name="M:WTelegram.Bot.GetUserProfilePhotos(System.Int64,System.Int32,System.Int32)">
            <summary>Use this method to get a list of profile pictures for a user.</summary>
            <param name="userId">Unique identifier of the target user</param>
            <param name="offset">Sequential number of the first photo to be returned. By default, all photos are returned</param>
            <param name="limit">Limits the number of photos to be retrieved. Values between 1-100 are accepted.</param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object</returns>
        </member>
        <member name="M:WTelegram.Bot.GetFile(System.String)">
            <summary>Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can
            download files of up to 20MB in size. The file can then be downloaded via the link
            <c>https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;</c>, where <c>&lt;file_path&gt;</c>
            is taken from the response. It is guaranteed that the link will be valid for at least 1 hour.
            When the link expires, a new one can be requested by calling
            <see cref="!:GetFile(GetFileRequest)"/> again.</summary>
            <remarks>You can use <see cref="!:DownloadFileAsync"/> or
            <see cref="!:TelegramBotClientExtensions.GetInfoAndDownloadFileAsync"/> methods to download the file</remarks>
            <param name="fileId">File identifier to get info about</param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetInfoAndDownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>Use this method to get basic info about a file download it. For the moment, bots can download files
            of up to 20MB in size.</summary>
            <param name="fileId">File identifier to get info about</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">If you need to abort the download</param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.BanChatMember(Telegram.Bot.Types.ChatId,System.Int64,System.DateTime,System.Boolean)">
            <summary>Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and
            channels, the user will not be able to return to the chat on their own using invite links, etc., unless
            <see cref="M:WTelegram.Bot.UnbanChatMember(Telegram.Bot.Types.ChatId,System.Int64,System.Boolean)">unbanned</see>
            first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.</summary>
            <param name="chatId">Unique identifier for the target group or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="untilDate">Date when the user will be unbanned. If user is banned for more than 366 days or less than 30 seconds
            from the current time they are considered to be banned forever. Applied for supergroups and channels only</param>
            <param name="revokeMessages">Pass <see langword="true"/> to delete all messages from the chat for the user that is being removed.
            If <see langword="false"/>, the user will be able to see messages in the group that were sent before the user was
            removed. Always <see langword="true"/> for supergroups and channels</param>
        </member>
        <member name="M:WTelegram.Bot.UnbanChatMember(Telegram.Bot.Types.ChatId,System.Int64,System.Boolean)">
            <summary>Use this method to unban a previously banned user in a supergroup or channel. The user will <b>not</b>
            return to the group or channel automatically, but will be able to join via link, etc. The bot must be an
            administrator for this to work. By default, this method guarantees that after the call the user is not a
            member of the chat, but will be able to join it. So if the user is a member of the chat they will also be
            <b>removed</b> from the chat. If you don't want this, use the parameter <paramref name="onlyIfBanned"/></summary>
            <param name="chatId">Unique identifier for the target group or username of the target supergroup or channel (in the format <c>@username</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="onlyIfBanned">Do nothing if the user is not banned</param>
        </member>
        <member name="M:WTelegram.Bot.RestrictChatMember(Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions,System.Nullable{System.DateTime})">
            <summary>Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup
            for this to work and must have the appropriate admin rights. Pass <see langword="true"/> for all permissions to
            lift restrictions from a user.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="permissions">New user permissions</param>
            <param name="untilDate">Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever</param>
        </member>
        <member name="M:WTelegram.Bot.PromoteChatMember(Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatAdministratorRights,System.String)">
            <summary>Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in
            the chat for this to work and must have the appropriate admin rights. Pass <c><see langword="null"/></c> rights to demote a user.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="rights">An object describing new administrator rights.</param>
            <param name="customTitle">Give an admin title to the user (exclusive!)</param>
        </member>
        <member name="M:WTelegram.Bot.SetChatAdministratorCustomTitle(Telegram.Bot.Types.ChatId,System.Int64,System.String)">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="customTitle">New custom title for the administrator; 0-16 characters, emoji are not allowed</param>
        </member>
        <member name="M:WTelegram.Bot.BanUnbanChatSenderChat(Telegram.Bot.Types.ChatId,System.Int64,System.Boolean)">
            <summary>Use this method to ban (or unban) a channel chat in a supergroup or a channel. The owner of the chat will not be
            able to send messages and join live streams on behalf of the chat, unless it is unbanned first. The bot
            must be an administrator in the supergroup or channel for this to work and must have the appropriate
            administrator rights. Returns <see langword="true"/> on success.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="senderChatId">Unique identifier of the target sender chat</param>
            <param name="ban">whether to ban or unban</param>
        </member>
        <member name="M:WTelegram.Bot.SetChatPermissions(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions)">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator
            in the group or a supergroup for this to work and must have the can_restrict_members admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="permissions">New default chat permissions</param>
        </member>
        <member name="M:WTelegram.Bot.ExportChatInviteLink(Telegram.Bot.Types.ChatId)">
            <summary>Use this method to generate a new primary invite link for a chat; any previously generated primary
            link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
        </member>
        <member name="M:WTelegram.Bot.CreateChatInviteLink(Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean)">
            <summary>Use this method to create an additional invite link for a chat. The bot must be an administrator
            in the chat for this to work and must have the appropriate admin rights. The link can be revoked
            using the method
            <see cref="!:RevokeChatInviteLink(RevokeChatInviteLinkRequest)"/></summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999</param>
            <param name="createsJoinRequest">Set to <see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators.
            If <see langword="true"/>, <paramref name="memberLimit"/> can't be specified</param>
            <returns>Returns the new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditChatInviteLink(Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean)">
            <summary>Use this method to edit a non-primary invite link created by the bot. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="inviteLink">The invite link to edit</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999</param>
            <param name="createsJoinRequest">Set to <see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators.
            If <see langword="true"/>, <paramref name="memberLimit"/> can't be specified</param>
            <returns>Returns the edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.RevokeChatInviteLink(Telegram.Bot.Types.ChatId,System.String)">
            <summary>Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new
            link is automatically generated. The bot must be an administrator in the chat for this to work and
            must have the appropriate admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="inviteLink">The invite link to revoke</param>
            <returns>Returns the revoked invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.HideChatJoinRequest(Telegram.Bot.Types.ChatId,System.Int64,System.Boolean)">
            <summary>Use this method to approve or decline a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <see langword="true"/> on success.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="approved">whether to approve or decline the chat join request</param>
        </member>
        <member name="M:WTelegram.Bot.SetChatPhoto(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFileStream)">
            <summary>Use this method to set (or delete) a new profile photo for the chat. Photos can't be changed for private chats.
            The bot must be an administrator in the chat for this to work and must have the appropriate admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="photo">New chat photo, or null to delete photo</param>
        </member>
        <member name="M:WTelegram.Bot.SetChatTitle(Telegram.Bot.Types.ChatId,System.String)">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot
            must be an administrator in the chat for this to work and must have the appropriate admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="title">New chat title, 1-255 characters</param>
        </member>
        <member name="M:WTelegram.Bot.SetChatDescription(Telegram.Bot.Types.ChatId,System.String)">
            <summary>Use this method to change the description of a group, a supergroup or a channel. The bot must
            be an administrator in the chat for this to work and must have the appropriate admin rights</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="description">New chat Description, 0-255 characters</param>
        </member>
        <member name="M:WTelegram.Bot.PinUnpinChatMessage(Telegram.Bot.Types.ChatId,System.Int32,System.Boolean,System.Boolean)">
            <summary>Use this method to add/remove a message to the list of pinned messages in a chat. If the chat is not a private
            chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of a message to pin or unpin. To unpin the most recent pinned message, pass 0</param>
            <param name="pin">whether to pin (true) or unpin (false)</param>
            <param name="disableNotification">Pass <c><see langword="true"/></c>, if it is not necessary to send a notification to all chat members about
            the new pinned message. Notifications are always disabled in channels and private chats</param>
        </member>
        <member name="M:WTelegram.Bot.UnpinAllMessages(Telegram.Bot.Types.ChatId,System.Nullable{System.Int32})">
            <summary>Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat,
            the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageThreadId">(optional) if you want to target only a specific forum topic</param>
            <remarks>Use messageThreadId=1 for the 'General' topic</remarks>
        </member>
        <member name="M:WTelegram.Bot.LeaveChat(Telegram.Bot.Types.ChatId)">
            <summary>Use this method for your bot to leave a group, supergroup or channel.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
        </member>
        <member name="M:WTelegram.Bot.GetChat(Telegram.Bot.Types.ChatId)">
            <summary>Use this method to get up to date information about the chat (current name of the user for one-on-one
            conversations, current username of a user, group or channel, etc.)</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <returns>Returns a <see cref="M:WTelegram.Bot.Chat(System.Int64)"/> object on success.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetChatAdministrators(Telegram.Bot.Types.ChatId)">
            <summary>Use this method to get a list of administrators in a chat.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects that contains information about all chat
            administrators except other bots. If the chat is a group or a supergroup and no administrators were
            appointed, only the creator will be returned</returns>
        </member>
        <member name="M:WTelegram.Bot.GetChatMemberCount(Telegram.Bot.Types.ChatId)">
            <summary>Use this method to get the number of members in a chat.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <returns>Returns <see cref="T:System.Int32"/> on success.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetChatMember(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>Use this method to get information about a member of a chat.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.ChatMember"/> object on success.</returns>
        </member>
        <member name="M:WTelegram.Bot.SetChatStickerSet(Telegram.Bot.Types.ChatId,System.String)">
            <summary>Use this method to delete or set a new group sticker set for a supergroup. The bot must be an administrator in the
            chat for this to work and must have the appropriate admin rights. Use the field <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally 
            returned in <see cref="!:GetChat(GetChatRequest)"/> requests to check if the bot can use this method.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="stickerSetName">Name of the sticker set to be set as the group sticker set (null to delete)</param>
        </member>
        <member name="M:WTelegram.Bot.GetForumTopicIconStickers">
            <summary>Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.</summary>
            <returns>Returns an Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</returns>
        </member>
        <member name="M:WTelegram.Bot.CreateForumTopic(Telegram.Bot.Types.ChatId,System.String,System.Nullable{Telegram.Bot.Types.Color},System.String)">
            <summary>Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for
            this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights.
            Returns information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="name">Topic name, 1-128 characters</param>
            <param name="iconColor">Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E),
            13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)</param>
            <param name="iconCustomEmojiId">Unique identifier of the custom emoji shown as the topic icon. Use
            <see cref="!:GetForumTopicIconStickers(GetForumTopicIconStickersRequest)"/> to get all allowed custom emoji identifiers</param>
            <returns>Returns information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditForumTopic(Telegram.Bot.Types.ChatId,System.Int32,System.String,System.String)">
            <summary>Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator
            in the chat for this to work and must have <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator
            rights, unless it is the creator of the topic. Returns <see langword="true"/> on success.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="name">New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept</param>
            <param name="iconCustomEmojiId">New unique identifier of the custom emoji shown as the topic icon. Use
            <see cref="!:GetForumTopicIconStickersRequest"/> to get all allowed custom emoji identifiers. Pass an empty
            string to remove the icon. If not specified, the current icon will be kept</param>
            <remarks>Use messageThreadId=1 for the 'General' topic</remarks>
        </member>
        <member name="M:WTelegram.Bot.CloseReopenForumTopic(Telegram.Bot.Types.ChatId,System.Int32,System.Boolean)">
            <summary>Use this method to close or reopen a topic in a forum supergroup chat. The bot must be an administrator in the chat
            for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights,
            unless it is the creator of the topic. Returns <see langword="true"/> on success.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="closed">whether to close (true) or reopen (false) the topic</param>
            <remarks>Use messageThreadId=1 for the 'General' topic</remarks>
        </member>
        <member name="M:WTelegram.Bot.DeleteForumTopic(Telegram.Bot.Types.ChatId,System.Int32)">
            <summary>Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be
            an administrator in the chat for this to work and must have the
            <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights. Returns <see langword="true"/> on success.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
        </member>
        <member name="M:WTelegram.Bot.HideGeneralForumTopic(Telegram.Bot.Types.ChatId,System.Boolean)">
            <summary>Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the
            chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator
            rights. The topic will be automatically closed if it was open. Returns <see langword="true"/> on success.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="hidden">true to hide, false to unhide</param>
        </member>
        <member name="M:WTelegram.Bot.AnswerCallbackQuery(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>Use this method to send answers to callback queries sent from
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboards</see>. The answer will be displayed
            to the user as a notification at the top of the chat screen or as an alert</summary>
            <remarks>Alternatively, the user can be redirected to the specified Game URL.For this option to work, you must
            first create a game for your bot via <c>@BotFather</c> and accept the terms. Otherwise, you may use
            links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter</remarks>
            <param name="callbackQueryId">Unique identifier for the query to be answered</param>
            <param name="text">Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters</param>
            <param name="showAlert">If <see langword="true"/>, an alert will be shown by the client instead of a notification at the top of the chat screen.</param>
            <param name="url">URL that will be opened by the user's client. If you have created a
            <a href="https://core.telegram.org/bots/api#game">Game</a> and accepted the conditions via
            <c>@BotFather</c>, specify the URL that opens your game — note that this will only work if the query comes from a callback_game button
            <para>Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter</para></param>
            <param name="cacheTime">The maximum amount of time in seconds that the result of the callback query may be cached client-side.
            Telegram apps will support caching starting in version 3.14</param>
        </member>
        <member name="M:WTelegram.Bot.GetUserChatBoosts(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat.</summary>
            <param name="chatId">Unique identifier for the chat or username of the channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.UserChatBoosts"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetBusinessConnection(System.String)">
            <summary>Use this method to get information about the connection of the bot with a business account.</summary>
            <param name="businessConnectionId">Unique identifier of the business connection</param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.BusinessConnection"/> object.</returns>
        </member>
        <member name="M:WTelegram.Bot.SetMyCommands(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand},Telegram.Bot.Types.BotCommandScope,System.String)">
            <summary>Use this method to change the list of the bot’s commands.
            See <a href="https://core.telegram.org/bots#commands"/> for more details about bot commands</summary>
            <param name="commands">A list of bot commands to be set as the list of the bot’s commands. At most 100 commands can be specified</param>
            <param name="scope">An object, describing scope of users for which the commands are relevant. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given
            <paramref name="scope"/>, for whose language there are no dedicated commands</param>
        </member>
        <member name="M:WTelegram.Bot.DeleteMyCommands(Telegram.Bot.Types.BotCommandScope,System.String)">
            <summary>Use this method to delete the list of the bot’s commands for the given <paramref name="scope"/> and
            <paramref name="languageCode">user language</paramref>. After deletion,
            <a href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</a> will be shown to affected users</summary>
            <param name="scope">An object, describing scope of users for which the commands are relevant. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given
            <paramref name="scope"/>, for whose language there are no dedicated commands</param>
        </member>
        <member name="M:WTelegram.Bot.GetMyCommands(Telegram.Bot.Types.BotCommandScope,System.String)">
            <summary>Use this method to get the current list of the bot’s commands for the given <paramref name="scope"/> and
            <paramref name="languageCode">user language</paramref></summary>
            <param name="scope">An object, describing scope of users. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code or an empty string</param>
            <returns>Returns Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> on success. If commands aren't set, an empty list is returned</returns>
        </member>
        <member name="M:WTelegram.Bot.SetMyInfo(System.String,System.String,System.String,System.String)">
            <summary>Use this method to change the bot's name, short description (bio) or description (shown in empty chat).</summary>
            <param name="name">New bot name; 0-64 characters. Unchanged if null. Pass an empty string to remove the dedicated name for the given language.</param>
            <param name="shortDescription">New short description for the bot; 0-120 characters. Unchanged if null. Pass an empty string to remove the dedicated short description for the given language.</param>
            <param name="description">New bot description; 0-512 characters. Unchanged if null. Pass an empty string to remove the dedicated description for the given language.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language
            there is no dedicated name.</param>
        </member>
        <member name="M:WTelegram.Bot.GetMyInfo(System.String)">
            <summary>Use this method to get the current bot name for the given user language.</summary>
            <param name="languageCode">A two-letter ISO 639-1 language code or an empty string</param>
            <returns>Returns <see cref="T:Telegram.Bot.Types.BotName"/> on success.</returns>
        </member>
        <member name="M:WTelegram.Bot.SetChatMenuButton(System.Nullable{System.Int64},Telegram.Bot.Types.MenuButton)">
            <summary>Use this method to change the bot’s menu button in a private chat, or the default menu button.</summary>
            <param name="chatId">Unique identifier for the target private chat. If not specified, default bot’s menu button will be changed</param>
            <param name="menuButton">An object for the new bot’s menu button. Defaults to <see cref="T:Telegram.Bot.Types.MenuButtonDefault"/></param>
        </member>
        <member name="M:WTelegram.Bot.GetChatMenuButton(System.Nullable{System.Int64})">
            <summary>Use this method to get the current value of the bot’s menu button in a private chat, or the default menu button.</summary>
            <param name="chatId">Unique identifier for the target private chat. If not specified, default bot’s menu button will be returned</param>
            <returns><see cref="T:Telegram.Bot.Types.MenuButton"/> set for the given chat id or a default one</returns>
        </member>
        <member name="M:WTelegram.Bot.SetMyDefaultAdministratorRights(Telegram.Bot.Types.ChatAdministratorRights,System.Boolean)">
            <summary>Use this method to change the default administrator rights requested by the bot when it's added as an administrator 
            to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot.</summary>
            <param name="rights">An object describing new default administrator rights. If not specified, the default administrator rights will be cleared.</param>
            <param name="forChannels">Pass <see langword="true"/> to change the default administrator rights of the bot in channels. Otherwise, the default
            administrator rights of the bot for groups and supergroups will be changed.</param>
        </member>
        <member name="M:WTelegram.Bot.GetMyDefaultAdministratorRights(System.Boolean)">
            <summary>Use this method to get the current default administrator rights of the bot.</summary>
            <param name="forChannels">Pass <see langword="true"/> to change the default administrator rights of the bot in channels. Otherwise, the default
            administrator rights of the bot for groups and supergroups will be changed.</param>
            <returns>Default or channel <see cref="T:Telegram.Bot.Types.ChatAdministratorRights"/> </returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageText(Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit text and game messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="entities">List of special entities that appear in message text, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageText(System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit text and game messages.</summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="entities">List of special entities that appear in message text, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
        </member>
        <member name="M:WTelegram.Bot.EditMessageCaption(Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit captions of messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageCaption(System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit captions of messages.</summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more details</param>
            <param name="captionEntities">List of special entities that appear in the caption, which can be specified instead of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/></param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
        </member>
        <member name="M:WTelegram.Bot.EditMessageMedia(Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit animation, audio, document, photo, or video messages. If a message is part of
            a message album, then it can be edited only to an audio for audio albums, only to a document for document
            albums and to a photo or a video otherwise. Use a previously uploaded file via its <see cref="T:Telegram.Bot.Types.InputFileId"/> or specify a URL</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="media">A new media content of the message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageMedia(System.String,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit animation, audio, document, photo, or video messages. If a message is part of
            a message album, then it can be edited only to an audio for audio albums, only to a document for document
            albums and to a photo or a video otherwise. Use a previously uploaded file via its <see cref="T:Telegram.Bot.Types.InputFileId"/> or specify a URL</summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="media">A new media content of the message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
        </member>
        <member name="M:WTelegram.Bot.EditMessageReplyMarkup(Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit only the reply markup of messages.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.EditMessageReplyMarkup(System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to edit only the reply markup of messages.</summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
        </member>
        <member name="M:WTelegram.Bot.StopPoll(Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>Use this method to stop a poll which was sent by the bot.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the original message with the poll</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success, the stopped <see cref="T:Telegram.Bot.Types.Poll"/> with the final results is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.DeleteMessages(Telegram.Bot.Types.ChatId,System.Int32[])">
            <summary>Use this method to delete a message, including service messages, with the following limitations:
            <list type="bullet"><item>A message can only be deleted if it was sent less than 48 hours ago</item>
            <item>A dice message in a private chat can only be deleted if it was sent more than 24 hours ago</item>
            <item>Bots can delete outgoing messages in private chats, groups, and supergroups</item>
            <item>Bots can delete incoming messages in private chats</item>
            <item>Bots granted can_post_messages permissions can delete outgoing messages in channels</item>
            <item>If the bot is an administrator of a group, it can delete any message there</item>
            <item>If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there</item></list></summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageIds">Identifiers of 1-100 messages to delete</param>
        </member>
        <member name="M:WTelegram.Bot.SendSticker(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="sticker">Sticker to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a file that exists on the Telegram servers (recommended),
            pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP or .TGS sticker.
            Video stickers can only be sent by a <see cref="T:Telegram.Bot.Types.InputFileId"/>. Animated stickers can't be sent via an HTTP URL.</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="emoji">Emoji associated with the sticker; only for just uploaded stickers</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the action will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetStickerSet(System.String)">
            <summary>Use this method to get a sticker set.</summary>
            <param name="name">Name of the sticker set</param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetCustomEmojiStickers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Use this method to get information about custom emoji stickers by their identifiers.
            Returns an Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</summary>
            <param name="customEmojiIds">List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.</param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.UploadStickerFile(System.Int64,Telegram.Bot.Types.InputFileStream,Telegram.Bot.Types.Enums.StickerFormat)">
            <summary>Use this method to upload a file with a sticker for later use in the <see cref="!:CreateNewStickerSetRequest"/>
            and <see cref="!:AddStickerToSetRequest"/> methods (the file can be used multiple times).</summary>
            <param name="userId">User identifier of sticker file owner</param>
            <param name="sticker">A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format.</param>
            <param name="stickerFormat">Format of the sticker</param>
            <returns>Returns the uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.</returns>
        </member>
        <member name="M:WTelegram.Bot.CreateNewStickerSet(System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean)">
            <summary>Use this method to create a new sticker set owned by a user.</summary>
            <param name="userId">User identifier of created sticker set owner</param>
            <param name="name">Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>). Can contain
            only English letters, digits and underscores. Must begin with a letter, can't contain consecutive
            underscores and must end in <i>"_by_&lt;bot username&gt;"</i>. <i>&lt;bot_username&gt;</i> is case insensitive. 1-64 characters</param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="stickers">A JSON-serialized list of 1-50 initial stickers to be added to the sticker set</param>
            <param name="stickerType">Type of stickers in the set. By default, a regular sticker set is created.</param>
            <param name="needsRepainting">Pass <see langword="true"/> if stickers in the sticker set must be repainted to the color of text
            when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context;
            for <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">custom emoji</see> sticker sets only</param>
        </member>
        <member name="M:WTelegram.Bot.AddStickerToSet(System.Int64,System.String,Telegram.Bot.Types.InputSticker)">
            <summary>Use this method to add a new sticker to a set created by the bot.
            The format of the added sticker must match the format of the other stickers in the set. <list type="bullet">
            <item>Emoji sticker sets can have up to 200 stickers.</item>
            <item>Animated and video sticker sets can have up to 50 stickers.</item>
            <item>Static sticker sets can have up to 120 stickers.</item></list></summary>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="sticker">A JSON-serialized object with information about the added sticker.
            If exactly the same sticker had already been added to the set, then the set isn't changed.</param>
        </member>
        <member name="M:WTelegram.Bot.SetStickerPositionInSet(Telegram.Bot.Types.InputFileId,System.Int32)">
            <summary>Use this method to move a sticker in a set created by the bot to a specific position.</summary>
            <param name="sticker"><see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker</param>
            <param name="position">New sticker position in the set, zero-based</param>
        </member>
        <member name="M:WTelegram.Bot.DeleteStickerFromSet(Telegram.Bot.Types.InputFileId)">
            <summary>Use this method to delete a sticker from a set created by the bot.</summary>
            <param name="sticker"><see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker</param>
        </member>
        <member name="M:WTelegram.Bot.ReplaceStickerInSet(System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker)">
            <summary>Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to
            calling <see cref="!:DeleteStickerFromSet(Telegram.Bot.Telegram.Bot.Requests.DeleteStickerFromSetRequest,System.Threading.CancellationToken)"/>,
            then <see cref="!:AddStickerToSet(Telegram.Bot.Telegram.Bot.Requests.AddStickerToSetRequest,System.Threading.CancellationToken)"/>,
            then <see cref="!:SetStickerPositionInSet(Telegram.Bot.Telegram.Bot.Requests.SetStickerPositionInSetRequest,System.Threading.CancellationToken)"/>.
            Returns <see langword="true"/> on success.</summary>
            <param name="userId">User identifier of the sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="oldSticker">File identifier of the replaced sticker</param>
            <param name="sticker">An object with information about the added sticker. If exactly the same sticker had already been added to the
            set, then the set remains unchanged.</param>
        </member>
        <member name="M:WTelegram.Bot.SetStickerInfo(Telegram.Bot.Types.InputFileId,System.String,System.String,Telegram.Bot.Types.MaskPosition)">
            <summary>Use this method to change the list of emoji or the search keywords assigned to a regular or custom emoji sticker ;
            or to change the mask position of a mask sticker. The sticker must belong to a sticker set created by the bot.</summary>
            <param name="sticker"><see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker</param>
            <param name="emojiList">(optional) A string composed of 1-20 emoji associated with the sticker</param>
            <param name="keywords">(optional) A comma-separated list of 0-20 search keywords for the sticker with total length of up to 64 characters. Pass an empty list to remove keywords.</param>
            <param name="maskPosition">(optional) An object with the position where the mask should be placed on faces. Pass null to remove the mask position.</param>
        </member>
        <member name="M:WTelegram.Bot.SetStickerSetTitle(System.String,System.String)">
            <summary>Use this method to set the title of a created sticker set.</summary>
            <param name="name">Sticker set name</param>
            <param name="title">Sticker set title, 1-64 characters</param>
        </member>
        <member name="M:WTelegram.Bot.SetStickerSetThumbnail(System.String,System.Int64,Telegram.Bot.Types.Enums.StickerFormat,Telegram.Bot.Types.InputFile)">
            <summary>Use this method to set the thumbnail of a regular or mask sticker set.
            The format of the thumbnail file must match the format of the stickers in the set. Returns <see langword="true"/> on success.</summary>
            <param name="name">Sticker set name</param>
            <param name="userId">User identifier of the sticker set owner</param>
            <param name="format">Format of the thumbnail</param>
            <param name="thumbnail">A <b>.WEBP</b> or <b>.PNG</b> image with the thumbnail, must be up to 128 kilobytes in size and have
            a width and height of exactly 100px, or a <b>.TGS</b> animation with a thumbnail up to 32 kilobytes in
            size (see <a href="https://core.telegram.org/animated_stickers#technical-requirements"/> for animated
            sticker technical requirements), or a <b>WEBM</b> video with the thumbnail up to 32 kilobytes in size; see
            <a href="https://core.telegram.org/stickers#video-sticker-requirements"/> for video sticker technical
            requirements. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as a String to send a file that already exists on the
            Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or
            upload a new one using multipart/form-data. Animated and video sticker set thumbnails can't be uploaded
            via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.</param>
        </member>
        <member name="M:WTelegram.Bot.SetCustomEmojiStickerSetThumbnail(System.String,System.String)">
            <summary>Use this method to set the thumbnail of a custom emoji sticker set.</summary>
            <param name="name">Sticker set name</param>
            <param name="customEmojiId">Custom emoji identifier of a <see cref="T:Telegram.Bot.Types.Sticker"/> from the <see cref="T:Telegram.Bot.Types.StickerSet"/>;
            pass an <see langword="null"/> to drop the thumbnail and use the first sticker as the thumbnail.</param>
        </member>
        <member name="M:WTelegram.Bot.DeleteStickerSet(System.String)">
            <summary>Use this method to delete a sticker set that was created by the bot.</summary>
            <param name="name">Sticker set name</param>
        </member>
        <member name="M:WTelegram.Bot.AnswerInlineQuery(System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult},System.Int32,System.Boolean,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton)">
            <summary>Use this method to send answers to an inline query.</summary>
            <remarks>No more than <b>50</b> results per query are allowed.</remarks>
            <param name="inlineQueryId">Unique identifier for the answered query</param>
            <param name="results">An array of results for the inline query</param>
            <param name="cacheTime">The maximum amount of time in seconds that the result of the inline query may be cached on the server.</param>
            <param name="isPersonal">Pass <see langword="true"/>, if results may be cached on the server side only for the user that sent the query.
            By default, results may be returned to any user who sends the same query</param>
            <param name="nextOffset">Pass the offset that a client should send in the next query with the same text to receive more results.
            Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes</param>
            <param name="button">A JSON-serialized object describing a button to be shown above inline query results</param>
        </member>
        <member name="M:WTelegram.Bot.AnswerWebAppQuery(System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult)">
            <summary>Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of
            the user to the chat from which the query originated. On success, a <see cref="T:Telegram.Bot.Types.SentWebAppMessage"/> object is returned.</summary>
            <param name="webAppQueryId">Unique identifier for the query to be answered</param>
            <param name="result">An object describing the message to be sent</param>
        </member>
        <member name="M:WTelegram.Bot.SendInvoice(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>Use this method to send invoices.</summary>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes</param>
            <param name="providerToken">Payments provider token, obtained via <a href="https://t.me/botfather">@BotFather</a></param>
            <param name="currency">Three-letter ISO 4217 currency code, see
            <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a></param>
            <param name="prices">Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="maxTipAmount">The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).
            For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>. See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).</param>
            <param name="suggestedTipAmounts">An array of suggested amounts of tips in the <i>smallest units</i> of the currency (integer,
            <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must
            be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/></param>
            <param name="startParameter">Unique deep-linking parameter. If left empty, <b>forwarded copies</b> of the sent message will have
            a <i>Pay</i> button, allowing multiple users to pay directly from the forwarded message, using the same
            invoice. If non-empty, forwarded copies of the sent message will have a <i>URL</i> button with a deep
            link to the bot (instead of a <i>Pay</i> button), with the value used as the start parameter</param>
            <param name="providerData">A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
            description of required fields should be provided by the payment provide</param>
            <param name="photoUrl">URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
            People like it better when they see what they are paying for</param>
            <param name="photoSize">Photo size</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <see langword="true"/>, if you require the user's full name to complete the order</param>
            <param name="needPhoneNumber">Pass <see langword="true"/>, if you require the user's phone number to complete the order</param>
            <param name="needEmail">Pass <see langword="true"/>, if you require the user's email to complete the order</param>
            <param name="needShippingAddress">Pass <see langword="true"/>, if you require the user's shipping address to complete the order</param>
            <param name="sendPhoneNumberToProvider">Pass <see langword="true"/>, if user's phone number should be sent to provider</param>
            <param name="sendEmailToProvider">Pass <see langword="true"/>, if user's email address should be sent to provider</param>
            <param name="isFlexible">Pass <see langword="true"/>, if the final price depends on the shipping method</param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.CreateInvoiceLink(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Use this method to create a link for an invoice.</summary>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes</param>
            <param name="providerToken">Payments provider token, obtained via <a href="https://t.me/botfather">@BotFather</a></param>
            <param name="currency">Three-letter ISO 4217 currency code, see
            <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a></param>
            <param name="prices">Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)</param>
            <param name="providerData">JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
            description of required fields should be provided by the payment provide</param>
            <param name="maxTipAmount">The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).
            For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>. See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).</param>
            <param name="suggestedTipAmounts">An array of suggested amounts of tips in the <i>smallest units</i> of the currency (integer,
            <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must
            be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/></param>
            <param name="photoUrl">URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.</param>
            <param name="photoSize">Photo size</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <see langword="true"/>, if you require the user's full name to complete the order</param>
            <param name="needPhoneNumber">Pass <see langword="true"/>, if you require the user's phone number to complete the order</param>
            <param name="needEmail">Pass <see langword="true"/>, if you require the user's email to complete the order</param>
            <param name="needShippingAddress">Pass <see langword="true"/>, if you require the user's shipping address to complete the order</param>
            <param name="sendPhoneNumberToProvider">Pass <see langword="true"/>, if user's phone number should be sent to provider</param>
            <param name="sendEmailToProvider">Pass <see langword="true"/>, if user's email address should be sent to provider</param>
            <param name="isFlexible">Pass <see langword="true"/>, if the final price depends on the shipping method</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.AnswerShippingQuery(System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption})">
            <summary>If you sent an invoice requesting a shipping address and the parameter <c>isFlexible"</c> was specified,
            the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <see cref="T:Telegram.Bot.Types.Payments.ShippingQuery"/> field
            to the bot. Use this method to reply to shipping queries or indicate failure</summary>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">On failure, the error message in human readable form that explains why it is impossible to
            complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user</param>
            <param name="shippingOptions">On success, an array of available shipping options</param>
        </member>
        <member name="M:WTelegram.Bot.AnswerPreCheckoutQuery(System.String,System.String)">
            <summary>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation
            in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <see cref="T:Telegram.Bot.Types.Payments.PreCheckoutQuery"/>.
            Use this method to respond to it with success or failure</summary>
            <remarks><b>Note</b>: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.</remarks>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">Use null for success. In case of failure, the error message in
            human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry,
            somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment
            details. Please choose a different color or garment!"). Telegram will display this message to the user</param>
        </member>
        <member name="M:WTelegram.Bot.SendGame(System.Int64,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>Use this method to send a game.</summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="gameShortName">Short name of the game, serves as the unique identifier for the game. Set up your games via
            <a href="https://t.me/botfather">@BotFather</a></param>
            <param name="disableNotification">Sends the message silently. Users will receive a notification with no sound</param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:WTelegram.Bot.SetGameScore(System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean)">
            <summary>Use this method to set the score of the specified user in a game.</summary>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="force">Pass <see langword="true"/>, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters</param>
            <param name="disableEditMessage">Pass <see langword="true"/>, if the game message should not be automatically edited to include the current scoreboard</param>
            <returns>On success returns the edited <see cref="T:Telegram.Bot.Types.Message"/>. Returns an error, if the new score is not greater
            than the user's current score in the chat and <paramref name="force"/> is <see langword="false"/></returns>
        </member>
        <member name="M:WTelegram.Bot.SetGameScore(System.Int64,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>Use this method to set the score of the specified user in a game.</summary>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="inlineMessageId">Identifier of the inline message.</param>
            <param name="force">Pass <see langword="true"/>, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters</param>
            <param name="disableEditMessage">Pass <see langword="true"/>, if the game message should not be automatically edited to include the current scoreboard</param>
            <returns>Returns an error, if the new score is not greater than the user's current score in the chat and
            <paramref name="force"/> is <see langword="false"/></returns>
        </member>
        <member name="M:WTelegram.Bot.GetGameHighScores(System.Int64,System.Int64,System.Int32)">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.</summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. 
            Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.</remarks>
            <param name="userId">Target user id</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetGameHighScores(System.Int64,System.String)">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.</summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. 
            Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.</remarks>
            <param name="userId">User identifier</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="M:WTelegram.Bot.GetReplyToMessage(TL.InputPeer,Telegram.Bot.Types.ReplyParameters)">
            <summary>Fetch the message being replied-to if any</summary>
        </member>
        <member name="M:WTelegram.Bot.MakeReplyTo(Telegram.Bot.Types.ReplyParameters,System.Int32,TL.InputPeer)">
            <summary>Build the eventual InputReplyTo structure for sending a reply message</summary>
        </member>
        <member name="M:WTelegram.Bot.GetMessage(TL.InputPeer,System.Int32)">
            <summary>Fetch and build a Bot Message (cached)</summary>
        </member>
        <member name="M:WTelegram.Bot.ApplyParse(Telegram.Bot.Types.Enums.ParseMode,System.String,TL.MessageEntity[]@)">
            <summary>Apply ParseMode to text and entities</summary>
        </member>
        <member name="M:WTelegram.Bot.ApplyParse(Telegram.Bot.Types.Enums.ParseMode,System.String@,System.Collections.Generic.IEnumerable{TL.MessageEntity}@)">
            <summary>Apply ParseMode to text and entities</summary>
        </member>
        <member name="M:WTelegram.Bot.InputMediaPhoto(Telegram.Bot.Types.InputFile,System.Boolean)">
            <summary>Return TL structure for the photo InputFile. Upload the file for InputFileStream</summary>
        </member>
        <member name="M:WTelegram.Bot.InputMediaDocument(Telegram.Bot.Types.InputFile,System.Boolean,System.String,System.String)">
            <summary>Return TL structure for the document InputFile. Upload the file for InputFileStream</summary>
        </member>
        <member name="M:WTelegram.Bot.InputSingleMedia(Telegram.Bot.Types.InputMedia)">
            <summary>Return TL structure for the InputMedia and its caption. Upload the file/thumb for InputFileStream and add attributes</summary>
        </member>
        <member name="M:WTelegram.Bot.MakeUpdate(TL.Update)">
            <summary>Converts Client API TL.Update to Bot Telegram.Bot.Types.Update</summary>
        </member>
        <member name="M:WTelegram.Bot.UserOrResolve(System.Int64)">
            <returns>User or a stub on failure</returns>
        </member>
        <member name="M:WTelegram.Bot.UserFromPeer(TL.Peer)">
            <returns>null if peer is not PeerUser ; User or a stub on failure</returns>
        </member>
        <member name="M:WTelegram.Bot.PostedMsg(System.Threading.Tasks.Task{TL.UpdatesBase},TL.InputPeer,System.String,Telegram.Bot.Types.Message)">
            <summary>Handle UpdatesBase returned by various Client API and build the returned Bot Message</summary>
        </member>
        <member name="M:WTelegram.Bot.MakeMessageAndReply(TL.MessageBase,Telegram.Bot.Types.Message,System.String)">
            <summary>Converts Client API TL.MessageBase to Bot Telegram.Bot.Types.Message and assign the ReplyToMessage/ExternalReply</summary>
        </member>
        <member name="M:WTelegram.Bot.MakeMessage(TL.MessageBase)">
            <summary>Converts Client API TL.MessageBase to Bot Telegram.Bot.Types.Message</summary>
        </member>
        <member name="T:WTelegram.BotHelpers">
            <summary>Helpers methods</summary>
        </member>
        <member name="F:WTelegram.BotHelpers.ExtToMimeType">
            <summary>Used to guess MimeType based on file extension, when uploading documents</summary>
        </member>
        <member name="F:WTelegram.BotHelpers.JsonOptions">
            <summary>For serializing indented Json with snake_case fields and enums, and supporting Telegram.Bot polymorphism</summary>
        </member>
        <member name="T:Telegram.Bot.ITelegramBotClient">
            <summary>
            A client interface to use the Telegram Bot API
            </summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.Bot">
            <summary>Access to the underlying WTelegram.Bot instance (cleaner/simpler Bot API)</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.Client">
            <summary>Access to the underlying WTelegram.Client instance (Client API)</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.Token">
            <summary>Bot token</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.LocalBotServer">
            <summary>
            <see langword="true"/> when the bot is using local Bot API server
            </summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.BotId">
            <summary>
            Unique identifier for the bot from bot token. For example, for the bot token
            "1234567:4TT8bAc8GHUspu3ERYn-KGcvsvGB9u_n4ddy", the bot id is "1234567".
            Token format is not public API so this property is optional and may stop working
            in the future if Telegram changes it's token format.
            </summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.Timeout">
            <summary>
            Timeout for requests
            </summary>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.MakeRequestAsync(Telegram.Bot.Requests.GetUpdatesRequest,System.Threading.CancellationToken)">
            <summary>
            Send a request to Bot API
            </summary>
            <param name="request">API request object</param>
            <param name="cancellationToken"></param>
            <returns>Result of the API request</returns>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.TestApiAsync(System.Threading.CancellationToken)">
            <summary>
            Test the API token
            </summary>
            <param name="cancellationToken"></param>
            <returns><see langword="true"/> if token is valid</returns>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Use this method to download a file. Get <paramref name="filePath"/> by calling
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>
            </summary>
            <param name="filePath">Path to file on server</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <exception cref="T:System.ArgumentException">filePath is <c>null</c>, empty or too short</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is <c>null</c></exception>
        </member>
        <member name="T:Telegram.Bot.Requests.RequestBase`1">
            <summary>Represents an API request</summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RequestBase`1.#ctor(System.String)">
            <summary>Represents an API request</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetUpdatesRequest">
            <summary>
            Use this method to receive incoming updates using long polling
            (<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>).
            An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects is returned.
            </summary>
            <remarks>
            <list type="number">
            <item>This method will not work if an outgoing webhook is set up.</item>
            <item>
            In order to avoid getting duplicate updates, recalculate <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset"/>
            after each server response.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">
            <summary>
            Identifier of the first update to be returned. Must be greater by one than the highest among
            the identifiers of previously received updates. By default, updates starting with the earliest
            unconfirmed update are returned. An update is considered confirmed as soon as
            <see cref="T:Telegram.Bot.Requests.GetUpdatesRequest"/> is called with an <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset"/> higher than its
            <see cref="P:Telegram.Bot.Types.Update.Id"/>. The negative offset can be specified to retrieve updates
            starting from <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">-offset</see> update from the end of the updates queue.
            All previous updates will forgotten.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Limit">
            <summary>
            Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Timeout">
            <summary>
            Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive,
            short polling should be used for testing purposes only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.AllowedUpdates">
            <summary>
            A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types.
            See <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types. Specify
            an empty list to receive all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>
            (default). If not specified, the previous setting will be used.
            </summary>
            <remarks>
            Please note that this parameter doesn't affect updates created before the call to the
            getUpdates, so unwanted updates may be received for a short period of time.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.GetUpdatesRequest.#ctor">
            <summary>
            Initializes a new GetUpdates request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Update">
            <summary>
            This object represents an incoming update.
            </summary>
            <remarks>
            Only <b>one</b> of the optional parameters can be present in any given update.
            </remarks>
        </member>
        <member name="F:Telegram.Bot.Types.Update.TLUpdate">
            <summary>The corresponding Client API update structure</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Id">
            <summary>
            The update's unique identifier. Update identifiers start from a certain positive number and increase
            sequentially. This ID becomes especially handy if you're using
            <a href="https://core.telegram.org/bots/api#setwebhook">Webhooks</a>, since it allows you to ignore repeated
            updates or to restore the correct update sequence, should they get out of order. If there are no new updates
            for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Message">
            <summary>
            Optional. New incoming message of any kind — text, photo, sticker, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedMessage">
            <summary>
            Optional. New version of a message that is known to the bot and was edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChannelPost">
            <summary>
            Optional. New incoming channel post of any kind — text, photo, sticker, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedChannelPost">
            <summary>
            Optional. New version of a channel post that is known to the bot and was edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.BusinessConnection">
            <summary>
            Optional. The bot was connected to or disconnected from a business account, or a user edited an existing
            connection with the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.BusinessMessage">
            <summary>
            Optional. New non-service message from a connected business account
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedBusinessMessage">
            <summary>
            Optional. New version of a message from a connected business account
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.DeletedBusinessMessages">
            <summary>
            Optional. Messages were deleted from a connected business account
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MessageReaction">
            <summary>
            Optional. A reaction to a message was changed by a user. The bot must be an administrator
            in the chat and must explicitly specify "<see cref="F:Telegram.Bot.Types.Enums.UpdateType.MessageReaction"/>" in the list
            of <c>AllowedUpdates</c> to receive these updates.
            The update isn't received for reactions set by bots.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MessageReactionCount">
            <summary>
            Optional. Reactions to a message with anonymous reactions were changed. The bot must
            be an administrator in the chat and must explicitly specify "<see cref="F:Telegram.Bot.Types.Enums.UpdateType.MessageReactionCount"/>"
            in the list of <c>AllowedUpdates</c> to receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.InlineQuery">
            <summary>
            Optional. New incoming inline query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChosenInlineResult">
            <summary>
            Optional. The result of a inline query that was chosen by a user and sent to their chat partner
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.CallbackQuery">
            <summary>
            Optional. New incoming callback query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ShippingQuery">
            <summary>
            Optional. New incoming shipping query. Only for invoices with flexible price
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PreCheckoutQuery">
            <summary>
            Optional. New incoming pre-checkout query. Contains full information about checkout
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Poll">
            <summary>
            Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PollAnswer">
            <summary>
            Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were
            sent by the bot itself.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MyChatMember">
            <summary>
            Optional. The bot’s chat member status was updated in a chat. For private chats, this update is received
            only when the bot is blocked or unblocked by the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatMember">
            <summary>
            Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat
            and must explicitly specify “<see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>” in the list of <c>AllowedUpdates</c> to
            receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatJoinRequest">
            <summary>
            Optional. A request to join the chat has been sent. The bot must have the
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right in the chat to receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatBoost">
            <summary>
            Optional. A chat boost was added or changed.
            The bot must be an administrator in the chat to receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.RemovedChatBoost">
            <summary>
            Optional. A boost was removed from a chat.
            The bot must be an administrator in the chat to receive these updates.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Type">
            <summary>
            Gets the update type.
            </summary>
            <value>
            The update type.
            </value>
        </member>
        <member name="T:Telegram.Bot.Types.Message">
            <summary>
            This object represents a message.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Message.TLMessage">
            <summary>The corresponding Client API message structure</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageId">
            <summary>
            Unique message identifier inside this chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageThreadId">
            <summary>
            Optional. Unique identifier of a message thread to which the message belongs; for supergroups only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.From">
            <summary>
            Optional. Sender, empty for messages sent to channels
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderChat">
            <summary>
            Optional. Sender of the message, sent on behalf of a chat. The channel itself for channel messages.
            The supergroup itself for messages from anonymous group administrators. The linked channel for messages
            automatically forwarded to the discussion group
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderBoostCount">
            <summary>
            Optional. If the sender of the message boosted the chat, the number of boosts added by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderBusinessBot">
            <summary>
            Optional. The bot that actually sent the message on behalf of the business account.
            Available only for outgoing messages sent on behalf of the connected business account.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Date">
            <summary>
            Date the message was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.BusinessConnectionId">
            <summary>
            Optional. Unique identifier of the business connection from which the message was received. If non-empty,
            the message belongs to a chat of the corresponding business account that is independent from any potential bot
            chat which might share the same identifier.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Chat">
            <summary>
            Conversation the message belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFrom">
            <summary>
            Optional. For forwarded messages, sender of the original message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromChat">
            <summary>
            Optional. For messages forwarded from channels or from anonymous administrators, information about the
            original sender chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromMessageId">
            <summary>
            Optional. For messages forwarded from channels, identifier of the original message in the channel
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardSignature">
            <summary>
            Optional. For messages forwarded from channels, signature of the post author if present
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardSenderName">
            <summary>
            Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in
            forwarded messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardDate">
            <summary>
            Optional. For forwarded messages, date the original message was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardOrigin">
             <summary>
            Optional. Information about the original message for forwarded messages
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.IsTopicMessage">
            <summary>
            Optional. <see langword="true"/>, if the message is sent to a forum topic
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.IsAutomaticForward">
            <summary>
            Optional. <see langword="true"/>, if the message is a channel post that was automatically forwarded to the connected
            discussion group
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyToMessage">
            <summary>
            Optional. For replies, the original message. Note that the <see cref="T:Telegram.Bot.Types.Message"/> object in this field
            will not contain further <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> fields even if it itself is a reply.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ExternalReply">
            <summary>
            Optional. Information about the message that is being replied to, which may come from
            another chat or forum topic
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Quote">
            <summary>
            Optional. For replies that quote part of the original message, the quoted part of the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyToStory">
            <summary>
            Optional. For replies to a story, the original story
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ViaBot">
            <summary>
            Optional. Bot through which the message was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EditDate">
            <summary>
            Optional. Date the message was last edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.HasProtectedContent">
            <summary>
            Optional. <see langword="true"/>, if messages from the chat can't be forwarded to other chats.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.IsFromOffline">
            <summary>
            Optional. <see langword="true"/>, if the message was sent by an implicit action, for example, as an away or a
            greeting business message, or as a scheduled message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MediaGroupId">
            <summary>
            Optional. The unique identifier of a media message group this message belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.AuthorSignature">
            <summary>
            Optional. Signature of the post author for messages in channels, or the custom title of an anonymous
            group administrator
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Text">
            <summary>
            Optional. For text messages, the actual text of the message, 0-4096 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Entities">
            <summary>
            Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear
            in the text
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EntityValues">
            <summary>
            Gets the entity values.
            </summary>
            <value>
            The entity contents.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.Message.LinkPreviewOptions">
            <summary>
            Optional. Options used for link preview generation for the message, if it is a text message
            and link preview options were changed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Animation">
            <summary>
            Optional. Message is an animation, information about the animation. For backward compatibility, when this
            field is set, the <see cref="P:Telegram.Bot.Types.Message.Document"/> field will also be set
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Audio">
            <summary>
            Optional. Message is an audio file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Document">
            <summary>
            Optional. Message is a general file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Photo">
            <summary>
            Optional. Message is a photo, available sizes of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Sticker">
            <summary>
            Optional. Message is a sticker, information about the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Story">
            <summary>
            Optional. Message is a forwarded story
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Video">
            <summary>
            Optional. Message is a video, information about the video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoNote">
            <summary>
            Optional. Message is a video note, information about the video message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Voice">
            <summary>
            Optional. Message is a voice message, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Caption">
            <summary>
            Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.CaptionEntities">
            <summary>
            Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that
            appear in the caption
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.CaptionEntityValues">
            <summary>
            Gets the caption entity values.
            </summary>
            <value>
            The caption entity contents.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.Message.HasMediaSpoiler">
            <summary>
            Optional. <see langword="true"/>, if the message media is covered by a spoiler animation
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Contact">
            <summary>
            Optional. Message is a shared contact, information about the contact
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Dice">
            <summary>
            Optional. Message is a dice with random value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Game">
             <summary>
            Optional. Message is a game, information about the game
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Poll">
            <summary>
            Optional. Message is a native poll, information about the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Venue">
            <summary>
            Optional. Message is a venue, information about the venue. For backward compatibility, when this field
            is set, the <see cref="P:Telegram.Bot.Types.Message.Location"/> field will also be set
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Location">
            <summary>
            Optional. Message is a shared location, information about the location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatMembers">
            <summary>
            Optional. New members that were added to the group or supergroup and information about them
            (the bot itself may be one of these members)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.LeftChatMember">
            <summary>
            Optional. A member was removed from the group, information about them (this member may be the bot itself)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatTitle">
            <summary>
            Optional. A chat title was changed to this value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatPhoto">
            <summary>
            Optional. A chat photo was change to this value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.DeleteChatPhoto">
            <summary>
            Optional. Service message: the chat photo was deleted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GroupChatCreated">
            <summary>
            Optional. Service message: the group has been created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SupergroupChatCreated">
            <summary>
            Optional. Service message: the supergroup has been created. This field can't be received in a message
            coming through updates, because bot can't be a member of a supergroup when it is created. It can only be
            found in <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> if someone replies to a very first message in a directly created
            supergroup.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChannelChatCreated">
            <summary>
            Optional. Service message: the channel has been created. This field can't be received in a message coming
            through updates, because bot can't be a member of a channel when it is created. It can only be found in
            <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> if someone replies to a very first message in a channel.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageAutoDeleteTimerChanged">
            <summary>
            Optional. Service message: auto-delete timer settings changed in the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateToChatId">
            <summary>
            Optional. The group has been migrated to a supergroup with the specified identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateFromChatId">
            <summary>
            Optional. The supergroup has been migrated from a group with the specified identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PinnedMessage">
            <summary>
            Optional. Specified message was pinned. Note that the <see cref="T:Telegram.Bot.Types.Message"/> object in this field
            will not contain further <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/> fields even if it itself is a reply.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Invoice">
            <summary>
            Optional. Message is an invoice for a
            <a href="https://core.telegram.org/bots/api#payments">payment</a>, information about the invoice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SuccessfulPayment">
            <summary>
            Optional. Message is a service message about a successful payment, information about the payment
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.UsersShared">
            <summary>
            Optional. Service message: a user was shared with the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.UserShared">
            <summary>
            Optional. Service message: a user was shared with the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChatShared">
            <summary>
            Optional. Service message: a chat was shared with the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ConnectedWebsite">
            <summary>
            Optional. The domain name of the website on which the user has logged in
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.WriteAccessAllowed">
            <summary>
            Optional. Service message: the user allowed the bot added to the attachment menu to write messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PassportData">
            <summary>
            Optional. Telegram Passport data
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ProximityAlertTriggered">
            <summary>
            Optional. Service message. A user in the chat triggered another user's proximity alert while
            sharing Live Location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.BoostAdded">
            <summary>
            Optional. Service message: user boosted the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicCreated">
            <summary>
            Optional. Service message: forum topic created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicEdited">
            <summary>
            Optional. Service message: forum topic edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicClosed">
            <summary>
            Optional. Service message: forum topic closed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicReopened">
            <summary>
            Optional. Service message: forum topic reopened
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GeneralForumTopicHidden">
            <summary>
            Optional. Service message: the 'General' forum topic hidden
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GeneralForumTopicUnhidden">
            <summary>
            Optional. Service message: the 'General' forum topic unhidden
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GiveawayCreated">
            <summary>
            Optional. Service message: a scheduled giveaway was created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Giveaway">
            <summary>
            Optional. The message is a scheduled giveaway message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GiveawayWinners">
            <summary>
            Optional. A giveaway with public winners was completed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GiveawayCompleted">
            <summary>
            Optional. Service message: a giveaway without public winners was completed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatScheduled">
            <summary>
            Optional. Service message: video chat scheduled
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatStarted">
            <summary>
            Optional. Service message: video chat started
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatEnded">
            <summary>
            Optional. Service message: video chat ended
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatParticipantsInvited">
            <summary>
            Optional. Service message: new participants invited to a video chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.WebAppData">
            <summary>
            Optional. Service message: data sent by a Web App
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyMarkup">
            <summary>
            Optional. Inline keyboard attached to the message. <see cref="T:Telegram.Bot.Types.LoginUrl"/> buttons are represented as
            ordinary url buttons.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Type">
            <summary>
            Gets the <see cref="T:Telegram.Bot.Types.Enums.MessageType"/> of the <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
            <value>
            The <see cref="T:Telegram.Bot.Types.Enums.MessageType"/> of the <see cref="T:Telegram.Bot.Types.Message"/>
            </value>
        </member>
        <member name="T:Telegram.Bot.Types.Chat">
            <summary>
            This object represents a chat.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Chat.TLInfo">
            <summary>The corresponding Client API message structure. Real type can be TL.User, TL.Chat, TL.Channel...<br/>
            If it was obtained via GetChat(), real type can be TL.Users_UserFull, TL.Messages_ChatFull)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.AccessHash">
            <summary>Client API access_hash of the chat</summary>
        </member>
        <member name="M:Telegram.Bot.Types.Chat.op_Implicit(Telegram.Bot.Types.Chat)~TL.InputPeer">
            <summary>Useful operator for Client API calls</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Id">
            <summary>
            Unique identifier for this chat. This number may have more
            than 32 significant bits and some programming languages may have
            difficulty/silent defects in interpreting it. But it has
            at most 52 significant bits, so a signed 64-bit integer
            or double-precision float type are safe for storing this identifier.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Type">
            <summary>
            Type of chat, can be either “private”, “group”, “supergroup” or “channel”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Title">
            <summary>
            Optional. Title, for supergroups, channels and group chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Username">
            <summary>
            Optional. Username, for private chats, supergroups and channels if available
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.FirstName">
            <summary>
            Optional. First name of the other party in a private chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.LastName">
            <summary>
            Optional. Last name of the other party in a private chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.IsForum">
            <summary>
            Optional. <see langword="true"/>, if the supergroup chat is a forum (has topics enabled)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Photo">
            <summary>
            Optional. Chat photo. Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.ActiveUsernames">
            <summary>
            Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Birthday">
            <summary>
            Optional. For private chats, the date of birth of the user.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.BusinessIntro">
            <summary>
            Optional. For private chats with business accounts, the intro of the business.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.BusinessLocation">
            <summary>
            Optional. For private chats with business accounts, the location of the business.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.BusinessOpeningHours">
            <summary>
            Optional. For private chats with business accounts, the opening hours of the business.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.PersonalChat">
            <summary>
            Optional. For private chats, the personal channel of the user.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.AvailableReactions">
            <summary>
            Optional. List of available reactions allowed in the chat. If omitted, then all <see cref="P:Telegram.Bot.Types.ReactionTypeEmoji.Emoji">emoji reactions</see> are allowed.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.AccentColorId">
            <summary>
            Optional. Identifier of the <see href="https://core.telegram.org/bots/api#accent-colors">accent color</see>
            for the chat name and backgrounds of the chat photo, reply header, and link preview.
            See accent colors for more details. Returned only in <see cref="!:Requests.GetChatRequest"/>.
            Always returned in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.BackgroundCustomEmojiId">
            <summary>
            Optional. Custom emoji identifier of emoji chosen by the chat for the reply header and link preview background.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.ProfileAccentColorId">
            <summary>
            Optional. Identifier of the accent color for the chat's profile background.
            See <see href="https://core.telegram.org/bots/api#profile-accent-colors">profile accent colors</see> for more details.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.ProfileBackgroundCustomEmojiId">
            <summary>
            Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.EmojiStatusCustomEmojiId">
            <summary>
            Optional. Custom emoji identifier of emoji status of the other party in a private chat.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.EmojiStatusExpirationDate">
            <summary>
            Optional. Expiration date of the emoji status of the other party in a private chat, if any.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Bio">
            <summary>
            Optional. Bio of the other party in a private chat. Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.HasPrivateForwards">
            <summary>
            Optional. <see langword="true"/>, if privacy settings of the other party in the private chat allows to use
            <c>tg://user?id=&lt;user_id&gt;</c> links only in chats with the user.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.HasRestrictedVoiceAndVideoMessages">
            <summary>
            Optional. <see langword="true"/>, if the privacy settings of the other party restrict sending voice
            and video note messages in the private chat.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.JoinToSendMessages">
            <summary>
            Optional. <see langword="true"/>, if users need to join the supergroup before they can send messages.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.JoinByRequest">
            <summary>
            Optional. <see langword="true"/>, if all users directly joining the supergroup need to be approved by supergroup administrators.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Description">
            <summary>
            Optional. Description, for groups, supergroups and channel chats.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.InviteLink">
            <summary>
            Optional. Primary invite link, for groups, supergroups and channel chats.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.PinnedMessage">
            <summary>
            Optional. The most recent pinned message (by sending date).
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Permissions">
            <summary>
            Optional. Default chat member permissions, for groups and supergroups.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.SlowModeDelay">
            <summary>
            Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each
            unpriviledged user. Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.UnrestrictBoostCount">
            <summary>
            Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order
            to ignore slow mode and chat permissions. Returned only in getChat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.MessageAutoDeleteTime">
            <summary>
            Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.HasAggressiveAntiSpamEnabled">
            <summary>
            Optional. <see langword="true"/>, if aggressive anti-spam checks are enabled in the supergroup. The field is
            only available to chat administrators. Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.HasHiddenMembers">
            <summary>
            Optional. <see langword="true"/>, if non-administrators can only get the list of bots and administrators in
            the chat. Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.HasVisibleHistory">
            <summary>
            Optional.  <see langword="true"/>, if new chat members will have access to old messages; available only to chat administrators.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.HasProtectedContent">
            <summary>
            Optional. <see langword="true"/>, if messages from the chat can't be forwarded to other chats.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.StickerSetName">
            <summary>
            Optional. For supergroups, name of group sticker set.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.CanSetStickerSet">
            <summary>
            Optional. True, if the bot can change the group sticker set.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.CustomEmojiStickerSetName">
            <summary>
            Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be
            used by all users and bots in the group.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.LinkedChatId">
            <summary>
            Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel
            and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some
            programming languages may have difficulty/silent defects in interpreting it. But it is smaller than
            52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Location">
            <summary>
            Optional. For supergroups, the location to which the supergroup is connected.
            Returned only in <see cref="!:Requests.GetChatRequest"/>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.User">
            <summary>
            This object represents a Telegram user or bot.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.User.TLUser">
            <summary>The corresponding Client API message structure</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.AccessHash">
            <summary>Client API access_hash of the user</summary>
        </member>
        <member name="M:Telegram.Bot.Types.User.op_Implicit(Telegram.Bot.Types.User)~TL.InputPeerUser">
            <summary>Useful operator for Client API calls</summary>
        </member>
        <member name="M:Telegram.Bot.Types.User.op_Implicit(Telegram.Bot.Types.User)~TL.InputUser">
            <summary>Useful operator for Client API calls</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Id">
            <summary>
            Unique identifier for this user or bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.IsBot">
            <summary>
            <see langword="true"/>, if this user is a bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.FirstName">
            <summary>
            User's or bot’s first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LastName">
            <summary>
            Optional. User's or bot’s last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Username">
            <summary>
            Optional. User's or bot’s username
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LanguageCode">
            <summary>
            Optional. <a href="https://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</a> of the
            user's language
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.IsPremium">
            <summary>
            Optional. <see langword="true"/>, if this user is a Telegram Premium user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.AddedToAttachmentMenu">
            <summary>
            Optional. <see langword="true"/>, if this user added the bot to the attachment menu
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanJoinGroups">
            <summary>
            Optional. <see langword="true"/>, if the bot can be invited to groups.
            Returned only in <see cref="!:Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanReadAllGroupMessages">
            <summary>
            Optional. <see langword="true"/>, if privacy mode is disabled for the bot.
            Returned only in <see cref="!:Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.SupportsInlineQueries">
            <summary>
            Optional. <see langword="true"/>, if the bot supports inline queries.
            Returned only in <see cref="!:Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanConnectToBusiness">
            <summary>
            Optional. <see langword="true"/>, if the bot can be connected to a Telegram Business account to receive its
            messages. Returned only in <see cref="!:Requests.GetMeRequest"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.User.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Types.InputFile">
            <summary>
            A file to send
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFile">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFile.FromStream(System.IO.Stream,System.String)"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.op_Implicit(System.String)~Telegram.Bot.Types.InputFile">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFile.FromString(System.String)"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFile.FileType">
            <summary>
            Type of file to send
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromString(System.String)">
            <summary>
            Creates an instance of <see cref="T:Telegram.Bot.Types.InputFile"/> from a string containing a file's URL or file id
            </summary>
            <param name="urlOrFileId">A file's URL or a file id</param>
            <returns>An instance of a class that implements <see cref="T:Telegram.Bot.Types.InputFile"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromStream(System.IO.Stream,System.String)">
            <summary>
            Creates an <see cref="T:Telegram.Bot.Types.InputFileStream"/> from an instance <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> with file data to upload</param>
            <param name="fileName">An optional file name</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileStream"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromUri(System.Uri)">
            <summary>
            Creates an <see cref="T:Telegram.Bot.Types.InputFileUrl"/> from an instance <see cref="T:System.Uri"/>
            </summary>
            <param name="url"></param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileUrl"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromUri(System.String)">
            <summary>
            Creates an <see cref="T:Telegram.Bot.Types.InputFileUrl"/> from a URL passed as a <see cref="T:System.String"/>
            </summary>
            <param name="url">A URL of a file</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileUrl"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromFileId(System.String)">
            <summary>
            Creates an <see cref="T:Telegram.Bot.Types.InputFileId"/> from a file id
            </summary>
            <param name="fileId">An ID of a file</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileId"/></returns>
        </member>
        <member name="T:Telegram.Bot.Types.InputFileId">
            <summary>
            This object represents a file that is already stored somewhere on the Telegram servers
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileId.op_Implicit(System.String)~Telegram.Bot.Types.InputFileId">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFileId.#ctor(System.String)"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileId.FileType">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileId.Id">
            <summary>
            A file identifier
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileId.#ctor">
            <summary>
            This object represents a file that is already stored somewhere on the Telegram servers
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileId.#ctor(System.String)">
            <summary>
            This object represents a file that is already stored somewhere on the Telegram servers
            </summary>
            <param name="id">A file identifier</param>
        </member>
        <member name="T:Telegram.Bot.Types.InputFileStream">
            <summary>
            This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in
            the usual way that files are uploaded via the browser
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileStream.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFileStream">
            <summary>Implicit operator, same as <see cref="!:InputFileStream(Stream)"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileStream.FileType">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileStream.Content">
            <summary>
            File content to upload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileStream.FileName">
            <summary>
            Name of a file to upload using multipart/form-data
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data
            in the usual way that files are uploaded via the browser.
            </summary>
            <param name="content">File content to upload</param>
            <param name="fileName">Name of a file to upload using multipart/form-data</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileStream.#ctor">
            <summary>
            This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data
            in the usual way that files are uploaded via the browser.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageEntityType">
            <summary>Type of a <see cref="T:TL.MessageEntity"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Mention">
            <summary>A mentioned <see cref="T:Telegram.Bot.Types.User"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Hashtag">
            <summary>A searchable Hashtag</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.BotCommand">
            <summary>A Bot command</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Url">
            <summary>An URL</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Email">
            <summary>An email</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Bold">
            <summary>Bold text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Italic">
            <summary>Italic text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Code">
            <summary>Monowidth string</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Pre">
            <summary>Monowidth block</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.TextLink">
            <summary>Clickable text URLs</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.TextMention">
            <summary>Mentions for a <see cref="T:Telegram.Bot.Types.User"/> without <see cref="P:Telegram.Bot.Types.User.Username"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.PhoneNumber">
            <summary>Phone number</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Cashtag">
            <summary>A cashtag (e.g. $EUR, $USD) - $ followed by the short currency code</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Underline">
            <summary>Underlined text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Strikethrough">
            <summary>Strikethrough text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Spoiler">
            <summary>Spoiler message</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.CustomEmoji">
            <summary>Inline custom emoji stickers</summary>
        </member>
        <member name="F:Telegram.Bot.Types.MessageEntityType.Blockquote">
            <summary>Block quotation</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyParameters">
            <summary>
            Describes reply parameters for the message that is being sent.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyParameters.op_Implicit(System.Int32)~Telegram.Bot.Types.ReplyParameters">
            <summary>Implicit operator when you just want to reply to a message in same chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.MessageId">
            <summary>
            Identifier of the message that will be replied to in the current chat,
            or in the chat <see cref="P:Telegram.Bot.Types.ReplyParameters.ChatId"/> if it is specified
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.ChatId">
            <summary>
            Optional. If the message to be replied to is from a different chat, unique identifier for the
            chat or username of the channel (in the format <c>@channelusername</c>)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.AllowSendingWithoutReply">
            <summary>
            Optional. Pass <see langword="true"/> if the message should be sent even if the specified message
            to be replied to is not found; can be used only for replies in the same chat and forum topic.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.Quote">
            <summary>
            Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing.
            The quote must be an exact substring of the message to be replied to, including bold, italic,
            underline, strikethrough, spoiler, and custom_emoji entities.
            The message will fail to send if the quote isn't found in the original message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.QuoteParseMode">
            <summary>
            Optional. Mode for parsing entities in the quote. See formatting options for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.QuoteEntities">
            <summary>
            Optional. A JSON-serialized list of special entities that appear in the quote.
            It can be specified instead of <see cref="P:Telegram.Bot.Types.ReplyParameters.QuoteParseMode"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.QuotePosition">
            <summary>
            Optional. Position of the quote in the original message in UTF-16 code units
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageId">
            <summary>
            This object represents a messageId.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageId.op_Implicit(Telegram.Bot.Types.MessageId)~System.Int32">
            <summary>Implicit operator to int</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageId.op_Implicit(System.Int32)~Telegram.Bot.Types.MessageId">
            <summary>Implicit operator from int</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageId.op_Implicit(Telegram.Bot.Types.Message)~Telegram.Bot.Types.MessageId">
            <summary>Implicit operator from Message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageId.Id">
            <summary>
            Message identifier in the chat specified in <see cref="!:Requests.CopyMessageRequest.FromChatId"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionType">
            <summary>
            This object describes the type of a reaction. Currently, it can be one of
            <list type="bullet">
            <item><see cref="T:Telegram.Bot.Types.ReactionTypeEmoji"/></item>
            <item><see cref="T:Telegram.Bot.Types.ReactionTypeCustomEmoji"/></item>
            </list>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReactionType.op_Implicit(System.String)~Telegram.Bot.Types.ReactionType">
            <summary>Implicit operator ReactionTypeEmoji from string</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReactionType.op_Implicit(System.Int64)~Telegram.Bot.Types.ReactionType">
            <summary>Implicit operator ReactionTypeCustomEmoji from long customEmojiId</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionType.Type">
            <summary>
            Type of the reaction
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.LinkPreviewOptions">
            <summary>
            Describes the options used for link preview generation.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.LinkPreviewOptions.op_Implicit(System.Boolean)~Telegram.Bot.Types.LinkPreviewOptions">
            <summary>To get the same behaviour as previous parameter <c>disableWebPagePreview:</c></summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.IsDisabled">
            <summary>
            Optional. <see langword="true"/>, if the link preview is disabled
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.Url">
            <summary>
            Optional. URL to use for the link preview. If empty, then the first URL found in the message text
            will be used
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.PreferSmallMedia">
            <summary>
            Optional. <see langword="true"/>, if the media in the link preview is supposed to be shrunk;
            ignored if the URL isn't explicitly specified or media size change isn't supported for the preview
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.PreferLargeMedia">
            <summary>
            Optional. <see langword="true"/>, if the media in the link preview is supposed to be enlarged;
            ignored if the URL isn't explicitly specified or media size change isn't supported for the preview
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.ShowAboveText">
            <summary>
            Optional. <see langword="true"/>, if the link preview must be shown above the message text;
            otherwise, the link preview will be shown below the message text
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotName">
            <summary>
            This object represents the bot's name.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotName.op_Implicit(Telegram.Bot.Types.BotName)~System.String">
            <summary>implicit to string</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotName.op_Implicit(System.String)~Telegram.Bot.Types.BotName">
            <summary>implicit from string</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotName.Name">
            <summary>
            The bot's name
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotShortDescription">
            <summary>
            This object represents the bot's short description.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotShortDescription.op_Implicit(Telegram.Bot.Types.BotShortDescription)~System.String">
            <summary>implicit to string</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotShortDescription.op_Implicit(System.String)~Telegram.Bot.Types.BotShortDescription">
            <summary>implicit from string</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotShortDescription.ShortDescription">
            <summary>
            The bot's short description
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotDescription">
            <summary>
            This object represents the bot's description.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotDescription.op_Implicit(Telegram.Bot.Types.BotDescription)~System.String">
            <summary>implicit to string</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotDescription.op_Implicit(System.String)~Telegram.Bot.Types.BotDescription">
            <summary>implicit from string</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotDescription.Description">
            <summary>
            The bot's description
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Animation">
            <summary>
            This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Width">
            <summary>
            Video width as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Height">
            <summary>
            Video height as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Thumbnail">
            <summary>
            Optional. Animation thumbnail as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.FileName">
            <summary>
            Optional. Original animation filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ApiResponse`1">
            <summary>
            Represents bot API response
            </summary>
            <typeparam name="TResult">Expected type of operation result</typeparam>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Ok">
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Description">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Parameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Result">
            <summary>
            Gets the result object.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ApiResponse`1.#ctor(System.Boolean,`0,System.Int32,System.String,Telegram.Bot.Types.ResponseParameters)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.ApiResponse`1"/>
            </summary>
            <param name="ok">Indicating whether the request was successful</param>
            <param name="result">Result object</param>
            <param name="errorCode">Error code</param>
            <param name="description">Error message</param>
            <param name="parameters">Information about why a request was unsuccessful</param>
        </member>
        <member name="T:Telegram.Bot.Types.Audio">
            <summary>
            This object represents an audio file to be treated as music by the Telegram clients.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Duration">
            <summary>
            Duration of the audio in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Performer">
            <summary>
            Optional. Performer of the audio as defined by sender or by audio tags
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Title">
            <summary>
            Optional. Title of the audio as defined by sender or by audio tags
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Thumbnail">
            <summary>
            Optional. Thumbnail of the album cover to which the music file belongs
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Birthday">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Birthday.Day">
            <summary>
            Day of the user's birth; 1-31
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Birthday.Month">
            <summary>
            Month of the user's birth; 1-12
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Birthday.Year">
            <summary>
            Optional. Year of the user's birth
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommand">
            <summary>
            This object represents a bot command
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommand.Command">
            <summary>
            Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommand.Description">
            <summary>
            Description of the command, 3-256 characters.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScope">
            <summary>
            This object represents the scope to which bot commands are applied
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScope.Type">
            <summary>
            Scope type
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.Default">
            <summary>
            Create a default <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllPrivateChats">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all private chats
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllGroupChats">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all group chats
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllChatAdministrators">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all chat administrators
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for a specific <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/>
            </summary>
            <param name="chatId">
            Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.ChatAdministrators(Telegram.Bot.Types.ChatId)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for a specific member in a specific <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/>
            </summary>
            <param name="chatId">
            Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.ChatMember(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific member of a group or supergroup chat.
            </summary>
            <param name="chatId">
            Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup
            </param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeDefault">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Default"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeDefault.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllPrivateChats">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllPrivateChats"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllPrivateChats.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllGroupChats">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllGroupChats"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllGroupChats.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllChatAdministrators"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChat">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChat.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChat.ChatId">
            <summary>
            Unique identifier for the target <see cref="T:Telegram.Bot.Types.Chat"/> or username of the target supergroup
            (in the format @supergroupusername)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChatAdministrators">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatAdministrators"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatAdministrators.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatAdministrators.ChatId">
            <summary>
            Unique identifier for the target <see cref="T:Telegram.Bot.Types.Chat"/> or username of the target supergroup
            (in the format @supergroupusername)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChatMember">
            <inheritdoc cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatMember"/>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.ChatId">
            <summary>
            Unique identifier for the target <see cref="T:Telegram.Bot.Types.Chat"/> or username of the target supergroup
            (in the format @supergroupusername)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.UserId">
            <summary>
            Unique identifier of the target user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessConnection">
            <summary>
            Describes the connection of the bot with a business account.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.Id">
            <summary>
            Unique identifier of the business connection
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.User">
            <summary>
            Business account user that created the business connection
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.UserChatId">
            <summary>
            Identifier of a private chat with the user who created the business connection. This number may have more than
            32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But
            it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing
            this identifier.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.Date">
            <summary>
            Date the connection was established
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.CanReply">
            <summary>
            <see langword="true"/>, if the bot can act on behalf of the business account in chats that were active in the last 24 hours
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.IsEnabled">
            <summary>
            <see langword="true"/>, if the connection is active
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessIntro">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessIntro.Title">
            <summary>
            Optional. Title text of the business intro
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessIntro.Message">
            <summary>
            Optional. Message text of the business intro
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessIntro.Sticker">
            <summary>
            Optional. Sticker of the business intro
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessLocation">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessLocation.Address">
            <summary>
            Address of the business
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessLocation.Location">
            <summary>
            Optional. Location of the business
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessMessagesDeleted">
            <summary>
            This object is received when messages are deleted from a connected business account.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessMessagesDeleted.BusinessConnectionId">
            <summary>
            Unique identifier of the business connection
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessMessagesDeleted.Chat">
            <summary>
            Information about a chat in the business account. The bot may not have access to the chat or the corresponding user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessMessagesDeleted.MessageIds">
            <summary>
            List of identifiers of deleted messages in the chat of the business account
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessOpeningHours">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHours.TimeZoneName">
            <summary>
            Unique name of the time zone for which the opening hours are defined
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHours.OpeningHours">
            <summary>
            Array of List of time intervals describing business opening hours
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessOpeningHoursInterval">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHoursInterval.OpeningMinute">
            <summary>
            The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 24 60
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHoursInterval.ClosingMinute">
            <summary>
            The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 24 60
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackGame">
            <summary>
            A placeholder, currently holds no information. Use <a href="https://t.me/botfather">@BotFather</a>
            to set up your game.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackQuery">
            <summary>
            This object represents an incoming callback query from a callback button in an
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">inline keyboard</see>. If the button that originated the query was attached to
            a message sent by the bot, the field <see cref="P:Telegram.Bot.Types.CallbackQuery.Message"/> will be present. If the button was attached to a
            message sent via the bot (in inline mode), the field <see cref="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId"/> will be present. Exactly one
            of the fields data or <see cref="P:Telegram.Bot.Types.CallbackQuery.GameShortName"/> will be present.
            </summary>
            <remarks>
            <b>NOTE:</b> After the user presses a callback button, Telegram clients will display a progress bar until
            you call <see cref="!:Requests.AnswerCallbackQueryRequest"/>. It is, therefore, necessary to react by calling
            <see cref="!:Requests.AnswerCallbackQueryRequest"/> even if no notification to the user is needed (e.g., without
            specifying any of the optional parameters).
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Id">
            <summary>
            Unique identifier for this query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Message">
            <summary>
            Optional. Message sent by the bot with the callback button that originated the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId">
            <summary>
            Optional. Identifier of the message sent via the bot in inline mode, that originated the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.ChatInstance">
            <summary>
            Global identifier, uniquely corresponding to the chat to which the message with the callback button was
            sent. Useful for high scores in games.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Data">
            <summary>
            Optional. Data associated with the callback button.
            </summary>
            <remarks>
            Be aware that a bad client can send arbitrary data in this field.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.GameShortName">
            <summary>
            Optional. Short name of a <see cref="T:Telegram.Bot.Types.Game"/> to be returned, serves as the unique identifier for the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.IsGameQuery">
            <summary>
            Indicates if the User requests a Game
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatAdministratorRights">
            <summary>
            Represents the rights of an administrator in a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.IsAnonymous">
            <summary>
            <see langword="true"/>, if the user's presence in the chat is hidden
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageChat">
            <summary>
            <see langword="true"/>, if the administrator can access the chat event log, chat statistics, message statistics in
            channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
            Implied by any other administrator privilege
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanDeleteMessages">
            <summary>
            <see langword="true"/>, if the administrator can delete messages of other users
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageVideoChats">
            <summary>
            <see langword="true"/>, if the administrator can manage video chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanRestrictMembers">
            <summary>
            <see langword="true"/>, if the administrator can restrict, ban or unban chat members
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPromoteMembers">
            <summary>
            <see langword="true"/>, if the administrator can add new administrators with a subset of their own privileges or demote
            administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed
            by the user)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanChangeInfo">
            <summary>
            <see langword="true"/>, if the user is allowed to change the chat title, photo and other settings
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanInviteUsers">
            <summary>
            <see langword="true"/>, if the user is allowed to invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPostMessages">
            <summary>
            Optional. <see langword="true"/>, if the administrator can post in the channel; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanEditMessages">
            <summary>
            Optional. <see langword="true"/>, if the administrator can edit messages of other users and can pin messages;
            channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPinMessages">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to pin messages; groups and supergroups only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPostStories">
            <summary>
            Optional. <see langword="true"/>, if the administrator can post stories in the channel; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanEditStories">
            <summary>
            Optional. <see langword="true"/>, if the administrator can edit stories posted by other users; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanDeleteStories">
            <summary>
            Optional. <see langword="true"/>, if the administrator can delete stories posted by other users; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoost">
            <summary>
            This object contains information about a chat boost.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.BoostId">
            <summary>
            Unique identifier of the boost
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.AddDate">
            <summary>
            Point in time when the chat was boosted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.ExpirationDate">
            <summary>
            Point in time when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.Source">
            <summary>
            Source of the added boost
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostAdded">
            <summary>
            This object represents a service message about a user boosting a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostAdded.BoostCount">
            <summary>
            Number of boosts added by the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostRemoved">
            <summary>
            This object represents a boost removed from a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.Chat">
            <summary>
            Chat which was boosted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.BoostId">
            <summary>
            Unique identifier of the boost
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.RemoveDate">
            <summary>
            Point in time when the boost was removed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.Source">
            <summary>
            Source of the removed boost
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSource">
            <summary>
            This object describes the source of a chat boost. It can be one of
            <list type="bullet">
            <item><see cref="T:Telegram.Bot.Types.ChatBoostSourcePremium"/></item>
            <item><see cref="T:Telegram.Bot.Types.ChatBoostSourceGiftCode"/></item>
            <item><see cref="T:Telegram.Bot.Types.ChatBoostSourceGiveaway"/></item>
            </list>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSource.Source">
            <summary>
            Source of the boost
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSourcePremium">
            <summary>
            The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourcePremium.Source">
            <summary>
            Source of the boost, always "premium"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourcePremium.User">
            <summary>
            User that boosted the chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSourceGiftCode">
            <summary>
            The boost was obtained by the creation of Telegram Premium gift codes to boost a chat.
            Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiftCode.Source">
            <summary>
            Source of the boost, always "gift_code"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiftCode.User">
            <summary>
            User for which the gift code was created
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSourceGiveaway">
            <summary>
            The boost was obtained by the creation of a Telegram Premium giveaway.
            This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.Source">
            <summary>
            Source of the boost, always "giveaway"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.GiveawayMessageId">
            <summary>
            Identifier of a message in the chat with the giveaway; the message could have been deleted already.
            May be 0 if the message isn't sent yet.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.User">
            <summary>
            Optional. User that won the prize in the giveaway if any
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.IsUnclaimed">
            <summary>
            Optional. <see langword="true"/>, if the giveaway was completed, but there was no user to win the prize
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostUpdated">
            <summary>
            This object represents a boost added to a chat or changed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostUpdated.Chat">
            <summary>
            Chat which was boosted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostUpdated.Boost">
            <summary>
            Information about the chat boost
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatId">
            <summary>
            Represents a ChatId
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatId.Identifier">
            <summary>
            Unique identifier for the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatId.Username">
            <summary>
            Username of the supergroup or channel (in the format @channelusername)
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.#ctor(System.Int64)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat
            </summary>
            <param name="identifier">Unique identifier for the chat</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat or username of
            the supergroup or channel (in the format @channelusername)
            </summary>
            <param name="username">Unique identifier for the chat or username of
            the supergroup or channel (in the format @channelusername)</param>
            <exception cref="T:System.ArgumentException">
            Thrown when string value isn`t number and doesn't start with @
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when string value is <c>null</c></exception>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.Equals(Telegram.Bot.Types.ChatId)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.GetHashCode">
            <summary>
            Gets the hash code of this object
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.ToString">
            <summary>
            Create a <c>string</c> out of a <see cref="T:Telegram.Bot.Types.ChatId"/>
            </summary>
            <returns>The <see cref="T:Telegram.Bot.Types.ChatId"/> as <c>string</c></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(System.Int64)~Telegram.Bot.Types.ChatId">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat
            </summary>
            <param name="identifier">Unique identifier for the chat</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(System.String)~Telegram.Bot.Types.ChatId">
            <summary>
            Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat or username of
            the supergroup or channel (in the format @channelusername)
            </summary>
            <param name="username">Unique identifier for the chat or username of
            the supergroup or channel (in the format @channelusername)</param>
            <exception cref="T:System.ArgumentException">
            Thrown when string value isn`t number and doesn't start with @
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when string value is <c>null</c></exception>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(Telegram.Bot.Types.Chat)~Telegram.Bot.Types.ChatId">
            <summary>
            Convert a Chat Object to a <see cref="T:Telegram.Bot.Types.ChatId"/>
            </summary>
            <param name="chat"></param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Equality(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId)">
            <summary>
            Compares two ChatId objects
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Inequality(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId)">
            <summary>
            Compares two ChatId objects
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="T:Telegram.Bot.Types.ChatInviteLink">
            <summary>
            Represents an invite link for a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.InviteLink">
            <summary>
            The invite link. If the link was created by another chat administrator, then the second part of the
            link will be replaced with “…”.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.Creator">
            <summary>
            Creator of the link
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.CreatesJoinRequest">
            <summary>
            <see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.IsPrimary">
            <summary>
            <see langword="true"/>, if the link is primary
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.IsRevoked">
            <summary>
            <see langword="true"/>, if the link is revoked
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.Name">
            <summary>
            Optional. Invite link name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.ExpireDate">
            <summary>
            Optional. Point in time when the link will expire or has been expired
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.MemberLimit">
            <summary>
            Optional. Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.PendingJoinRequestCount">
            <summary>
            Optional. Number of pending join requests created using this link
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatJoinRequest">
            <summary>
            Represents a join request sent to a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Chat">
            <summary>
            Chat to which the request was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.From">
            <summary>
            User that sent the join request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.UserChatId">
            <summary>
            Identifier of a private chat with the user who sent the join request. This number may have more than 32
            significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it
            has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this
            identifier. The bot can use this identifier for 24 hours to send messages until the join request is processed,
            assuming no other administrator contacted the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Date">
            <summary>
            Date the request was sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Bio">
            <summary>
            Optional. Bio of the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.InviteLink">
            <summary>
            Optional. Chat invite link that was used by the user to send the join request
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatLocation">
            <summary>
            Represents a location to which a chat is connected.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatLocation.Location">
            <summary>
            The location to which the supergroup is connected. Can't be a live location.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatLocation.Address">
            <summary>
            Location address; 1-64 characters, as defined by the chat owner
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMember">
            <summary>
            This object contains information about one member of the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.Status">
            <summary>
            The member's status in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.User">
            <summary>
            Information about the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberOwner">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that owns the chat and has all administrator privileges
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.CustomTitle">
            <summary>
            Custom title for this user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.IsAnonymous">
            <summary>
            <see langword="true"/>, if the user's presence in the chat is hidden
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberAdministrator">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that has some additional privileges
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanBeEdited">
            <summary>
            <see langword="true"/>, if the bot is allowed to edit administrator privileges of that user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.IsAnonymous">
            <summary>
            <see langword="true"/>, if the user's presence in the chat is hidden
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageChat">
            <summary>
            <see langword="true"/>, if the administrator can access the chat event log, chat statistics, message statistics
            in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
            Implied by any other administrator privilege
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanDeleteMessages">
            <summary>
            <see langword="true"/>, if the administrator can delete messages of other users
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageVideoChats">
            <summary>
            <see langword="true"/>, if the administrator can manage video chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanRestrictMembers">
            <summary>
            <see langword="true"/>, if the administrator can restrict, ban or unban chat members
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPromoteMembers">
            <summary>
            <see langword="true"/>, if the administrator can add new administrators with a subset of his own privileges or
            demote administrators that he has promoted, directly or indirectly (promoted by administrators that
            were appointed by the user)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanChangeInfo">
            <summary>
            <see langword="true"/>, if the administrator can change the chat title, photo and other settings
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanInviteUsers">
            <summary>
            <see langword="true"/>, if the administrator can invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPostMessages">
            <summary>
            Optional. <see langword="true"/>, if the administrator can post in the channel, channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages">
            <summary>
            Optional. <see langword="true"/>, if the administrator can edit messages of other users, channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages">
            <summary>
            Optional. <see langword="true"/>, if the administrator can pin messages, supergroups only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPostStories">
            <summary>
            Optional. <see langword="true"/>, if the administrator can post stories in the channel; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditStories">
            <summary>
            Optional. <see langword="true"/>, if the administrator can edit stories posted by other users; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanDeleteStories">
            <summary>
            Optional. <see langword="true"/>, if the administrator can delete stories posted by other users; channels only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageTopics">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to create, rename, close, and reopen forum topics;
            supergroups only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CustomTitle">
            <summary>
            Optional. Custom title for this user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberMember">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that has no additional privileges or restrictions.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberMember.Status">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberRestricted">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that is under certain restrictions in the chat. Supergroups only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.IsMember">
            <summary>
            <see langword="true"/>, if the user is a member of the chat at the moment of the request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanChangeInfo">
            <summary>
            <see langword="true"/>, if the user can change the chat title, photo and other settings
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanInviteUsers">
            <summary>
            <see langword="true"/>, if the user can invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanPinMessages">
            <summary>
            <see langword="true"/>, if the user can pin messages, supergroups only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMessages">
            <summary>
            <see langword="true"/>, if the user can send text messages, contacts, locations and venues
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendAudios">
            <summary>
            <see langword="true" />, if the user is allowed to send audios
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendDocuments">
            <summary>
            <see langword="true" />, if the user is allowed to send documents
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendPhotos">
            <summary>
            <see langword="true" />, if the user is allowed to send photos
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendVideos">
            <summary>
            <see langword="true" />, if the user is allowed to send videos
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendVideoNotes">
            <summary>
            <see langword="true" />, if the user is allowed to send video notes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendVoiceNotes">
            <summary>
            <see langword="true" />, if the user is allowed to send voice notes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendPolls">
            <summary>
            <see langword="true"/>, if the user is allowed to send polls
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendOtherMessages">
            <summary>
            <see langword="true"/>, if the user is allowed to send animations, games, stickers and use inline bots
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanAddWebPagePreviews">
            <summary>
            <see langword="true"/>, if the user is allowed to add web page previews to their messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.UntilDate">
            <summary>
            Date when restrictions will be lifted for this user, UTC time
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanManageTopics">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to create forum topics
            supergroups only
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberLeft">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that isn't currently a member of the chat, but may join it themselves
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberLeft.Status">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberBanned">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.ChatMember"/> that was banned in the chat and can't return to the chat
            or view chat messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberBanned.Status">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberBanned.UntilDate">
            <summary>
            Date when restrictions will be lifted for this user, UTC time
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberUpdated">
            <summary>
            This object represents changes in the status of a chat member.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.Chat">
            <summary>
            Chat the user belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.From">
            <summary>
            Performer of the action, which resulted in the change
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.Date">
            <summary>
            Date the change was done
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.OldChatMember">
            <summary>
            Previous information about the chat member
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.NewChatMember">
            <summary>
            New information about the chat member
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.InviteLink">
            <summary>
            Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link
            events only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.ViaChatFolderInviteLink">
            <summary>
            Optional. <see langword="true"/>, if the user joined the chat via a chat folder invite link
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatPermissions">
            <summary>
            Describes actions that a non-administrator user is allowed to take in a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to send text messages, contacts, locations and venues
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendAudios">
            <summary>
            Optional. <see langword="true" />, if the user is allowed to send audios
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendDocuments">
            <summary>
            Optional. <see langword="true" />, if the user is allowed to send documents
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendPhotos">
            <summary>
            Optional. <see langword="true" />, if the user is allowed to send photos
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendVideos">
            <summary>
            Optional. <see langword="true" />, if the user is allowed to send videos
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendVideoNotes">
            <summary>
            Optional. <see langword="true" />, if the user is allowed to send video notes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendVoiceNotes">
            <summary>
            Optional. <see langword="true" />, if the user is allowed to send voice notes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendPolls">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to send polls, implies <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendOtherMessages">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to send animations, games, stickers and use inline
            bots
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanAddWebPagePreviews">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to add web page previews to their messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanChangeInfo">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to change the chat title, photo and other settings.
            Ignored in public supergroups
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to invite new users to the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to pin messages. Ignored in public supergroups
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanManageTopics">
            <summary>
            Optional. <see langword="true"/>, if the user is allowed to create forum topics.
            If omitted defaults to the value of <see cref="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages"/>
            supergroups only
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatPhoto">
            <summary>
            Collection of fileIds of profile pictures of a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.SmallFileId">
            <summary>
            File identifier of small (160x160) chat photo. This FileId can be used only for photo download and only
            for as long as the photo is not changed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.SmallFileUniqueId">
            <summary>
            Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for
            different bots. Can't be used to download or reuse the file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.BigFileId">
            <summary>
            File identifier of big (640x640) chat photo. This FileId can be used only for photo download and only for
            as long as the photo is not changed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.BigFileUniqueId">
            <summary>
            Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for
            different bots. Can't be used to download or reuse the file.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatShared">
            <summary>
            This object contains information about the chat whose identifier was shared with the bot using a
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat"/> button.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.RequestId">
            <summary>
            Identifier of the request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.ChatId">
            <summary>
            Identifier of the shared chat. This number may have more than 32 significant bits and some programming
            languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits,
            so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have
            access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by
            some other means.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.Title">
            <summary>
            Optional. Title of the chat, if the title was requested by the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.Username">
            <summary>
            Optional. Username of the chat, if the username was requested by the bot and available.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.Photo">
            <summary>
            Optional. Available sizes of the chat photo, if the photo was requested by the bot
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChosenInlineResult">
            <summary>
            This object represents a result of an <see cref="T:Telegram.Bot.Types.InlineQuery"/> that was chosen by the <see cref="T:Telegram.Bot.Types.User"/>
            and sent to their chat partner.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.ResultId">
            <summary>
            The unique identifier for the result that was chosen.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.From">
            <summary>
            The user that chose the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Location">
            <summary>
            Optional. Sender location, only for bots that require user location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.InlineMessageId">
            <summary>
            Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached
            to the message. Will be also received in callback queries and can be used to edit the message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Query">
            <summary>
            The query that was used to obtain the result.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Color">
            <summary>
            Represent a color in RGB space
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Color.Red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Color.Green">
            <summary>
            Green component
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Color.Blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiate a new color value
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:Telegram.Bot.Types.Color.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Instantiate a new color value
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:Telegram.Bot.Types.Color.#ctor(System.Int32)">
            <summary>
            Instantiate a new color value
            </summary>
            <param name="color">Numeric value of color in RGB space</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Telegram.Bot.Types.Color.#ctor(System.UInt32)">
            <summary>
            Instantiate a new color value
            </summary>
            <param name="color">Numeric value of color in RGB space</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Telegram.Bot.Types.Color.ToString">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Types.Color.ToInt">
            <summary>
            Convert current <see cref="T:Telegram.Bot.Types.Color"/> instance to its numeric representation
            </summary>
            <returns>Numeric representation of current color</returns>
        </member>
        <member name="M:Telegram.Bot.Types.Color.ToUint">
            <summary>
            Convert current <see cref="T:Telegram.Bot.Types.Color"/> instance to its numeric representation
            </summary>
            <returns>Numeric representation of current color</returns>
        </member>
        <member name="M:Telegram.Bot.Types.Color.ToBytes">
            <summary>
            Convert current <see cref="T:Telegram.Bot.Types.Color"/> instance to its <see cref="T:byte[]"/> representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.Color.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstruct current instance of <see cref="T:Telegram.Bot.Types.Color"/> into its RGB components
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
        </member>
        <member name="M:Telegram.Bot.Types.Color.op_Explicit(Telegram.Bot.Types.Color)~System.Int32">
            <summary>
            Convert current <see cref="T:Telegram.Bot.Types.Color"/> instance to its numeric representation
            </summary>
            <param name="color"></param>
            <returns>Numeric representation of the current <see cref="T:Telegram.Bot.Types.Color"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.Color.op_Explicit(Telegram.Bot.Types.Color)~System.UInt32">
            <summary>
            Convert current <see cref="T:Telegram.Bot.Types.Color"/> instance to its numeric representation
            </summary>
            <param name="color"></param>
            <returns>Numeric representation of the current <see cref="T:Telegram.Bot.Types.Color"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.Color.op_Explicit(Telegram.Bot.Types.Color)~System.Byte[]">
            <summary>
            Convert current <see cref="T:Telegram.Bot.Types.Color"/> instance to its <see cref="T:byte[]"/> representation
            </summary>
            <param name="color"></param>
            <returns><see cref="T:byte[]"/> representation of the current <see cref="T:Telegram.Bot.Types.Color"/></returns>
        </member>
        <member name="F:Telegram.Bot.Types.Color.BlueColor">
            <summary>
            Blue color
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.YellowColor">
            <summary>
            Yellow color
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.VioletColor">
            <summary>
            Violet color
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.GreenColor">
            <summary>
            Green color
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.PinkColor">
            <summary>
            Pink color
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.RedColor">
            <summary>
            Red color
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.Color.CheckByte(System.Int64,System.String)">
            <summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="value"/> is out of byte range
            </exception>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Contact">
            <summary>
            This object represents a phone contact.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.UserId">
            <summary>
            Optional. Contact's user identifier in Telegram
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.Vcard">
            <summary>
            Optional. Additional data about the contact in the form of a vCard
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Dice">
            <summary>
            This object represents a dice with random value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Dice.Emoji">
            <summary>
            Emoji on which the dice throw animation is based
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Dice.Value">
            <summary>
            Value of the dice, 1-6 for <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice" /> (“🎲”),
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts" /> (“🎯”) and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/> ("🎳"), 1-5 for <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball" /> (“🏀”) and
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football" />("⚽"), and values 1-64 for <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine" /> ("🎰"). Defaults to
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice" /> (“🎲”)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Document">
            <summary>
            This object represents a general file (as opposed to <see cref="T:Telegram.Bot.Types.PhotoSize">photos</see>, <see cref="T:Telegram.Bot.Types.Voice">voice messages</see> and <see cref="T:Telegram.Bot.Types.Audio">audio files</see>).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.Thumbnail">
            <summary>
            Optional. Document thumbnail as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.BotCommandScopeType">
            <summary>
            Scope type
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Default">
            <summary>
            Represents the default <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands. Default commands are used if no
            commands with a narrower <see cref="T:Telegram.Bot.Types.BotCommandScope"/> are specified for the user.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllPrivateChats">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all private chats.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllGroupChats">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all group and supergroup chats.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllChatAdministrators">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all group and supergroup
            chat administrators.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering a specific <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatAdministrators">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering all administrators of
            a specific group or supergroup <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatMember">
            <summary>
            Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope"/> of bot commands, covering a specific member of
            a group or supergroup <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatAction">
            <summary>
            Type of action to broadcast
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.Typing">
            <summary>
            Typing
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.PhotoSize"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo">
            <summary>
            Recording a <see cref="T:Telegram.Bot.Types.Video"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.Video"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice">
            <summary>
            Recording a <see cref="T:Telegram.Bot.Types.Voice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.Voice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.Document"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation">
            <summary>
            Finding a <see cref="T:Telegram.Bot.Types.Location"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote">
            <summary>
            Recording a <see cref="T:Telegram.Bot.Types.VideoNote"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote">
            <summary>
            Uploading a <see cref="T:Telegram.Bot.Types.VideoNote"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.ChooseSticker">
            <summary>
            Choosing a <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatBoostSourceType">
            <summary>
            Type of chat boost source
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.Premium">
            <summary>
            The boost was obtained by subscribing to Telegram Premium
            or by gifting a Telegram Premium subscription to another user
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.GiftCode">
            <summary>
            The boost was obtained by the creation of Telegram Premium gift codes to boost a chat
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.Giveaway">
            <summary>
            The boost was obtained by the creation of a Telegram Premium giveaway
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatMemberStatus">
            <summary>
            ChatMember status
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Creator">
            <summary>
            Creator of the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Administrator">
            <summary>
            Administrator of the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Member">
            <summary>
            Normal member of the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Left">
            <summary>
            A <see cref="T:Telegram.Bot.Types.User"/> who left the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Kicked">
            <summary>
            A <see cref="T:Telegram.Bot.Types.User"/> who was kicked from the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Restricted">
            <summary>
            A <see cref="T:Telegram.Bot.Types.User"/> who is restricted in the <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatType">
            <summary>
            Type of the <see cref="T:Telegram.Bot.Types.Chat"/>, from which the inline query was sent
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Private">
            <summary>
            Normal one to one <see cref="T:Telegram.Bot.Types.Chat"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Group">
            <summary>
            Normal group chat
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Channel">
            <summary>
            A channel
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Supergroup">
            <summary>
            A supergroup
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Sender">
            <summary>
            “sender” for a private chat with the inline query sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.Emoji">
            <summary>
            Emoji on which the dice throw animation is based
            <remarks>
            This enum is used only in the library APIs and is not present in types that are coming from
            Telegram servers for compatibility reasons
            </remarks>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Dice">
            <summary>
            Dice. Resulting value is 1-6
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Darts">
            <summary>
            Darts. Resulting value is 1-6
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Basketball">
            <summary>
            Basketball. Resulting value is 1-5
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Football">
            <summary>
            Football. Resulting value is 1-5
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine">
            <summary>
            Slot machine. Resulting value is 1-64
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Bowling">
            <summary>
            Bowling. Result value is 1-6
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.FileType">
            <summary>
            Type of a <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Stream">
            <summary>
            FileStream
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Id">
            <summary>
            FileId
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Url">
            <summary>
            File URL
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.InputMediaType">
            <summary>
            Type of the input media
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Photo">
            <summary>
            Photo
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Animation">
            <summary>
            Animation
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji">
            <summary>
            Reaction emoji.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ThumbsUp">
            <summary>
            Thumbs Up Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ThumbsDown">
            <summary>
            Thumbs Down Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.RedHeart">
            <summary>
            Red Heart Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Fire">
            <summary>
            Fire Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHearts">
            <summary>
            Smiling Face with Hearts Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ClappingHands">
            <summary>
            Clapping Hands Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.BeamingFaceWithSmilingEyes">
            <summary>
            Beaming Face with Smiling Eyes Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ThinkingFace">
            <summary>
            Thinking Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ExplodingHead">
            <summary>
            Exploding Head Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceScreamingInFear">
            <summary>
            Face Screaming in Fear Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceWithSymbolsOnMouth">
            <summary>
            Face with Symbols on Mouth Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.CryingFace">
            <summary>
            Crying Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.PartyPopper">
            <summary>
            Party Popper Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.StarStruck">
            <summary>
            Star-Struck Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceVomiting">
            <summary>
            Face Vomiting Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.PileOfPoo">
            <summary>
            Pile of Poo Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FoldedHands">
            <summary>
            Folded Hands Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.OkHand">
            <summary>
            OK Hand Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Dove">
            <summary>
            Dove Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ClownFace">
            <summary>
            Clown Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.YawningFace">
            <summary>
            Yawning Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.WoozyFace">
            <summary>
            Woozy Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHeartEyes">
            <summary>
            Smiling Face with Heart-Eyes Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SpoutingWhale">
            <summary>
            Spouting Whale Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HeartOnFire">
            <summary>
            Heart on Fire Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NewMoonFace">
            <summary>
            New Moon Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HotDog">
            <summary>
            Hot Dog Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HundredPoints">
            <summary>
            Hundred Points Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.RollingOnTheFloorLaughing">
            <summary>
            Rolling on the Floor Laughing Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HighVoltage">
            <summary>
            High Voltage Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Banana">
            <summary>
            Banana Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Trophy">
            <summary>
            Trophy Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.BrokenHeart">
            <summary>
            Broken Heart Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceWithRaisedEyebrow">
            <summary>
            Face with Raised Eyebrow Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NeutralFace">
            <summary>
            Neutral Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Strawberry">
            <summary>
             Strawberry Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.BottleWithPoppingCork">
            <summary>
            Bottle with Popping Cork Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.KissMark">
            <summary>
             Kiss Mark Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.MiddleFinger">
            <summary>
             Middle Finger Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHorns">
            <summary>
            Smiling Face with Horns Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SleepingFace">
            <summary>
            Sleeping Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.LoudlyCryingFace">
            <summary>
            Loudly Crying Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NerdFace">
            <summary>
            Nerd Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Ghost">
            <summary>
            Ghost Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ManTechnologist">
            <summary>
            Man Technologist Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Eyes">
            <summary>
            Eyes Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.JackOLantern">
            <summary>
            Jack-O-Lantern Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SeeNoEvilMonkey">
            <summary>
            See-No-Evil Monkey Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHalo">
            <summary>
            Smiling Face with Halo Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FearfulFace">
            <summary>
            Fearful Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Handshake">
            <summary>
            Handshake Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.WritingHand">
            <summary>
            Writing Hand Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithOpenHands">
            <summary>
            Smiling Face with Open Hands Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SalutingFace">
            <summary>
            Saluting Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SantaClaus">
            <summary>
            Santa Claus Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ChristmasTree">
            <summary>
            Christmas Tree Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Snowman">
            <summary>
            Snowman Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NailPolish">
            <summary>
            Nail Polish Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ZanyFace">
            <summary>
            Zany Face Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Moai">
            <summary>
            Moai Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.CoolButton">
            <summary>
            Cool Button Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HeartWithArrow">
            <summary>
            Heart with Arrow Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HearNoEvilMonkey">
            <summary>
            Hear-No-Evil Monkey Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Unicorn">
            <summary>
            Unicorn Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceBlowingAKiss">
            <summary>
            Face Blowing a Kiss Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Pill">
            <summary>
            Pill Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SpeakNoEvilMonkey">
            <summary>
            Speak-No-Evil Monkey Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithSunglasses">
            <summary>
            Smiling Face with Sunglasses Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.AlienMonster">
            <summary>
            Alien Monster Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ManShrugging">
            <summary>
            Man Shrugging Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ShruggingPerson">
            <summary>
            Shrugging Person Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.WomanShrugging">
            <summary>
            Woman Shrugging Emoji
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.EnragedFace">
            <summary>
            Enraged Face Emoji
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MaskPositionPoint">
            <summary>
            The part of the face relative to which the mask should be placed.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Forehead">
            <summary>
            The forehead
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Eyes">
            <summary>
            The eyes
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Mouth">
            <summary>
            The mouth
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Chin">
            <summary>
            The chin
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MenuButtonType">
            <summary>
            Type of the <see cref="T:Telegram.Bot.Types.MenuButton"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MenuButtonType.Default">
            <summary>
            Describes that no specific value for the menu button was set.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MenuButtonType.Commands">
            <summary>
            Represents a menu button, which opens the bot’s list of commands.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MenuButtonType.WebApp">
            <summary>
            Represents a menu button, which launches a <a href="https://core.telegram.org/bots/webapps">Web App</a>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageOriginType">
            <summary>
            Message origin type
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.User">
            <summary>
            Message origin is from a user
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.HiddenUser">
            <summary>
            Message origin is from a hidden user
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.Chat">
            <summary>
            Message origin is a chat
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.Channel">
            <summary>
            Message origin is a channel
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageType">
            <summary>
            The type of a <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Unknown">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> is unknown
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Text">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Photo">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Photo"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Audio">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="P:Telegram.Bot.Types.Message.Audio"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Video">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Video"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Voice">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Voice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Document">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Document"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Sticker">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Location">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Location"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Contact">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Contact"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Venue">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Venue"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Game">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Game"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoNote">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoNote"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Invoice">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="P:Telegram.Bot.Types.Message.Invoice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.SuccessfulPayment">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.SuccessfulPayment"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ConnectedWebsite">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ConnectedWebsite"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.NewChatMembers">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatMembers"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.LeftChatMember">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.LeftChatMember"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.NewChatTitle">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatTitle"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.NewChatPhoto">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatPhoto"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.PinnedMessage">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.PinnedMessage"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.DeleteChatPhoto">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.DeleteChatPhoto"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GroupChatCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GroupChatCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.SupergroupChatCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.SupergroupChatCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChannelChatCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ChannelChatCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MigrateFromChatId">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.MigrateFromChatId"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MigrateToChatId">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.MigrateToChatId"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Poll">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Poll"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Dice">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Dice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MessageAutoDeleteTimerChanged">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.MessageAutoDeleteTimerChanged"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ProximityAlertTriggered">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ProximityAlertTriggered"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.WebAppData">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.WebAppData"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatScheduled">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatScheduled"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatStarted">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatStarted"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatEnded">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatEnded"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatParticipantsInvited">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatParticipantsInvited"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Animation">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Animation"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicClosed">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicClosed"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicReopened">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicReopened"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicEdited">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicEdited"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GeneralForumTopicHidden">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GeneralForumTopicHidden"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GeneralForumTopicUnhidden">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GeneralForumTopicUnhidden"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.WriteAccessAllowed">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.WriteAccessAllowed"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.UserShared">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.UserShared"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.UsersShared">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.UsersShared"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatShared">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ChatShared"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Story">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Story"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.PassportData">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.PassportData"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GiveawayCreated">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GiveawayCreated"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Giveaway">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Giveaway"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GiveawayWinners">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GiveawayWinners"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GiveawayCompleted">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GiveawayCompleted"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.BoostAdded">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.BoostAdded"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ParseMode">
            <summary>
            <para>
            Text parsing mode
            </para>
            <para>
            The Bot API supports basic formatting for messages. You can use bold and italic text, as well as inline
            links and pre-formatted code in your bots' messages. Telegram clients will render them accordingly.
            You can use either markdown-style or HTML-style formatting.
            </para>
            </summary>
            <a href="https://core.telegram.org/bots/api#formatting-options"/>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Default">
            <summary>
            <see cref="P:Telegram.Bot.Types.Message.Text"/> is plain text
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Markdown">
            <summary>
            Markdown-formatted A <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
            <remarks>
            This is a legacy mode, retained for backward compatibility
            </remarks>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Html">
            <summary>
            HTML-formatted <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.MarkdownV2">
            <summary>
            MarkdownV2-formatted <see cref="P:Telegram.Bot.Types.Message.Text"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.PollType">
            <summary>
            <see cref="T:Telegram.Bot.Types.Poll"/> type
            <remarks>
            This enum is used only in the library APIs and is not present in types that are coming from
            Telegram servers for compatibility reasons
            </remarks>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PollType.Regular">
            <summary>
            Regular poll
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PollType.Quiz">
            <summary>
            Quiz
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ReactionTypeKind">
            <summary>
            Type of the reaction
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ReactionTypeKind.Emoji">
            <summary>
            The reaction is based on an emoji.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ReactionTypeKind.CustomEmoji">
            <summary>
            The reaction is based on a custom emoji.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.StickerFormat">
            <summary>
            Format of the <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerFormat.Static">
            <summary>
            Static <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">
            <summary>
            Animated <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerFormat.Video">
            <summary>
            Video <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.StickerType">
            <summary>
            Type of the <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerType.Regular">
            <summary>
            Regular  <see cref="T:Telegram.Bot.Types.Sticker"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerType.Mask">
            <summary>
            Mask
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">
            <summary>
            Custom emoji
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.UpdateType">
            <summary>
            The type of an <see cref="T:Telegram.Bot.Types.Update"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Unknown">
            <summary>
            Update Type is unknown
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Message">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.Message"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.InlineQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="P:Telegram.Bot.Types.Update.InlineQuery"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChosenInlineResult">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChosenInlineResult"/>.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.CallbackQuery"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedMessage">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains <see cref="P:Telegram.Bot.Types.Update.EditedMessage"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChannelPost">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChannelPost"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains <see cref="P:Telegram.Bot.Types.Update.EditedChannelPost"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ShippingQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ShippingQuery"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PreCheckoutQuery">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.PreCheckoutQuery"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Poll">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.Poll"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PollAnswer">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.PollAnswer"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MyChatMember">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.MyChatMember"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChatMember"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatJoinRequest">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChatJoinRequest"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MessageReaction">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.MessageReaction"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MessageReactionCount">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.MessageReactionCount"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatBoost">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChatBoost"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.RemovedChatBoost">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.RemovedChatBoost"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.BusinessConnection">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.BusinessConnection"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.BusinessMessage">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.BusinessMessage"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedBusinessMessage">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.EditedBusinessMessage"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.DeletedBusinessMessages">
            <summary>
            The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.DeletedBusinessMessages"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ExternalReplyInfo">
            <summary>
            This object contains information about a message that is being replied to, which may come from another chat or forum topic.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Origin">
            <summary>
            Origin of the message replied to by the given message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Chat">
            <summary>
            Optional.Chat the original message belongs to.Available only if the chat is a supergroup or a channel.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.MessageId">
            <summary>
            Optional.Unique message identifier inside the original chat.Available only if the original chat
            is a supergroup or a channel.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.LinkPreviewOptions">
            <summary>
            Optional.Options used for link preview generation for the original message, if it is a text message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Animation">
            <summary>
            Optional. Message is an animation, information about the animation
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Audio">
            <summary>
            Optional. Message is an audio file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Document">
            <summary>
            Optional. Message is a general file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Photo">
            <summary>
            Optional. Message is a photo, available sizes of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Sticker">
            <summary>
            Optional. Message is a sticker, information about the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Story">
            <summary>
            Optional. Message is a forwarded story
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Video">
            <summary>
            Optional. Message is a video, information about the video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.VideoNote">
            <summary>
            Optional. Message is a video note, information about the video message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Voice">
            <summary>
            Optional. Message is a voice message, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.HasMediaSpoiler">
            <summary>
            Optional. <see langword="true"/>, if the message media is covered by a spoiler animation
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Contact">
            <summary>
            Optional. Message is a shared contact, information about the contact
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Dice">
            <summary>
            Optional. Message is a dice with random value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Game">
            <summary>
            Optional. Message is a game, information about the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Giveaway">
            <summary>
            Optional. Message is a scheduled giveaway, information about the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.GiveawayWinners">
            <summary>
            Optional.A giveaway with public winners was completed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Invoice">
            <summary>
            Optional. Message is an invoice for a payment, information about the invoice.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Location">
            <summary>
            Optional. Message is a shared location, information about the location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Poll">
            <summary>
            Optional. Message is a native poll, information about the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Venue">
            <summary>
            Optional. Message is a venue, information about the venue
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.File">
            <summary>
            This object represents a file ready to be downloaded. The file can be downloaded via
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>.
            It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested
            by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.File.FilePath">
            <summary>
            Optional. File path. Use
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>
            to get the file.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.FileBase">
            <summary>
            This object represents a file ready to be downloaded. The file can be downloaded via
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>.
            It is guaranteed that the link will be valid for
            at least 1 hour. When the link expires, a new one can be requested by calling
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileId">
            <summary>
            Identifier for this file, which can be used to download or reuse the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileUniqueId">
            <summary>
            Unique identifier for this file, which is supposed to be the same over time and for different bots.
            Can't be used to download or reuse the file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileSize">
            <summary>
            Optional. File size
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopic">
            <summary>
            This object represents a forum topic.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.MessageThreadId">
            <summary>
            Unique identifier of the forum topic
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.Name">
            <summary>
            Name of the topic
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.IconColor">
            <summary>
            Color of the topic icon in RGB format
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.IconCustomEmojiId">
            <summary>
            Optional. Unique identifier of the custom emoji shown as the topic icon
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicClosed">
            <summary>
            This object represents a service message about a forum topic closed in the chat.
            Currently, holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicCreated">
            <summary>
            This object represents a service message about a new forum topic created in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicCreated.Name">
            <summary>
            Name of the topic
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicCreated.IconColor">
            <summary>
            Color of the topic icon in RGB format
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicCreated.IconCustomEmojiId">
            <summary>
            Optional. Unique identifier of the custom emoji shown as the topic icon
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicEdited">
            <summary>
            This object represents a service message about an edited forum topic.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicEdited.Name">
            <summary>
            Optional. New name of the topic, if it was edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicEdited.IconCustomEmojiId">
            <summary>
            Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicReopened">
            <summary>
            This object represents a service message about a forum topic reopened in the chat. Currently holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Game">
            <summary>
            This object represents a game. Use BotFather to create and edit games, their short names will act as unique
            identifiers.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Title">
            <summary>
            Title of the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Description">
            <summary>
            Description of the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Photo">
            <summary>
            Photo that will be displayed in the game message in chats.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Text">
            <summary>
            Optional. Brief description of the game or high scores included in the game message. Can be automatically
            edited to include current high scores for the game when the bot calls
            <see cref="!:Requests.SetGameScoreRequest"/>, or manually edited using
            <see cref="!:Requests.EditMessageTextRequest"/>. 0-4096 characters.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.TextEntities">
            <summary>
            Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Animation">
            <summary>
            Optional. Animation that will be displayed in the game message in chats. Upload via
            <a href="https://t.me/botfather">@BotFather</a>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GameHighScore">
            <summary>
            This object represents one row of the high scores table for a game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.Position">
            <summary>
            Position in high score table for the game.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.Score">
            <summary>
            Score
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GeneralForumTopicHidden">
            <summary>
            This object represents a service message about General forum topic hidden in the chat.
            Currently, holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GeneralForumTopicUnhidden">
            <summary>
            This object represents a service message about General forum topic unhidden in the chat.
            Currently, holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Giveaway">
            <summary>
            This object represents a message about a scheduled giveaway.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.Chats">
            <summary>
            The list of chats which the user must join to participate in the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.WinnersSelectionDate">
            <summary>
            Point in time when winners of the giveaway will be selected
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.WinnerCount">
            <summary>
            The number of users which are supposed to be selected as winners of the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.OnlyNewMembers">
            <summary>
            Optional. <see langword="true"/>, if only users who join the chats after the giveaway started should be eligible to win
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.HasPublicWinners">
            <summary>
            Optional.<see langword="true"/>, if the list of giveaway winners will be visible to everyone
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.PrizeDescription">
            <summary>
            Optional. Description of additional giveaway prize
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.CountryCodes">
            <summary>
            Optional.A list of two-letter <see href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</see>
            country codes indicating the countries from which eligible users for the giveaway must come.
            If empty, then all users can participate in the giveaway.
            Users with a phone number that was bought on Fragment can always participate in giveaways.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.PremiumSubscriptionMonthCount">
            <summary>
            Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiveawayCompleted">
            <summary>
            This object represents a service message about the completion of a giveaway without public winners.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.WinnerCount">
            <summary>
            Number of winners in the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.UnclaimedPrizeCount">
            <summary>
            Optional. Number of undistributed prizes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.GiveawayMessage">
            <summary>
            Optional. Message with the giveaway that was completed, if it wasn't deleted
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiveawayCreated">
            <summary>
            This object represents a service message about the creation of a scheduled giveaway.
            Currently holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiveawayWinners">
            <summary>
            This object represents a message about the completion of a giveaway with public winners.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.Chat">
            <summary>
            The chat that created the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.GiveawayMessageId">
            <summary>
            Identifier of the message with the giveaway in the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.WinnersSelectionDate">
            <summary>
            Point in time when winners of the giveaway were selected
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.WinnerCount">
            <summary>
            Total number of winners in the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.Winners">
            <summary>
            List of up to 100 winners of the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.AdditionalChatCount">
            <summary>
            Optional. The number of other chats the user had to join in order to be eligible for the giveaway
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.PremiumSubscriptionMonthCount">
            <summary>
            Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.UnclaimedPrizeCount">
            <summary>
            Optional. Number of undistributed prizes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.OnlyNewMembers">
            <summary>
            Optional. <see langword="true"/>, if only users who had joined the chats after the giveaway started were eligible to win
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.WasRefunded">
            <summary>
            Optional. <see langword="true"/>, if the giveaway was canceled because the payment for it was refunded
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.PrizeDescription">
            <summary>
            Optional. Description of additional giveaway prize
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InaccessibleMessage">
            <summary>
            This object describes a message that was deleted or is otherwise inaccessible to the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InaccessibleMessage.Chat">
            <summary>
            Chat the message belonged to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InaccessibleMessage.MessageId">
            <summary>
            Unique message identifier inside the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InaccessibleMessage.Date">
            <summary>
            Always 0. The field can be used to differentiate regular and inaccessible messages.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQuery">
            <summary>
            This object represents an incoming inline query. When the user sends an empty query, your bot could return
            some default or trending results.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Id">
            <summary>
            Unique identifier for this query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Query">
            <summary>
            Text of the query (up to 256 characters)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Offset">
            <summary>
            Offset of the results to be returned, can be controlled by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.ChatType">
            <summary>
            Optional. Type of the chat, from which the inline query was sent. Can be either  <see cref="F:Telegram.Bot.Types.Enums.ChatType.Sender"/> for
            a private chat with the inline query sender, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Private"/>, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Group"/>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatType.Supergroup"/>, or <see cref="F:Telegram.Bot.Types.Enums.ChatType.Channel"/>. The chat type should be always known for requests
            sent from official clients and most third-party clients, unless the request was sent from a secret chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Location">
            <summary>
            Optional. Sender location, only for bots that request user location
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent">
            <summary>
            Content of the message to be sent instead of the result
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption">
            <summary>
            Caption of the result to be sent, 0-1024 characters after entities parsing
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode">
            <summary>
            Mode for parsing entities in the result caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a>
            for more details.
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities">
            <summary>
            List of special entities that appear in the caption, which can be specified
            instead of <see cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Latitude">
            <summary>
            Location latitude in degrees
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Longitude">
            <summary>
            Location longitude in degrees
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailWidth">
            <summary>
            Thumbnail width
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailHeight">
            <summary>
            Thumbnail height
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl">
            <summary>
            Url of the thumbnail for the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult">
            <summary>
            Base Class for inline results send in response to an <see cref="T:Telegram.Bot.Types.InlineQuery"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Type">
            <summary>
            Type of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Id">
            <summary>
            Unique identifier for this result, 1-64 Bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.ReplyMarkup">
            <summary>
            Optional. Inline keyboard attached to the message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.#ctor(System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier for this result, 1-64 Bytes</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle">
            <summary>
            Represents a link to an article or web page.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Type">
            <summary>
            Type of the result, must be article
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Title">
            <summary>
            Title of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.InputMessageContent">
            <summary>
            Content of the message to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Url">
            <summary>
            Optional. URL of the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.HideUrl">
            <summary>
            Optional. Pass <see langword="true"/>, if you don't want the URL to be shown in the message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Description">
            <summary>
            Optional. Short description of the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbnailUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbnailWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbnailHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.#ctor(System.String,System.String,Telegram.Bot.Types.InlineQueryResults.InputMessageContent)">
            <summary>
            Initializes a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/> object
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="title">Title of the result</param>
            <param name="inputMessageContent">Content of the message to be sent</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.#ctor">
            <summary>
            Initializes a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/> object
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio">
            <summary>
            Represents a link to an MP3 audio file. By default, this audio file will be sent by the user.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.InputMessageContent"/> to send
            a message with the specified content instead of the audio.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Type">
            <summary>
            Type of the result, must be audio
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.AudioUrl">
            <summary>
            A valid URL for the audio file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Performer">
            <summary>
            Optional. Performer
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.AudioDuration">
            <summary>
            Optional. Audio duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="audioUrl">A valid URL for the audio file</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio">
            <summary>
            Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio
            file will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.InputMessageContent"/> to send a message with the
            specified content instead of the audio.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.Type">
            <summary>
            Type of the result, must be audio
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.AudioFileId">
            <summary>
            A valid file identifier for the audio file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="audioFileId">A valid file identifier for the audio file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument">
            <summary>
            Represents a link to a file stored on the Telegram servers. By default, this file will be sent
            by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.InputMessageContent"/> to send a message with the
            specified content instead of the file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Type">
            <summary>
            Type of the result, must be document
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.DocumentFileId">
            <summary>
            A valid file identifier for the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="documentFileId">A valid file identifier for the file</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif">
            <summary>
            Represents a link to an animated GIF file stored on the Telegram servers. By default, this
            animated GIF file will be sent by the user with an optional caption. Alternatively, you can
            use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.InputMessageContent"/> to send a message with
            specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Type">
            <summary>
            Type of the result, must be GIF
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.GifFileId">
            <summary>
            A valid file identifier for the GIF file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="gifFileId">A valid file identifier for the GIF file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif">
            <summary>
            Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the
            Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an
            optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.InputMessageContent"/> to send a message with
            the specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Type">
            <summary>
            Type of the result, must be mpeg4_gif
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Mpeg4FileId">
            <summary>
            A valid file identifier for the MP4 file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="mpeg4FileId">A valid file identifier for the MP4 file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto">
            <summary>
            Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent
            by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.InputMessageContent"/> to send a message with the
            specified content instead of the photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Type">
            <summary>
            Type of the result, must be photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.PhotoFileId">
            <summary>
            A valid file identifier of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="photoFileId">A valid file identifier of the photo</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker">
            <summary>
            Represents a link to a sticker stored on the Telegram servers. By default, this sticker will
            be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.InputMessageContent"/> to send a message with
            the specified content instead of the sticker.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.Type">
            <summary>
            Type of the result, must be sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.StickerFileId">
            <summary>
            A valid file identifier of the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="stickerFileId">A valid file identifier of the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo">
            <summary>
            Represents a link to a video file stored on the Telegram servers. By default, this video file will
            be sent by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.InputMessageContent"/> to send a message with
            the specified content instead of the video.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Type">
            <summary>
            Type of the result, must be video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.VideoFileId">
            <summary>
            A valid file identifier for the video file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="videoFileId">A valid file identifier for the video file</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice">
            <summary>
            Represents a link to a voice message stored on the Telegram servers. By default, this voice
            message will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.InputMessageContent"/> to send a message
            with the specified content instead of the voice message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Type">
            <summary>
            Type of the result, must be voice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.VoiceFileId">
            <summary>
            A valid file identifier for the voice message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Title">
            <summary>
            Voice message title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="fileId">A valid file identifier for the voice message</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact">
            <summary>
            Represents a contact with a phone number. By default, this contact will be sent by the user.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.InputMessageContent"/> to send
            a message with the specified content instead of the contact.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.Type">
            <summary>
            Type of the result, must be contact
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.Vcard">
            <summary>
            Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbnailUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbnailWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbnailHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument">
            <summary>
            Represents a link to a file. By default, this file will be sent by the user with an optional caption.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.InputMessageContent"/> to send
            a message with the specified content instead of the file. Currently, only .PDF and .ZIP files
            can be sent using this method.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Type">
            <summary>
            Type of the result, must be document
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.DocumentUrl">
            <summary>
            A valid URL for the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.MimeType">
            <summary>
            Mime type of the content of the file, either “application/pdf” or “application/zip”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbnailUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbnailWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbnailHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="documentUrl">A valid URL for the file</param>
            <param name="title">Title of the result</param>
            <param name="mimeType">
            Mime type of the content of the file, either “application/pdf” or “application/zip”
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame">
            <summary>
            Represents a <see cref="T:Telegram.Bot.Types.Game"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.Type">
            <summary>
            Type of the result, must be game
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.GameShortName">
            <summary>
            Short name of the game
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="gameShortName">Short name of the game</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif">
            <summary>
            Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the
            user with optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.InputMessageContent"/> to send a message with the
            specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Type">
            <summary>
            Type of the result, must be GIF
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifUrl">
            <summary>
            A valid URL for the GIF file. File size must not exceed 1MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifWidth">
            <summary>
            Optional. Width of the GIF.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifHeight">
            <summary>
            Optional. Height of the GIF.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifDuration">
            <summary>
            Optional. Duration of the GIF.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ThumbnailUrl">
            <summary>
            URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ThumbnailMimeType">
            <summary>
            Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”,
            or “video/mp4”. Defaults to “image/jpeg”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="gifUrl">Width of the GIF</param>
            <param name="thumbnailUrl">Url of the thumbnail for the result.</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation">
            <summary>
            Represents a location on a map. By default, the location will be sent by the user. Alternatively,
            you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.InputMessageContent"/> to send a message with
            the specified content instead of the location.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Type">
            <summary>
            Type of the result, must be location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Latitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Latitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Longitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Longitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Title">
            <summary>
            Location title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.HorizontalAccuracy">
            <summary>
            Optional. The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.LivePeriod">
            <summary>
            Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Heading">
            <summary>
            Optional. For live locations, a direction in which the user is moving, in degrees.
            Must be between 1 and 360 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ProximityAlertRadius">
            <summary>
            Optional. For live locations, a maximum distance for proximity alerts about approaching
            another chat member, in meters. Must be between 1 and 100000 if specified.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbnailUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbnailWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbnailHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.#ctor(System.String,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="latitude">Latitude of the location in degrees</param>
            <param name="longitude">Longitude of the location in degrees</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif">
            <summary>
            Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this
            animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.InputMessageContent"/> to send a message with the specified
            content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Type">
            <summary>
            Type of the result, must be mpeg4_gif
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Url">
            <summary>
            A valid URL for the MP4 file. File size must not exceed 1MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Width">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Height">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Duration">
            <summary>
            Optional. Video duration
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ThumbnailUrl">
            <summary>
            URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ThumbnailMimeType">
            <summary>
            Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”,
            or “video/mp4”. Defaults to “image/jpeg”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="mpeg4Url">A valid URL for the MP4 file. File size must not exceed 1MB.</param>
            <param name="thumbnailUrl">Url of the thumbnail for the result.</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto">
            <summary>
            Represents a link to a photo. By default, this photo will be sent by the user with optional caption.
            Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.InputMessageContent"/> to send a message
            with the specified content instead of the photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Type">
            <summary>
            Type of the result, must be photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoUrl">
            <summary>
            A valid URL of the photo. Photo must be in <b>jpeg</b> format. Photo size must not exceed 5MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ThumbnailUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoWidth">
            <summary>
            Optional. Width of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoHeight">
            <summary>
            Optional. Height of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Title">
            <summary>
            Optional. Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query representing a link to a photo
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="photoUrl">A valid URL of the photo. Photo size must not exceed 5MB.</param>
            <param name="thumbnailUrl">Optional. Url of the thumbnail for the result.</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.#ctor">
            <summary>
            Initializes a new inline query representing a link to a photo
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton">
            <summary>
            This object represents a button to be shown above inline query results.
            You <b>must</b> use exactly one of the optional fields.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.Text">
            <summary>
            Label text on the button
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.WebApp">
            <summary>
            Optional. Description of the Web App that will be launched when the user presses
            the button. The Web App will be able to switch back to the inline mode using
            the method <see href="https://core.telegram.org/bots/webapps#initializing-web-apps">switchInlineQuery</see>
            inside the Web App.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.StartParameter">
            <summary>
            Optional. <a href="https://core.telegram.org/bots#deep-linking">Deep-linking</a> parameter
            for the /start message sent to the bot when a user presses the button.
            1-64 characters, only <c>A-Z</c>, <c>a-z</c>, <c>0-9</c>, <c>_</c> and <c>-</c> are allowed.
            </summary>
            <remarks>
            Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account
            to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above
            the results, or even before showing any.The user presses the button, switches to a private chat with the bot and,
            in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done,
            the bot can offer a switch_inline button so that the user can easily return to the chat
            where they wanted to use the bot's inline capabilities.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton"/> object
            </summary>
            <param name="text">
            Label text on the button
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.#ctor">
            <summary>
            Initializes a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton"/> object
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType">
            <summary>
            Type of the InlineQueryResult
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Article">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Photo">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Gif">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Mpeg4Gif">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Video">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/>
            /// <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Audio">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Contact">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Document">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument"/>
            /// <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Location">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Venue">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Voice">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice"/>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Game">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame"/>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Sticker">
            <summary>
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue">
            <summary>
            Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.InputMessageContent"/> to send a message with the specified
            content instead of the venue.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Type">
            <summary>
            Type of the result, must be venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Latitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Latitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Longitude">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Longitude" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Title">
            <summary>
            Title of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue if known
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareType">
            <summary>
            Optional. Foursquare type of the venue. (For example, "arts_entertainment/default",
            "arts_entertainment/aquarium" or "food/icecream".)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.GooglePlaceId">
            <summary>
            Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.GooglePlaceType">
            <summary>
            Google Places type of the venue.
            <a href="https://developers.google.com/places/web-service/supported_types"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbnailUrl">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailUrl" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbnailWidth">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailWidth" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbnailHeight">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ThumbnailHeight" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.#ctor(System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="latitude">Latitude of the location in degrees</param>
            <param name="longitude">Longitude of the location in degrees</param>
            <param name="title">Title of the result</param>
            <param name="address">Address of the venue</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo">
            <summary>
            Represents a link to a page containing an embedded video player or a video file. By default, this
            video file will be sent by the user with an optional caption. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent"/> to send a message with the specified
            content instead of the video.
            </summary>
            <remarks>
            If an <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> message contains an embedded video (e.g., YouTube),
            you <b>must</b> replace its content using <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent"/>.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Type">
            <summary>
            Type of the result, must be video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoUrl">
            <summary>
            A valid URL for the embedded video player or video file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.MimeType">
            <summary>
            Mime type of the content of video url, “text/html” or “video/mp4”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ThumbnailUrl">
            <summary>
            URL of the thumbnail (jpeg only) for the video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Title">
            <summary>
            Title for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoWidth">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoHeight">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoDuration">
            <summary>
            Optional. Video duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent">
            <summary>
            Optional. Content of the message to be sent instead of the video. This field is
            <b>required</b> if <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> is used to send an
            HTML-page as a result (e.g., a YouTube video).
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.#ctor(System.String,System.String,System.String,System.String,Telegram.Bot.Types.InlineQueryResults.InputMessageContent)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="videoUrl">A valid URL for the embedded video player</param>
            <param name="thumbnailUrl">Url of the thumbnail for the result</param>
            <param name="title">Title of the result</param>
            <param name="inputMessageContent">
            Content of the message to be sent instead of the video. This field is <b>required</b> if
            <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> is used to send an HTML-page as a result
            (e.g., a YouTube video).
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice">
            <summary>
            Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this
            voice recording will be sent by the user. Alternatively, you can use
            <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.InputMessageContent"/> to send a message with the specified
            content instead of the voice message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Type">
            <summary>
            Type of the result, must be voice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.VoiceUrl">
            <summary>
            A valid URL for the voice recording
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Title">
            <summary>
            Recording title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Caption">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.Caption" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.ParseMode">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.ParseMode" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.CaptionEntities">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.CaptionEntities" />
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.VoiceDuration">
            <summary>
            Optional. Recording duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.InputMessageContent">
            <inheritdoc cref="F:Telegram.Bot.Types.InlineQueryResults.Documentation.InputMessageContent" />
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="id">Unique identifier of this result</param>
            <param name="voiceUrl">A valid URL for the voice recording</param>
            <param name="title">Title of the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent">
            <summary>
            Represents the content of a contact message to be sent as the result of an <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.Vcard">
            <summary>
            Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new input contact message content
            </summary>
            <param name="phoneNumber">The phone number of the contact</param>
            <param name="firstName">The first name of the contact</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.#ctor">
            <summary>
            Initializes a new input contact message content
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent">
            <summary>
            Represents the content of an invoice message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Title">
            <summary>
            Product name, 1-32 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Description">
            <summary>
            Product description, 1-255 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Payload">
            <summary>
            Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,
            use for your internal processes.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.ProviderToken">
            <summary>
            Payment provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Currency">
            <summary>
            Three-letter ISO 4217 currency code, see
            <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Prices">
            <summary>
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost,
            delivery tax, bonus, etc.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount">
            <summary>
            Optional. The maximum accepted amount for tips in the smallest units of the currency
            (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass
            max_tip_amount = 145. See the exp parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>,
            it shows the number of digits past the decimal point for each currency (2 for the
            majority of currencies). Defaults to 0
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SuggestedTipAmounts">
            <summary>
            Optional. An array of suggested amounts of tip in the smallest units of the currency
            (integer, not float/double). At most 4 suggested tip amounts can be specified. The
            suggested tip amounts must be positive, passed in a strictly increased order and
            must not exceed <see cref="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.ProviderData">
            <summary>
            Optional. A JSON-serialized object for data about the invoice, which will be shared with
            the payment provider. A detailed description of the required fields should be provided by
            the payment provider.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoUrl">
            <summary>
            Optional. URL of the product photo for the invoice. Can be a photo of the goods or a
            marketing image for a service. People like it better when they see what they are paying for.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoSize">
            <summary>
            Optional. Photo size
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoWidth">
            <summary>
            Optional. Photo width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoHeight">
            <summary>
            Optional. Photo height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedName">
            <summary>
            Optional. Pass <see langword="true"/>, if you require the user's full name to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedPhoneNumber">
            <summary>
            Optional. Pass <see langword="true"/>, if you require the user's phone number to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedEmail">
            <summary>
            Optional. Pass <see langword="true"/>, if you require the user's email address to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedShippingAddress">
            <summary>
            Optional. Pass <see langword="true"/>, if you require the user's shipping address to complete the order
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SendPhoneNumberToProvider">
            <summary>
            Optional. Pass <see langword="true"/>, if user's phone number should be sent to provider
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SendEmailToProvider">
            <summary>
            Optional. Pass <see langword="true"/>, if user's email address should be sent to provider
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.IsFlexible">
            <summary>
            Optional. Pass <see langword="true"/>, if the final price depends on the shipping method
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice})">
            <summary>
            Initializes with title, description, payload, providerToken, currency and an array of
            <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/>
            </summary>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes</param>
            <param name="providerToken">Payments provider token, obtained via BotFather</param>
            <param name="currency">Three-letter ISO 4217 currency code</param>
            <param name="prices">
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost,
            delivery tax, bonus, etc.)
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.#ctor">
            <summary>
            Initializes a new input message content
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent">
            <summary>
            Represents the content of a location message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Latitude">
            <summary>
            Latitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Longitude">
            <summary>
            Longitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.HorizontalAccuracy">
            <summary>
            Optional. The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.LivePeriod">
            <summary>
            Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Heading">
            <summary>
            Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.ProximityAlertRadius">
            <summary>
            Optional. Maximum distance for proximity alerts about approaching another chat member,
            in meters. For sent live locations only.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new input location message content
            </summary>
            <param name="latitude">The latitude of the location</param>
            <param name="longitude">The longitude of the location</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.#ctor">
            <summary>
            Initializes a new input location message content
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">
            <summary>
            This object represents the content of a message to be sent as a result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent">
            <summary>
            Represents the content of a text message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.MessageText">
            <summary>
            Text of the message to be sent, 1-4096 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.ParseMode">
            <summary>
            Optional. Mode for
            <a href="https://core.telegram.org/bots/api#formatting-options">parsing entities</a> in the message
            text. See formatting options for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.Entities">
            <summary>
            Optional. List of special entities that appear in message text, which can be specified
            instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.ParseMode"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.LinkPreviewOptions">
            <summary>
            Optional. Link preview generation options for the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.DisableWebPagePreview">
            <summary>
            Disables link previews for links in this message
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.#ctor(System.String)">
            <summary>
            Initializes a new input text message content
            </summary>
            <param name="messageText">The text of the message</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.#ctor">
            <summary>
            Initializes a new input text message content
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent">
            <summary>
            Represents the content of a <see cref="T:Telegram.Bot.Types.Venue"/> message to be sent as the result of an
            <see cref="T:Telegram.Bot.Types.InlineQuery">inline query</see>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Latitude">
            <summary>
            Latitude of the venue in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Longitude">
            <summary>
            Longitude of the venue in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Title">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue, if known
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.FoursquareType">
            <summary>
            Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”,
            “arts_entertainment/aquarium” or “food/icecream”.)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.GooglePlaceId">
            <summary>
            Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.GooglePlaceType">
            <summary>
            Google Places type of the venue.
            <a href="https://developers.google.com/places/web-service/supported_types"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.#ctor(System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new inline query result
            </summary>
            <param name="title">The name of the venue</param>
            <param name="address">The address of the venue</param>
            <param name="latitude">The latitude of the venue</param>
            <param name="longitude">The longitude of the venue</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.#ctor">
            <summary>
            Initializes a new inline query result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputFileUrl">
            <summary>
            This object represents an HTTP URL for the file to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileUrl.FileType">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileUrl.Url">
            <summary>
            HTTP URL for the file to be sent
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.#ctor(System.String)">
            <summary>
            This object represents an HTTP URL for the file to be sent
            </summary>
            <param name="url">HTTP URL for the file to be sent</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.#ctor(System.Uri)">
            <summary>
            This object represents an HTTP URL for the file to be sent
            </summary>
            <param name="uri">HTTP URL for the file to be sent</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.#ctor">
            <summary>
            This object represents an HTTP URL for the file to be sent
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.IAlbumInputMedia">
            <summary>
            A marker for input media types that can be used in sendMediaGroup method.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.IInputMediaThumb">
            <summary>
            Indicates that an <see cref="T:Telegram.Bot.Types.InputMedia"/> has a thumbnail.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMediaThumb.Thumbnail">
            <summary>
            Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for
            the file is supported server-side. The thumbnail should be in JPEG format and less
            than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored
            if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;"
            if the thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMedia">
            <summary>
            This object represents the content of a media message to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.Type">
            <summary>
            Type of the media
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.Media">
            <summary>
            File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
            pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://&lt;file_attach_name&gt;"
            to upload a new one using multipart/form-data under &lt;file_attach_name%gt; name.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.Caption">
            <summary>
            Optional. Caption of the photo to be sent, 0-1024 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.CaptionEntities">
            <summary>
            Optional. List of special entities that appear in the caption, which can be specified instead
            of <see cref="P:Telegram.Bot.Types.InputMedia.ParseMode"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.ParseMode">
            <summary>
            Change, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in a caption
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>
            Initialize an object
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.#ctor">
            <summary>
            Initialize an object
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaAnimation">
            <summary>
            Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Thumbnail">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Width">
            <summary>
            Optional. Animation width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Height">
            <summary>
            Optional. Animation height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Duration">
            <summary>
            Optional. Animation duration
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.HasSpoiler">
            <summary>
            Optional. Pass <see langword="true"/> if the animation needs to be covered with a spoiler animation
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAnimation.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>
            Initializes a new animation media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAnimation.#ctor">
            <summary>
            Initializes a new animation media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaAudio">
            <summary>
            Represents an audio file to be treated as music to be sent.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Thumbnail">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Duration">
            <summary>
            Optional. Duration of the audio in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Performer">
            <summary>
            Optional. Performer of the audio
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Title">
            <summary>
            Optional. Title of the audio
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAudio.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>
            Initializes a new audio media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAudio.#ctor">
            <summary>
            Initializes a new audio media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaDocument">
            <summary>
            Represents a general file to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.Thumbnail">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.DisableContentTypeDetection">
            <summary>
            Optional. Disables automatic server-side content type detection for files uploaded using
            multipart/form-data. Always true, if the document is sent as part of an album.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaDocument.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>
            Initializes a new document media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaDocument.#ctor">
            <summary>
            Initializes a new document media to send with an <see cref="T:Telegram.Bot.Types.InputMedia"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaPhoto">
            <summary>
            Represents a photo to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaPhoto.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaPhoto.HasSpoiler">
            <summary>
            Optional. Pass <see langword="true"/> if the photo needs to be covered with a spoiler animation
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaPhoto.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>
            Initializes a new photo media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaPhoto.#ctor">
            <summary>
            Initializes a new photo media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaVideo">
            <summary>
            Represents a video to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Thumbnail">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Width">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Height">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Duration">
            <summary>
            Optional. Video duration
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.SupportsStreaming">
            <summary>
            Optional. Pass True, if the uploaded video is suitable for streaming
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.HasSpoiler">
            <summary>
            Optional. Pass <see langword="true"/> if the video needs to be covered with a spoiler animation
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaVideo.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>
            Initializes a new video media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
            <param name="media">File to send</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaVideo.#ctor">
            <summary>
            Initializes a new video media to send with an <see cref="T:Telegram.Bot.Types.InputFile"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputSticker">
            <summary>
            This object describes a sticker to be added to a sticker set.
            <a href="https://core.telegram.org/bots/api#inputsticker"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.Sticker">
            <summary>
            The added sticker. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as a String to send a file that already exists
            on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file
            from the Internet, or upload a new one using multipart/form-data.
            <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> and <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">video</see>
            stickers can't be uploaded via HTTP URL.
            If you are using a <see cref="T:Telegram.Bot.Types.InputFileStream"/>, then the property <see cref="P:Telegram.Bot.Types.InputFileStream.FileName"/> is required.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.Format">
            <summary>
            Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a WEBM video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.EmojiList">
            <summary>
            List of 1-20 emoji associated with the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.MaskPosition">
            <summary>
            Optional. Position where the mask should be placed on faces.
            For <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask"/> stickers only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.KeyWords">
            <summary>
            Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters.
            For <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular"/> and <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji"/> stickers only.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputSticker.#ctor(Telegram.Bot.Types.InputFile,System.Collections.Generic.IEnumerable{System.String},Telegram.Bot.Types.Enums.StickerFormat)">
            <summary>
            Initializes a new input sticker to create or add sticker sets
            with an <see cref="T:Telegram.Bot.Types.InputFile">sticker</see> and emojiList
            </summary>
            <param name="sticker">
            The added sticker. Pass a file_id as a String to send a file that already exists
            on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file
            from the Internet, or upload a new one using multipart/form-data.
            <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> and <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">video</see>
            stickers can't be uploaded via HTTP URL.
            </param>
            <param name="emojiList">
            List of 1-20 emoji associated with the sticker
            </param>
            <param name="format">Format of the added sticker</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputSticker.#ctor">
            <summary>
            Initializes a new input sticker to create or add sticker sets
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Location">
            <summary>
            This object represents a point on the map.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Longitude">
            <summary>
            Longitude as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Latitude">
            <summary>
            Latitude as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.HorizontalAccuracy">
            <summary>
            Optional. The radius of uncertainty for the location, measured in meters; 0-1500
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.LivePeriod">
            <summary>
            Optional. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Heading">
            <summary>
            Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.ProximityAlertRadius">
            <summary>
            Optional. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.LoginUrl">
            <summary>
            This object represents a parameter of the inline keyboard button used to automatically authorize a user.
            Serves as a great replacement for the
            <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a> when the user is coming from
            Telegram. All the user needs to do is tap/click a button and confirm that they want to log in.
            <para>
            Telegram apps support these buttons as of
            <a href="https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots">version 5.7</a>.
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.Url">
            <summary>
            An HTTP URL to be opened with user authorization data added to the query string when the button is pressed.
            If the user refuses to provide authorization data, the original URL without information about the user will
            be opened. The data added is the same as described in
            <a href="https://core.telegram.org/widgets/login#receiving-authorization-data">
            Receiving authorization data
            </a>.
            <para>
            <b>NOTE:</b> You <b>must</b> always check the hash of the received data to verify the authentication and
            the integrity of the data as described in
            <a href="https://core.telegram.org/widgets/login#checking-authorization">Checking authorization</a>.
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.ForwardText">
            <summary>
            Optional. New text of the button in forwarded messages
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.BotUsername">
            <summary>
            Optional. Username of a bot, which will be used for user authorization. See
            <a href="https://core.telegram.org/widgets/login#setting-up-a-bot">Setting up a bot</a> for more
            details. If not specified, the current bot’s username will be assumed. The url's domain must be the same
            as the domain linked with the bot. See
            <a href="https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot">
            Linking your domain to the bot</a> for more details.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.RequestWriteAccess">
            <summary>
            Optional. Pass <see langword="true"/> to request the permission for your bot to send messages to the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MaskPosition">
            <summary>
            This object describes the position on faces where a mask should be placed by default.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.Point">
            <summary>
            The part of the face relative to which the mask should be placed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.XShift">
            <summary>
            Shift by X-axis measured in widths of the mask scaled to the face size, from left to right.
            For example, choosing -1.0 will place mask just to the left of the default mask position.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.YShift">
            <summary>
            Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.
            For example, 1.0 will place the mask just below the default mask position.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.Scale">
            <summary>
            Mask scaling coefficient. For example, 2.0 means double size.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MaybeInaccessibleMessage">
            <summary>
            This object describes a message that can be inaccessible to the bot. It can be one of
            <list type="bullet">
            <item><see cref="T:Telegram.Bot.Types.Message"/></item>
            <item><see cref="T:Telegram.Bot.Types.InaccessibleMessage"/></item>
            </list>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButton">
            <summary>
            This object describes the bot’s menu button in a private chat. It should be one of:
            <list type="bullet">
            <item>MenuButtonCommands</item>
            <item>MenuButtonWebApp</item>
            <item>MenuButtonDefault</item>
            </list>
            If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat.
            Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButton.Type">
            <summary>
            Type of the button
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButtonCommands">
            <summary>
            Represents a menu button, which opens the bot’s list of commands.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonCommands.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.MenuButtonWebApp">
            <summary>
            Represents a menu button, which launches a <a href="https://core.telegram.org/bots/webapps">Web App</a>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonWebApp.Type">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonWebApp.Text">
            <summary>
            Text on the button
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonWebApp.WebApp">
            <summary>
            Description of the Web App that will be launched when the user presses the button. The Web App will be able
            to send an arbitrary message on behalf of the user using the method <see cref="!:AnswerWebAppQueryRequest"/>.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButtonDefault">
            <summary>
            Describes that no specific value for the menu button was set.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonDefault.Type">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Types.MessageAutoDeleteTimerChanged">
            <summary>
            This object represents a service message about a change in auto-delete timer settings.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageAutoDeleteTimerChanged.MessageAutoDeleteTime">
            <summary>
            New auto-delete time for messages in the chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOrigin">
            <summary>
            This object describes the origin of a message. It can be one of
            <list type="bullet">
            <item><see cref="T:Telegram.Bot.Types.MessageOriginUser"/></item>
            <item><see cref="T:Telegram.Bot.Types.MessageOriginHiddenUser"/></item>
            <item><see cref="T:Telegram.Bot.Types.MessageOriginChat"/></item>
            <item><see cref="T:Telegram.Bot.Types.MessageOriginChannel"/></item>
            </list>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOrigin.Type">
            <summary>
            Type of the message origin
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOrigin.Date">
            <summary>
            Date the message was sent originally
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginUser">
            <summary>
            The message was originally sent by a known user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginUser.Type">
            <summary>
            Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.User"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginUser.Date">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginUser.SenderUser">
            <summary>
            User that sent the message originally
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginHiddenUser">
            <summary>
            The message was originally sent by an unknown user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginHiddenUser.Type">
            <summary>
            Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.HiddenUser"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginHiddenUser.Date">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginHiddenUser.SenderUserName">
            <summary>
            Name of the user that sent the message originally
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginChat">
            <summary>
            The message was originally sent on behalf of a chat to a group chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.Type">
            <summary>
            Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.Chat"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.Date">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.SenderChat">
            <summary>
            Chat that sent the message originally
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.AuthorSignature">
            <summary>
            Optional. For messages originally sent by an anonymous chat administrator,
            original message author signature
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginChannel">
            <summary>
            The message was originally sent to a channel chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.Type">
            <summary>
            Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.Channel"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.Date">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.Chat">
            <summary>
            Channel chat to which the message was originally sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.MessageId">
            <summary>
            Unique message identifier inside the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.AuthorSignature">
            <summary>
            Optional. Signature of the original post author
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageReactionCountUpdated">
            <summary>
            This object represents reaction changes on a message with anonymous reactions.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.Chat">
            <summary>
            The chat containing the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.MessageId">
            <summary>
            Unique message identifier inside the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.Date">
            <summary>
            Date of the change
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.Reactions">
            <summary>
            List of reactions that are present on the message
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageReactionUpdated">
            <summary>
            This object represents a change of a reaction on a message performed by a user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.Chat">
            <summary>
            The chat containing the message the user reacted to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.MessageId">
            <summary>
            Unique identifier of the message inside the chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.User">
            <summary>
            Optional.The user that changed the reaction, if the user isn't anonymous
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.ActorChat">
            <summary>
            Optional.The chat on behalf of which the reaction was changed, if the user is anonymous
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.Date">
            <summary>
            Date of the change
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.OldReaction">
            <summary>
            Previous list of reaction types that were set by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.NewReaction">
            <summary>
            New list of reaction types that have been set by the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedCredentials">
            <summary>
            Contains data required for decrypting and authenticating <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/>.
            See the <a href="https://core.telegram.org/passport#receiving-information">Telegram Passport
            Documentation</a> for a complete description of the data decryption and authentication processes.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Data">
            <summary>
            Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets
            required for <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/> decryption and authentication.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Hash">
            <summary>
            Base64-encoded data hash for data authentication.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Secret">
            <summary>
            Base64-encoded secret, encrypted with the bot’s public RSA key, required for data decryption.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedPassportElement">
            <summary>
            Contains information about documents or other Telegram Passport elements shared with the bot by the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Type">
            <summary>
            Element type. One of <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElementType"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Data">
            <summary>
            Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails"/>, <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/> and <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address"/>
            types. Can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.PhoneNumber">
            <summary>
            Optional. User's verified phone number, available only for <see cref="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.PhoneNumber"/> type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Email">
            <summary>
            Optional. User's verified email address, available only for <see cref="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Email"/> type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Files">
            <summary>
            Optional. Array of encrypted files with documents provided by the user, available for
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration"/> and <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration"/> types.
            Files can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.FrontSide">
            <summary>
            Optional. Encrypted file with the front side of the document, provided by the user. Available for
            <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/> and
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/>. The file can be decrypted and verified using the accompanying
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.ReverseSide">
            <summary>
            Optional. Encrypted file with the reverse side of the document, provided by the user. Available for
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/> and <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/>. The file can be decrypted and verified using
            the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Selfie">
            <summary>
            Optional. Encrypted file with the selfie of the user holding a document, provided by the user;
            available for <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/> and
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/>. The file can be decrypted and verified using the accompanying
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Translation">
            <summary>
            Optional. Array of encrypted files with translated versions of documents provided by the user.
            Available if requested for <see cref="N:Telegram.Bot.Types.Passport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill"/>,
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement"/>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration"/> and
            <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration"/> types. Files can be decrypted and verified using the accompanying
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Hash">
            <summary>
            Base64-encoded element hash for using in PassportElementErrorUnspecified
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedPassportElementType">
            <summary>
            <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/> element type
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails">
            <summary>
            Personal details
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Passport">
            <summary>
            Passport
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicence">
            <summary>
            Driver licence
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard">
            <summary>
            Identity card
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport">
            <summary>
            Internal passport
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill">
            <summary>
            Utility bill
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement">
            <summary>
            Bank statement
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement">
            <summary>
            Rental agreement
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration">
            <summary>
            Passport registration
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration">
            <summary>
            Temporary registration
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PhoneNumber">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportData">
            <summary>
            Contains information about Telegram Passport data shared with the bot by the user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportData.Data">
            <summary>
            Array with information about documents and other Telegram Passport elements that was shared with the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportData.Credentials">
            <summary>
            Encrypted credentials required to decrypt the data.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportFile">
            <summary>
            This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportFile.FileDate">
            <summary>
            DateTime when the file was uploaded
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.Invoice">
            <summary>
            This object contains basic information about an invoice.
            </summary>
            <seealso href="https://core.telegram.org/bots/api#invoice"/>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Title">
            <summary>
            Product name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Description">
            <summary>
            Product description
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.StartParameter">
            <summary>
            Unique bot deep-linking parameter that can be used to generate this invoice
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Currency">
            <summary>
            Three-letter ISO 4217
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.TotalAmount">
            <summary>
            Total price in the <i>smallest units</i> of the
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.LabeledPrice">
            <summary>
            This object represents a portion of the price for goods or services.
            </summary>
            <a href="https://core.telegram.org/bots/api#labeledprice"/>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.LabeledPrice.Label">
            <summary>
            Portion label
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.LabeledPrice.Amount">
            <summary>
            Price of the product in the <i>smallest units</i> of the
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number
            of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.LabeledPrice.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/>
            </summary>
            <param name="label">Portion label</param>
            <param name="amount">Price of the product</param>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.LabeledPrice.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.OrderInfo">
            <summary>
            This object represents information about an order.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.Name">
            <summary>
            Optional. User name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.PhoneNumber">
            <summary>
            Optional. User's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.Email">
            <summary>
            Optional. User email
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.ShippingAddress">
            <summary>
            Optional. User shipping address
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.PreCheckoutQuery">
            <summary>
            This object contains information about an incoming pre-checkout query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.Id">
            <summary>
            Unique query identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.From">
            <summary>
            User who sent the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.Currency">
            <summary>
            Three-letter ISO 4217
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.TotalAmount">
            <summary>
            Total price in the <i>smallest units</i> of the
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.InvoicePayload">
            <summary>
            Bot specified invoice payload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.ShippingOptionId">
            <summary>
            Optional. Identifier of the shipping option chosen by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.OrderInfo">
            <summary>
            Optional. Order info provided by the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingAddress">
            <summary>
            This object represents a shipping address.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.CountryCode">
            <summary>
            ISO 3166-1 alpha-2 country code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.State">
            <summary>
            State, if applicable
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.StreetLine1">
            <summary>
            First line for the address
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.StreetLine2">
            <summary>
            Second line for the address
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.PostCode">
            <summary>
            Address post code
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingOption">
            <summary>
            This object represents one shipping option.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Id">
            <summary>
            Shipping option identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Title">
            <summary>
            Option title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Prices">
            <summary>
            List of price portions
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingQuery">
            <summary>
            This object contains information about an incoming shipping query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.Id">
            <summary>
            Unique query identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.From">
            <summary>
            User who sent the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.InvoicePayload">
            <summary>
            Bot specified invoice payload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.ShippingAddress">
            <summary>
            User specified shipping address
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.SuccessfulPayment">
            <summary>
            This object contains basic information about a successful payment.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.Currency">
            <summary>
            Three-letter ISO 4217
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.TotalAmount">
            <summary>
            Total price in the <i>smallest units</i> of the
            <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a>
            (integer, <b>not</b> float/double).
            <para>
            For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <i>exp</i> parameter
            in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows
            the number of digits past the decimal point for each currency (2 for the majority of currencies).
            </para>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.InvoicePayload">
            <summary>
            Bot specified invoice payload
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.ShippingOptionId">
            <summary>
            Optional. Identifier of the shipping option chosen by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.OrderInfo">
            <summary>
            Optional. Order info provided by the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.TelegramPaymentChargeId">
            <summary>
            Telegram payment identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.ProviderPaymentChargeId">
            <summary>
            Provider payment identifier
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PhotoSize">
            <summary>
            This object represents one size of a photo or a <see cref="T:Telegram.Bot.Types.Document">file</see> / <see cref="T:Telegram.Bot.Types.Sticker">sticker</see> thumbnail.
            </summary>
            <remarks>A missing thumbnail for a file (or sticker) is presented as an empty object.</remarks>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Width">
            <summary>
            Photo width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Height">
            <summary>
            Photo height
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Poll">
            <summary>
            This object contains information about a poll.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Id">
            <summary>
            Unique poll identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Question">
            <summary>
            Poll question, 1-300 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Options">
            <summary>
            List of poll options
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.TotalVoterCount">
            <summary>
            Total number of users that voted in the poll
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.IsClosed">
            <summary>
            <see langword="true"/>, if the poll is closed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.IsAnonymous">
            <summary>
            <see langword="true"/>, if the poll is anonymous
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Type">
            <summary>
            Poll type, currently can be “regular” or “quiz”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.AllowsMultipleAnswers">
            <summary>
            <see langword="true"/>, if the poll allows multiple answers
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.CorrectOptionId">
            <summary>
            Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode,
            which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Explanation">
            <summary>
            Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
            quiz-style poll, 0-200 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.ExplanationEntities">
            <summary>
            Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the
            <see cref="P:Telegram.Bot.Types.Poll.Explanation"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.OpenPeriod">
            <summary>
            Optional. Amount of time in seconds the poll will be active after creation
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.CloseDate">
            <summary>
            Optional. Point in time when the poll will be automatically closed
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PollAnswer">
            <summary>
            This object represents an answer of a user in a non-anonymous poll.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.PollId">
            <summary>
            Unique poll identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.VoterChat">
            <summary>
            Optional. The chat that changed the answer to the poll, if the voter is anonymous
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.User">
            <summary>
            Optional. The user that changed the answer to the poll, if the voter isn't anonymous
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.OptionIds">
            <summary>
            0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PollOption">
            <summary>
            This object contains information about one answer option in a poll.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.Text">
            <summary>
            Option text, 1-100 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.VoterCount">
            <summary>
            Number of users that voted for this option
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ProximityAlertTriggered">
            <summary>
            Represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set
            by another user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Traveler">
            <summary>
            User that triggered the alert
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Watcher">
            <summary>
            User that set the alert
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Distance">
            <summary>
            The distance between the users
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionCount">
            <summary>
            Represents a reaction added to a message along with the number of times it was added.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionCount.Type">
            <summary>
            Type of the reaction
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionCount.TotalCount">
            <summary>
            Number of times the reaction was added
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionTypeEmoji">
            <summary>
            The reaction is based on an emoji.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeEmoji.Type">
            <summary>
            Type of the reaction, always "emoji"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeEmoji.Emoji">
            <summary>
            Reaction emoji. Currently, it can be one of "👍", "👎", "❤", "🔥", "🥰", "👏", "😁",
            "🤔", "🤯", "😱", "🤬", "😢", "🎉", "🤩", "🤮", "💩", "🙏", "👌", "🕊", "🤡", "🥱",
            "🥴", "😍", "🐳", "❤‍🔥", "🌚", "🌭", "💯", "🤣", "⚡", "🍌", "🏆", "💔", "🤨",
            "😐", "🍓", "🍾", "💋", "🖕", "😈", "😴", "😭", "🤓", "👻", "👨‍💻", "👀", "🎃",
            "🙈", "😇", "😨", "🤝", "✍", "🤗", "🫡", "🎅", "🎄", "☃", "💅", "🤪", "🗿", "🆒",
            "💘", "🙉", "🦄", "😘", "💊", "🙊", "😎", "👾", "🤷‍♂", "🤷", "🤷‍♀", "😡"
            </summary>
            <remarks>
            Available shortcuts: <see cref="T:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji"/>
            </remarks>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionTypeCustomEmoji">
            <summary>
            The reaction is based on an emoji.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeCustomEmoji.Type">
            <summary>
            Type of the reaction, always "custom_emoji"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeCustomEmoji.CustomEmojiId">
            <summary>
            Custom emoji identifier
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">
            <summary>
            Upon receiving a <see cref="T:Telegram.Bot.Types.Message"/> with this object, Telegram clients will display a reply interface to the
            user (act as if the user has selected the bot’s message and tapped 'Reply'). This can be extremely useful if you
            want to create user-friendly step-by-step interfaces without having to sacrifice
            <a href="https://core.telegram.org/bots#privacy-mode">privacy mode</a>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.ForceReply">
            <summary>
            Shows reply interface to the user, as if they manually selected the bot’s message and tapped 'Reply'
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.InputFieldPlaceholder">
            <summary>
            Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.IKeyboardButton">
            <summary>
            Marker interface for a regular or inline button of the reply keyboard
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.IKeyboardButton.Text">
            <summary>
            Text of the button. If none of the optional fields are used,
            it will be sent as a message when the button is pressed
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">
            <summary>
            This object represents one button of an inline keyboard. You <b>must</b> use exactly one of the optional fields.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Text">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Url">
            <summary>
            Optional. HTTP or tg:// URL to be opened when the button is pressed.
            Links <c>tg://user?id=&lt;user_id&gt;</c> can be used to mention a user by their ID without using a username,
            if this is allowed by their privacy settings.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CallbackData">
            <summary>
            Optional. Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when button
            is pressed, 1-64 bytes
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WebApp">
            <summary>
            Optional. Description of the Web App that will be launched when the user presses the button. The Web App will
            be able to send an arbitrary message on behalf of the user using the request
            <see cref="!:Requests.AnswerWebAppQueryRequest"/>. Available only in private chats between a user and the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.LoginUrl">
            <summary>
            Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the
            <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQuery">
            <summary>
            Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and
            insert the bot’s username and the specified inline query in the input field. Can be empty, in which case just
            the bot’s username will be inserted.
            </summary>
            <remarks>
            <b>Note</b>: This offers an easy way for users to start using your bot in
            <a href="https://core.telegram.org/bots/inline">inline mode</a> when they are currently in a private chat
            with it. Especially useful when combined with <see cref="!:Requests.AnswerInlineQueryRequest">SwitchPm…</see>
            actions – in this case the user will be automatically returned to the chat they switched from, skipping the
            chat selection screen.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQueryCurrentChat">
            <summary>
            Optional. If set, pressing the button will insert the bot’s username and the specified inline query in the
            current chat’s input field. Can be empty, in which case only the bot’s username will be inserted.
            </summary>
            <remarks>
            This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting
            something from multiple options.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQueryChosenChat">
            <summary>
            Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type,
            open that chat and insert the bot's username and the specified inline query in the input field
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CallbackGame">
            <summary>
            Optional. Description of the game that will be launched when the user presses the button.
            </summary>
            <remarks>
            <b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Pay">
            <summary>
            Optional. Specify <see langword="true"/>, to send a
            <a href="https://core.telegram.org/bots/api#payments">Pay button</a>.
            </summary>
            <remarks>
            <b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.#ctor">
            <summary>
            Instantiates new Inline Keyboard object
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.#ctor(System.String)">
            <summary>
            Instantiates new Inline Keyboard object
            </summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithUrl(System.String,System.String)">
            <summary>
            Creates an inline keyboard button that opens a HTTP url when pressed
            </summary>
            <param name="text">Label text on the button</param>
            <param name="url">HTTP or tg:// url to be opened when button is pressed</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithLoginUrl(System.String,Telegram.Bot.Types.LoginUrl)">
            <summary>
            Creates an inline keyboard button that opens a HTTP url to automatically authorize the user
            </summary>
            <param name="text">Label text on the button</param>
            <param name="loginUrl">
            An HTTP URL used to automatically authorize the user. Can be used as a replacement for the
            <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData(System.String)">
            <summary>
            Creates an inline keyboard button that sends <see cref="T:Telegram.Bot.Types.CallbackQuery"/> to bot when pressed
            </summary>
            <param name="textAndCallbackData">
            Text and data of the button to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when
            button is pressed, 1-64 bytes
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData(System.String,System.String)">
            <summary>
            Creates an inline keyboard button that sends <see cref="T:Telegram.Bot.Types.CallbackQuery"/> to bot when pressed
            </summary>
            <param name="text">Label text on the button</param>
            <param name="callbackData">
            Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when button is pressed,
            1-64 bytes
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQuery(System.String,System.String)">
            <summary>
            Creates an inline keyboard button. Pressing the button will prompt the user to select one of their chats,
            open that chat and insert the bot’s username and the specified inline query in the input field.
            </summary>
            <param name="text">Label text on the button</param>
            <param name="query">
            If set, pressing the button will prompt the user to select one of their chats, open that chat and insert
            the bot’s username and the specified inline query in the input field. Can be empty, in which case just the
            bot’s username will be inserted.
            </param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQueryCurrentChat(System.String,System.String)">
            <summary>
            Creates an inline keyboard button. Pressing the button will insert the bot’s username and the specified inline
            query in the current chat’s input field.
            </summary>
            <param name="text">Label text on the button</param>
            <param name="query">
            If set, pressing the button will insert the bot’s username and the specified inline query in the current
            chat’s input field. Can be empty, in which case only the bot’s username will be inserted.
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQueryChosenChat(System.String,Telegram.Bot.Types.SwitchInlineQueryChosenChat)">
            <summary>
            Creates an inline keyboard button. Pressing the button will prompt the user to select one of their chats
            of the specified type, open that chat and insert the bot's username and the specified inline query
            in the input field
            </summary>
            <param name="text">Label text on the button</param>
            <param name="switchInlineQueryChosenChat">
            represents an inline button that switches the current user to inline mode in a chosen chat,
            with an optional default inline query.
            </param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallBackGame(System.String,Telegram.Bot.Types.CallbackGame)">
            <summary>
            Creates an inline keyboard button. Pressing the button will launch the game.
            </summary>
            <param name="text">Label text on the button</param>
            <param name="callbackGame">
            Description of the game that will be launched when the user presses the button.
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithPayment(System.String)">
            <summary>
            Creates an inline keyboard button for a PayButton
            </summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithWebApp(System.String,Telegram.Bot.Types.WebAppInfo)">
            <summary>
            Generate an inline keyboard button to request a web app
            </summary>
            <param name="text">Button's text</param>
            <param name="webAppInfo">Web app information</param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/>
            with callback data
            </summary>
            <param name="textAndCallbackData">Label text and callback data of the button</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            This object represents an inline keyboard that appears right next to the <see cref="T:Telegram.Bot.Types.Message"/> it belongs to.
            </summary>
            <remarks>
            Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will display
            <i>unsupported message</i>.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.InlineKeyboard">
            <summary>
            Array of <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> rows, each represented by an Array of
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/>.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with only one keyboard button
            </summary>
            <param name="inlineKeyboardButton">Keyboard button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with a one-row keyboard
            </summary>
            <param name="inlineKeyboardRow">The inline keyboard row</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class.
            </summary>
            <param name="inlineKeyboard">The inline keyboard.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.Empty">
            <summary>
            Generate an empty inline keyboard markup
            </summary>
            <returns>Empty inline keyboard markup</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup with one button
            </summary>
            <param name="button">Inline keyboard button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup with one button
            </summary>
            <param name="buttonText">Text of the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}[])~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup from multiple buttons
            </summary>
            <param name="inlineKeyboard">Keyboard buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton[])~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            Generate an inline keyboard markup from multiple buttons on 1 row
            </summary>
            <param name="inlineKeyboard">Keyboard buttons</param>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.IReplyMarkup">
            <summary>
            A marker interface for reply markups that define how a <see cref="T:Telegram.Bot.Types.User"/> can reply to the sent <see cref="T:Telegram.Bot.Types.Message"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton">
            <summary>
            This object represents one button of the reply keyboard.
            For simple text buttons, <see cref="T:System.String"/> can be used instead of this object to specify the button text.
            The optional fields <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WebApp"/>, <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestUsers"/>, <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestChat"/>,
            <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestContact"/>, <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestLocation"/>, and <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestPoll"/> are mutually exclusive.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.Text">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestUsers">
            <summary>
            Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users
            will be sent to the bot in a "<see cref="T:Telegram.Bot.Types.UsersShared"/>" service message. Available in private chats only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestUser">
            <summary>
            Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users
            will be sent to the bot in a "<see cref="T:Telegram.Bot.Types.UsersShared"/>" service message. Available in private chats only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestChat">
            <summary>
            Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send
            its identifier to the bot in a “chat_shared” service message. Available in private chats only.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestContact">
            <summary>
            Optional. If <see langword="true"/>, the user's phone number will be sent as a contact when the button
            is pressed. Available in private chats only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestLocation">
            <summary>
            Optional. If <see langword="true"/>, the user's current location will be sent when the button is pressed.
            Available in private chats only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestPoll">
            <summary>
            Optional. If specified, the user will be asked to create a poll and send it to the bot when the button
            is pressed. Available in private chats only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WebApp">
            <summary>
            Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will
            be able to send a “web_app_data” service message. Available in private chats only.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/> class.
            </summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/> class.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestContact(System.String)">
            <summary>
            Generate a keyboard button to request for contact
            </summary>
            <param name="text">Button's text</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestLocation(System.String)">
            <summary>
            Generate a keyboard button to request for location
            </summary>
            <param name="text">Button's text</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestPoll(System.String,System.String)">
            <summary>
            Generate a keyboard button to request a poll
            </summary>
            <param name="text">Button's text</param>
            <param name="type">Poll's type</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithWebApp(System.String,System.String)">
            <summary>
            Generate a keyboard button to request a web app
            </summary>
            <param name="text">Button's text</param>
            <param name="url">
            An HTTPS URL of a Web App to be opened with additional data as specified in
            <a href="https://core.telegram.org/bots/webapps#initializing-web-apps">Initializing Web Apps</a>
            </param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithWebApp(System.String,Telegram.Bot.Types.WebAppInfo)">
            <summary>
            Generate a keyboard button to request a web app
            </summary>
            <param name="text">Button's text</param>
            <param name="webAppInfo">Web app information</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestUsers(System.String,Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers)">
            <summary>
            Generate a keyboard button to request users
            </summary>
            <param name="text">Button's text</param>
            <param name="requestUsers">Criteria used to request a suitable users</param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestUser(System.String,Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser)">
            <summary>
            Generate a keyboard button to request user info
            </summary>
            <param name="text">Button's text</param>
            <param name="requestUser">Criteria used to request a suitable user</param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestUsers(System.String,System.Int32)">
            <summary>
            Generate a keyboard button to request users
            </summary>
            <param name="text">Button's text</param>
            <param name="requestId">
            Signed 32-bit identifier of the request that will be received back in the <see cref="T:Telegram.Bot.Types.UsersShared"/> object.
            Must be unique within the message
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestChat(System.String,Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat)">
            <summary>
            Generate a keyboard button to request a chat
            </summary>
            <param name="text">Button's text</param>
            <param name="requestChat">Criteria used to request a suitable chat</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestChat(System.String,System.Int32,System.Boolean)">
            <summary>
            Generate a keyboard button to request a chat
            </summary>
            <param name="text">Button's text</param>
            <param name="requestId">
            Signed 32-bit identifier of the request, which will be received back in the <see cref="T:Telegram.Bot.Types.ChatShared"/> object.
            Must be unique within the message
            </param>
            <param name="chatIsChannel">
            Pass <see langword="true"/> to request a channel chat, pass <see langword="false"/> to request a group or a supergroup chat.
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.KeyboardButton">
            <summary>
            Generate a keyboard button from text
            </summary>
            <param name="text">Button's text</param>
            <returns>Keyboard button</returns>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType">
            <summary>
            This object represents type of a poll, which is allowed to be created
            and sent when the corresponding button is pressed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType.Type">
            <summary>
            Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is
            passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat">
            <summary>
            This object defines the criteria used to request a suitable chat. The identifier of the selected chat will be
            shared with the bot when the corresponding button is pressed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestId">
            <summary>
            Signed 32-bit identifier of the request, which will be received back in the <see cref="T:Telegram.Bot.Types.ChatShared"/> object.
            Must be unique within the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatIsChannel">
            <summary>
            Pass <see langword="true"/> to request a channel chat, pass <see langword="false"/>
            to request a group or a supergroup chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatIsForum">
            <summary>
            Optional. Pass <see langword="true" /> to request a forum supergroup, pass <see langword="false" /> to
            request a non-forum chat. If not specified, no additional restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatHasUsername">
            <summary>
            Optional. Pass <see langword="true" /> to request a supergroup or a channel with a username,
            pass <see langword="false" /> to request a chat without a username. If not specified, no additional
            restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatIsCreated">
            <summary>
            Optional. Pass <see langword="true" /> to request a chat owned by the user. Otherwise, no additional
            restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.UserAdministratorRights">
            <summary>
            Optional. A JSON-serialized object listing the required administrator rights of the user in the chat.
            If not specified, no additional restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.BotAdministratorRights">
            <summary>
            Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat.
            The rights must be a subset of <see cref="T:Telegram.Bot.Types.ChatAdministratorRights" />. If not specified, no additional
            restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.BotIsMember">
            <summary>
            Optional. Pass <see langword="true" /> to request a chat with the bot as a member. Otherwise, no additional
            restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestTitle">
            <summary>
            Optional. Pass <see langword="true" /> to request the chat's title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestUsername">
            <summary>
            Optional. Pass <see langword="true" /> to request the chat's username
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestPhoto">
            <summary>
            Optional. Pass <see langword="true" /> to request the chat's photo
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat"/> class with requestId and chatIsChannel
            </summary>
            <param name="requestId">
            Signed 32-bit identifier of the request, which will be received back in the <see cref="T:Telegram.Bot.Types.ChatShared"/> object.
            Must be unique within the message
            </param>
            <param name="chatIsChannel">
            Pass <see langword="true"/> to request a channel chat, pass <see langword="false"/>
            to request a group or a supergroup chat.
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat"/> class
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser">
            <summary>
            This object defines the criteria used to request a suitable user. The identifier of the selected user will be
            shared with the bot when the corresponding button is pressed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser.RequestId">
            <summary>
            Signed 32-bit identifier of the request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser.UserIsBot">
            <summary>
            Optional. Pass <see langword="true" /> to request a bot, pass <see langword="false" /> to request a regular user. If not specified, no additional
            restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser.UserIsPremium">
            <summary>
            Optional. Pass <see langword="true" /> to request a premium user, pass <see langword="false" /> to request a non-premium user. If not specified,
            no additional restrictions are applied.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers">
            <summary>
            This object defines the criteria used to request a suitable user. The identifier of the selected user will be
            shared with the bot when the corresponding button is pressed.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestId">
            <summary>
            Signed 32-bit identifier of the request that will be received back in the <see cref="T:Telegram.Bot.Types.UsersShared"/> object.
            Must be unique within the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.UserIsBot">
            <summary>
            Optional. Pass <see langword="true" /> to request bots, pass <see langword="false" /> to request regular users.
            If not specified, no additional restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.UserIsPremium">
            <summary>
            Optional. Pass <see langword="true" /> to request premium users, pass <see langword="false" /> to request non-premium users.
            If not specified, no additional restrictions are applied.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.MaxQuantity">
            <summary>
            Optional. The maximum number of users to be selected; 1-10. Defaults to 1.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestName">
            <summary>
            Optional. Pass <see langword="true" /> to request the users' first and last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestUsername">
            <summary>
            Optional. Pass <see langword="true" /> to request the users' username
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestPhoto">
            <summary>
            Optional. Pass <see langword="true" /> to request the users' photo
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/> class with requestId
            </summary>
            <param name="requestId">
            Signed 32-bit identifier of the request that will be received back in the <see cref="T:Telegram.Bot.Types.UsersShared"/> object.
            Must be unique within the message
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/> class
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Represents a custom keyboard with reply options
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.Keyboard">
            <summary>
            Array of button rows, each represented by an Array of KeyboardButton objects
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.IsPersistent">
            <summary>
            Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to
            <see langword="false"/>, in which case the custom keyboard can be hidden and opened with a keyboard icon.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.ResizeKeyboard">
            <summary>
            Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller
            if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always
            of the same height as the app's standard keyboard.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.OneTimeKeyboard">
            <summary>
            Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still
            be available, but clients will automatically display the usual letter-keyboard in the chat – the user can
            press a special button in the input field to see the custom keyboard again. Defaults to false.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.InputFieldPlaceholder">
            <summary>
            Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.KeyboardButton)">
            <summary>
            Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/> with one button
            </summary>
            <param name="button">Button on keyboard</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.KeyboardButton})">
            <summary>
            Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>
            </summary>
            <param name="keyboardRow">The keyboard row.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.KeyboardButton}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/> class.
            </summary>
            <param name="keyboard">The keyboard.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Generates a reply keyboard markup with one button
            </summary>
            <param name="text">Button's text</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String[])~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Generates a reply keyboard markup with multiple buttons on one row
            </summary>
            <param name="texts">Texts of buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String[][])~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            Generates a reply keyboard markup with multiple buttons
            </summary>
            <param name="textsItems">Texts of buttons</param>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">
            <summary>
            Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display
            the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot.
            An exception is made for one-time keyboards that are hidden immediately after the user presses a button
            (see <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove.RemoveKeyboard">
            <summary>
            Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to
            hide the keyboard from sight but keep it accessible, use '<see cref="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.OneTimeKeyboard"/>'
            in <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyMarkupBase">
            <summary>
            Defines how clients display a reply interface to the <see cref="T:Telegram.Bot.Types.User"/>
            </summary>
            <seealso cref="T:Telegram.Bot.Types.ReplyMarkups.IReplyMarkup" />
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyMarkupBase.Selective">
            <summary>
            Optional. Use this parameter if you want to show the keyboard to specific users only. Targets:
            <list type="number">
            <item>
            users that are @mentioned in the <see cref="P:Telegram.Bot.Types.Message.Text"/> of the <see cref="T:Telegram.Bot.Types.Message"/> object;
            </item>
            <item>
            if the bot’s message is a reply (has <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage"/>), sender of the original
            message.
            </item>
            </list>
            </summary>
            <remarks>
            <i>Example:</i> A user requests to change the bot’s language, bot replies to the request with a keyboard
            to select the new language. Other users in the group don't see the keyboard.
            </remarks>
        </member>
        <member name="T:Telegram.Bot.Types.ResponseParameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ResponseParameters.MigrateToChatId">
            <summary>
            The group has been migrated to a supergroup with the specified identifier.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ResponseParameters.RetryAfter">
            <summary>
            In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.SentWebAppMessage">
            <summary>
            Contains information about an inline message sent by a
            <a href="https://core.telegram.org/bots/webapps">Web App</a> on behalf of a user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SentWebAppMessage.InlineMessageId">
            <summary>
            Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached
            to the message.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.SharedUser">
            <summary>
            This object contains information about a user that was shared with the bot using
            a <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser"/> button.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.UserId">
            <summary>
            Identifier of the shared user. The bot may not have access to the user and could be unable to use this
            identifier, unless the user is already known to the bot by some other means.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.FirstName">
            <summary>
            Optional. First name of the user, if the name was requested by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.LastName">
            <summary>
            Optional. Last name of the user, if the name was requested by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.Username">
            <summary>
            Optional. Username of the user, if the username was requested by the bot
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.Photo">
             <summary>
            
             </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Sticker">
            <summary>
            This object represents a sticker.
            <a href="https://core.telegram.org/bots/api#sticker"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Type">
            <summary>
            Type of the sticker. The type of the sticker is independent from its format,
            which is determined by the fields <see cref="P:Telegram.Bot.Types.Sticker.IsAnimated"/> and <see cref="P:Telegram.Bot.Types.Sticker.IsVideo"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Width">
            <summary>
            Sticker width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Height">
            <summary>
            Sticker height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.IsAnimated">
            <summary>
            <see langword="true"/>, if the sticker is <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">animated</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.IsVideo">
            <summary>
            <see langword="true"/>, if the sticker is a <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">video sticker</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Thumbnail">
            <summary>
            Optional. Sticker thumbnail in the .WEBP or .JPG format
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Emoji">
            <summary>
            Optional. Emoji associated with the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.SetName">
            <summary>
            Optional. Name of the sticker set to which the sticker belongs
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.PremiumAnimation">
            <summary>
            Optional. For premium <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular">regular</see> stickers,
            premium animation for the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.MaskPosition">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask">mask</see> stickers,
            the position where the mask should be placed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.CustomEmojiId">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">custom emoji</see> stickers,
            unique identifier of the custom emoji
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.NeedsRepainting">
            <summary>
            Optional. <see langword="true"/>, if the sticker must be repainted to a text color
            in <see cref="T:Telegram.Bot.Types.Message">messages</see>, the color of the Telegram Premium badge in emoji
            status, white color on <see cref="T:Telegram.Bot.Types.ChatPhoto">chat photos</see>, or another appropriate
            color in other places
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.StickerSet">
            <summary>
            This object represents a sticker set.
            <a href="https://core.telegram.org/bots/api#stickerset"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Name">
            <summary>
            Sticker set name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Title">
            <summary>
            Sticker set title
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.StickerType">
            <summary>
            Type of stickers in the set
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.IsAnimated">
            <summary>
            <see langword="true"/>, if the sticker set contains <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">animated stickers</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.IsVideo">
            <summary>
            <see langword="true"/>, if the sticker set contains <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">video stickers</see>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Stickers">
            <summary>
            List of all set stickers
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Thumbnail">
            <summary>
            Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Story">
            <summary>
            This object represents a message about a forwarded story in the chat. Currently holds no information.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Story.Chat">
            <summary>
            Chat that posted the story
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Story.Id">
            <summary>
            Unique identifier for the story in the chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.SwitchInlineQueryChosenChat">
            <summary>
            This object represents an inline button that switches the current user to inline mode in a chosen chat,
            with an optional default inline query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.Query">
            <summary>
            Optional. The default inline query to be inserted in the input field. If left empty,
            only the bot's username will be inserted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowUserChats">
            <summary>
            Optional. <see langword="true"/>, if private chats with users can be chosen
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowBotChats">
            <summary>
            Optional. <see langword = "true" />, if private chats with bots can be chosen
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowGroupChats">
            <summary>
            Optional. <see langword = "true" />, if group and supergroup chats can be chosen
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowChannelChats">
            <summary>
            Optional. <see langword = "true" />, if channel chats can be chosen
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.TextQuote">
            <summary>
            This object contains information about the quoted part of a message that is replied to by the given message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.Text">
            <summary>
            Text of the quoted part of a message that is replied to by the given message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.Entities">
            <summary>
            Optional. Special entities that appear in the quote. Currently, only bold, italic, underline,
            strikethrough, spoiler, and custom_emoji entities are kept in quotes.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.Position">
            <summary>
            Approximate quote position in the original message in UTF-16 code units as specified by the sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.IsManual">
            <summary>
            Optional.True, if the quote was chosen manually by the message sender.
            Otherwise, the quote was added automatically by the server.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.UserChatBoosts">
            <summary>
            This object represents a list of boosts added to a chat by a user.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserChatBoosts.Boosts">
            <summary>
            The list of boosts added to the chat by the user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.UserProfilePhotos">
            <summary>
            This object represent a user's profile pictures.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.TotalCount">
            <summary>
            Total number of profile pictures the target user has
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.Photos">
            <summary>
            Requested profile pictures (in up to 4 sizes each)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.UserShared">
            <summary>
            This object contains information about the user whose identifier was shared with the bot using a
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUser"/> button.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserShared.RequestId">
            <summary>
            Identifier of the request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserShared.UserId">
            <summary>
            Identifier of the shared user. This number may have more than 32 significant bits and some programming
            languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits,
            so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have
            access to the user and could be unable to use this identifier, unless the user is already known to the bot by
            some other means.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.UsersShared">
            <summary>
            This object contains information about the users whose identifiers were shared with the bot
            using a <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/> button.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UsersShared.RequestId">
            <summary>
            Identifier of the request
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UsersShared.UserIds">
            <summary>
            Identifiers of the shared users. These numbers may have more than 32 significant bits and some
            programming languages may have difficulty/silent defects in interpreting them. But they have
            at most 52 significant bits, so 64-bit integers or double-precision float types are safe for
            storing these identifiers. The bot may not have access to the users and could be unable to use
            these identifiers, unless the users are already known to the bot by some other means.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UsersShared.Users">
            <summary>
            Information about users shared with the bot.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Venue">
            <summary>
            This object represents a venue.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Location">
            <summary>
            Venue location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Title">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareType">
            <summary>
            Optional. Foursquare type of the venue. (For example, "arts_entertainment/default",
            "arts_entertainment/aquarium" or "food/icecream".)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.GooglePlaceId">
            <summary>
            Optional. Google Places identifier of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.GooglePlaceType">
            <summary>
            Optional. Google Places type of the venue. (See
            <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>.)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Video">
            <summary>
            This object represents a video file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Width">
            <summary>
            Video width as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Height">
            <summary>
            Video height as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Thumbnail">
            <summary>
            Optional. Video thumbnail
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.MimeType">
            <summary>
            Optional. Mime type of a file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatEnded">
            <summary>
            This object represents a service message about a video chat ended in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoChatEnded.Duration">
            <summary>
            Video chat duration in seconds
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatParticipantsInvited">
            <summary>
            This object represents a service message about new members invited to a video chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoChatParticipantsInvited.Users">
            <summary>
            Optional. New members that were invited to the voice chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatScheduled">
            <summary>
            This object represents a service message about a video chat scheduled in the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoChatScheduled.StartDate">
            <summary>
            Point in time when the voice chat is supposed to be started by a chat administrator
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatStarted">
            <summary>
            This object represents a service message about a video chat started in the chat. Currently holds no information.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoNote">
            <summary>
            This object represents a <a href="https://telegram.org/blog/video-messages-and-telescope">video message</a>
            (available in Telegram apps as of
            <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Length">
            <summary>
            Video width and height (diameter of the video message) as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Thumbnail">
            <summary>
            Optional. Video thumbnail
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Voice">
            <summary>
            This object represents a voice note.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.Duration">
            <summary>
            Duration of the audio in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebAppData">
            <summary>
            Contains data sent from a <a href="https://core.telegram.org/bots/webapps"></a>Web App to the bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebAppData.Data">
            <summary>
            The data. Be aware that a bad client can send arbitrary data in this field.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebAppData.ButtonText">
            <summary>
            Text of the web_app keyboard button, from which the Web App was opened. Be aware that a bad client can
            send arbitrary data in this field.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebAppInfo">
            <summary>
            Contains information about a <a href="https://core.telegram.org/bots/webapps ">Web App</a>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebAppInfo.Url">
            <summary>
            An HTTPS URL of a Web App to be opened with additional data as specified in
            <a href="https://core.telegram.org/bots/webapps#initializing-web-apps">Initializing Web Apps</a>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.WebAppInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.WebAppInfo"/> class with url
            </summary>
            <param name="url">
            An HTTPS URL of a Web App to be opened with additional data as specified in
            <a href="https://core.telegram.org/bots/webapps#initializing-web-apps">Initializing Web Apps</a>
            </param>
        </member>
        <member name="M:Telegram.Bot.Types.WebAppInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Types.WebAppInfo"/> class
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebhookInfo">
            <summary>
            Contains information about the current status of a webhook.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.Url">
            <summary>
            Webhook URL, may be empty if webhook is not set up
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.HasCustomCertificate">
            <summary>
            <see langword="true"/>, if a custom certificate was provided for webhook certificate checks
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.PendingUpdateCount">
            <summary>
            Number of updates awaiting delivery
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.IpAddress">
            <summary>
            Optional. Currently used webhook IP address
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastErrorDate">
            <summary>
            Optional. Time for the most recent error that happened when trying to deliver an update via webhook
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastErrorMessage">
            <summary>
            Optional. Error message in human-readable format for the most recent error that happened when trying to
            deliver an update via webhook
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastSynchronizationErrorDate">
            <summary>
            Optional. Unix time of the most recent error that happened when trying to synchronize available updates
            with Telegram datacenters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.MaxConnections">
            <summary>
            Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.AllowedUpdates">
            <summary>
            Optional. A list of update types the bot is subscribed to. Defaults to all update types except
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/>
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.WriteAccessAllowed">
            <summary>
            This object represents a service message about a user allowing a bot to write messages after adding
            it to the attachment menu, launching a Web App from a link, or accepting an explicit request from
            a Web App sent by the method
            <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestWriteAccess</a>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WriteAccessAllowed.FromRequest">
            <summary>
            Optional. <see langword="true"/>, if the access was granted after the user accepted an explicit request
            from a Web App sent by the method
            <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestWriteAccess</a>
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WriteAccessAllowed.WebAppName">
            <summary>
            Optional. Name of the Web App which was launched from a link
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.WriteAccessAllowed.FromAttachmentMenu">
            <summary>
            Optional. <see langword="true"/>, if the access was granted when the bot was added to the attachment
            or side menu
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.TypesTLConverters">
            <summary>Extension methods for converting between Client API and Bot API</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.Url(TL.MessageEntity)">
            <summary>
            Optional. For <see cref="T:TL.MessageEntityTextUrl"/> only, url that will be opened after user taps on the text
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.UserId(TL.MessageEntity)">
            <summary>
            Optional. For <see cref="T:TL.MessageEntityMentionName"/> only, the mentioned user id
            </summary>
            <remarks>Use <see cref="!:TelegramBotClient.User(long)"/> to obtain user details from this id</remarks>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.User(TL.MessageEntity,Telegram.Bot.ITelegramBotClient)">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.MessageEntityType.TextMention"/> only, the mentioned user
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.Language(TL.MessageEntity)">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.MessageEntityType.Pre"/> only, the programming language of the entity text
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.CustomEmojiId(TL.MessageEntity)">
            <summary>
            Optional. For <see cref="F:Telegram.Bot.Types.MessageEntityType.CustomEmoji"/> only, unique identifier of the custom emoji.
            Use <see cref="!:Requests.GetCustomEmojiStickersRequest"/> to get full information about the sticker
            </summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.User(TL.User)">
            <summary>Convert TL.User to Bot Types.User</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.Chat(TL.ChatBase)">
            <summary>Convert TL.Chat to Bot Types.Chat</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.Chat(TL.User)">
            <summary>Convert TL.User to Bot Types.Chat</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.Chat(Telegram.Bot.Types.User)">
            <summary>Convert Bot Types.User to Bot Types.Chat</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.ChatMember(TL.ChatParticipantBase,Telegram.Bot.Types.User)">
            <summary>Convert TL.ChatParticipantBase to Types.ChatMember</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.PhotoSizes(TL.PhotoBase)">
            <summary>Convert TL.Photo into Bot Types.PhotoSize[]</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.PhotoSize(TL.PhotoSizeBase,TL.InputFileLocationBase,System.Int32)">
            <summary>Convert TL.PhotoSize into Bot Types.PhotoSize</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.SetFileIds``1(``0,TL.InputFileLocationBase,System.Int32,System.String)">
            <summary>Encode TL.InputFileLocation as FileId/FileUniqueId strings into a Bot File structure</summary>
        </member>
        <member name="M:Telegram.Bot.Types.TypesTLConverters.ParseFileId(System.String,System.Boolean)">
            <summary>Decode FileId into TL.InputFileLocation</summary>
        </member>
        <member name="T:Telegram.Bot.Exceptions.ApiRequestException">
            <summary>
            Represents an API error
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.Parameters">
            <summary>
            Contains information about why a request was unsuccessful.
            </summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic)
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,Telegram.Bot.Types.ResponseParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class
            </summary>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <param name="parameters">Response parameters</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,Telegram.Bot.Types.ResponseParameters,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class
            </summary>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <param name="parameters">Response parameters</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Telegram.Bot.Exceptions.RequestException">
            <summary>
            Represents a request error
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode">
            <summary>
            <see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response
            </summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="httpStatusCode">
            <see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response
            </param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="httpStatusCode">
            <see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:Telegram.Bot.Extensions.ObjectExtensions">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="T:Telegram.Bot.Polling.IUpdateHandler">
            <summary>
            Processes <see cref="T:Telegram.Bot.Types.Update"/>s and errors.
            <para>See <see cref="T:Telegram.Bot.Polling.DefaultUpdateHandler"/> for a simple implementation</para>
            </summary>
        </member>
        <member name="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <summary>
            Handles an <see cref="T:Telegram.Bot.Types.Update"/>
            </summary>
            <param name="botClient">
            The <see cref="T:Telegram.Bot.ITelegramBotClient"/> instance of the bot receiving the <see cref="T:Telegram.Bot.Types.Update"/>
            </param>
            <param name="update">The <see cref="T:Telegram.Bot.Types.Update"/> to handle</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> which will notify that method execution should be cancelled
            </param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Polling.IUpdateHandler.HandlePollingErrorAsync(Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Handles an <see cref="T:System.Exception"/>
            </summary>
            <param name="botClient">
            The <see cref="T:Telegram.Bot.ITelegramBotClient"/> instance of the bot receiving the <see cref="T:System.Exception"/>
            </param>
            <param name="exception">The <see cref="T:System.Exception"/> to handle</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> which will notify that method execution should be cancelled
            </param>
            <returns></returns>
        </member>
        <member name="T:Telegram.Bot.Polling.IUpdateReceiver">
            <summary>
            Requests new <see cref="T:Telegram.Bot.Types.Update"/>s and processes them using provided <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> instance
            </summary>
        </member>
        <member name="M:Telegram.Bot.Polling.IUpdateReceiver.ReceiveAsync(Telegram.Bot.Polling.IUpdateHandler,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/>
            for each <see cref="T:Telegram.Bot.Types.Update"/>.
            <para>This method will block if awaited.</para>
            </summary>
            <param name="updateHandler">
            The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through
            <paramref name="cancellationToken"/>
            </returns>
        </member>
        <member name="T:Telegram.Bot.Polling.ReceiverOptions">
            <summary>
            Options to configure getUpdates requests
            </summary>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.Offset">
            <summary>
            Identifier of the first update to be returned. Will be ignored if
            <see cref="P:Telegram.Bot.Polling.ReceiverOptions.ThrowPendingUpdates"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.AllowedUpdates">
            <summary>
            Indicates which <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/>s are allowed to be received.
            In case of <c>null</c> the previous setting will be used
            </summary>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.Limit">
            <summary>
            Limits the number of updates to be retrieved. Values between 1-100 are accepted.
            Defaults to 100 when is set to <c>null</c>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the value doesn't satisfies constraints
            </exception>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.ThrowPendingUpdates">
            <summary>
            Indicates if all pending <see cref="T:Telegram.Bot.Types.Update"/>s should be thrown out before start
            polling. If set to <see langword="true"/> <see cref="P:Telegram.Bot.Polling.ReceiverOptions.AllowedUpdates"/> should be set to not
            <c>null</c>, otherwise <see cref="P:Telegram.Bot.Polling.ReceiverOptions.AllowedUpdates"/> will effectively be set to
            receive all <see cref="T:Telegram.Bot.Types.Update"/>s.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Polling.DefaultUpdateHandler">
            <summary>
            A very simple <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> implementation
            </summary>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.#ctor(System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateHandler"/> with the specified callback functions
            </summary>
            <param name="updateHandler">The function to invoke when an update is received</param>
            <param name="pollingErrorHandler">The function to invoke when an error occurs</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.HandlePollingErrorAsync(Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Telegram.Bot.Polling.DefaultUpdateReceiver">
            <summary>
            A simple <see cref="T:Telegram.Bot.Polling.IUpdateReceiver"/>> implementation that requests new updates and handles them sequentially
            </summary>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateReceiver.#ctor(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions)">
            <summary>
            Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/>>
            instance and optional <see cref="T:Telegram.Bot.Polling.ReceiverOptions"/>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateReceiver.ReceiveAsync(Telegram.Bot.Polling.IUpdateHandler,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.Polling.TelegramBotClientExtensions.ThrowOutPendingUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Will attempt to throw the last update using offset set to -1.
            </summary>
            <param name="botClient"></param>
            <param name="cancellationToken"></param>
            <returns>
            Update ID of the last <see cref="T:Telegram.Bot.Types.Update"/> increased by 1 if there were any
            </returns>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClientExtensions">
            <summary>
            Provides extension methods for <see cref="T:Telegram.Bot.ITelegramBotClient"/> that allow for <see cref="T:Telegram.Bot.Types.Update"/> polling
            </summary>
            <summary>
            Extension methods that map to requests from Bot API documentation
            </summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving``1(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>
            This method does not block. GetUpdates will be called AFTER the
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns
            </para>
            </summary>
            <typeparam name="TUpdateHandler">
            The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s
            </typeparam>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking  <paramref name="updateHandler"/>
            for each.
            <para>
            This method does not block. GetUpdates will be called AFTER the <paramref name="updateHandler"/> returns
            </para>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="pollingErrorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,System.Action{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken},System.Action{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking  <paramref name="updateHandler"/>
            for each.
            <para>
            This method does not block. GetUpdates will be called AFTER the <paramref name="updateHandler"/> returns
            </para>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="pollingErrorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.IUpdateHandler,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>
            This method does not block. GetUpdates will be called AFTER the
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns
            </para>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">
            The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s
            </param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync``1(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>
            This method will block if awaited. GetUpdates will be called AFTER the
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns
            </para>
            </summary>
            <typeparam name="TUpdateHandler">
            The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s
            </typeparam>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through
            <paramref name="cancellationToken"/>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync(Telegram.Bot.ITelegramBotClient,System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>
            This method will block if awaited. GetUpdates will be called AFTER the <paramref name="updateHandler"/>
            returns
            </para>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="pollingErrorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through
            <paramref name="cancellationToken"/>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync(Telegram.Bot.ITelegramBotClient,System.Action{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken},System.Action{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>
            This method will block if awaited. GetUpdates will be called AFTER the <paramref name="updateHandler"/>
            returns
            </para>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="pollingErrorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through
            <paramref name="cancellationToken"/>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.IUpdateHandler,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>
            Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>
            This method will block if awaited. GetUpdates will be called AFTER the
            <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns
            </para>
            </summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">
            The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s
            </param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through
            <paramref name="cancellationToken"/>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">
            <summary>
            Use this method to receive incoming updates using long polling
            (<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>)
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="offset">
            Identifier of the first update to be returned. Must be greater by one than the highest among the
            identifiers of previously received updates. By default, updates starting with the earliest unconfirmed
            update are returned. An update is considered confirmed as soon as
            <see cref="!:GetUpdatesAsync(ITelegramBotClient,GetUpdatesRequest,CancellationToken)"/> is called with an
            <paramref name="offset"/> higher than its <see cref="P:Telegram.Bot.Types.Update.Id"/>. The negative offset can be
            specified to retrieve updates starting from <paramref name="offset">-offset</paramref> update from the end
            of the updates queue. All previous updates will forgotten.
            </param>
            <param name="limit">
            Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </param>
            <param name="timeout">
            Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short
            polling should be used for testing purposes only.
            </param>
            <param name="allowedUpdates">
            A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types. See
            <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types. Specify an empty list to receive
            all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/> (default). If not specified, the previous
            setting will be used.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <remarks>
            <list type="number">
            <item>This method will not work if an outgoing webhook is set up</item>
            <item>
            In order to avoid getting duplicate updates, recalculate <paramref name="offset"/> after each server
            response
            </item>
            </list>
            </remarks>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhookAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to specify a URL and receive incoming updates via an outgoing webhook.
            Whenever there is an update for the bot, we will send an HTTPS POST request to the
            specified URL, containing a JSON-serialized <see cref="T:Telegram.Bot.Types.Update"/>. In case of
            an unsuccessful request, we will give up after a reasonable amount of attempts.
            Returns <see langword="true"/> on success.
            <para>
            If you'd like to make sure that the webhook was set by you, you can specify secret data
            in the parameter <see cref="!:SetWebhookRequest.SecretToken"/> . If specified, the request
            will contain a header "X-Telegram-Bot-Api-Secret-Token" with the secret token as content.
            </para>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="url">HTTPS URL to send updates to. Use an empty string to remove webhook integration</param>
            <param name="certificate">
            Upload your public key certificate so that the root certificate in use can be checked. See our
            <a href="https://core.telegram.org/bots/self-signed">self-signed guide</a> for details
            </param>
            <param name="ipAddress">
            The fixed IP address which will be used to send webhook requests instead of the IP address resolved
            through DNS
            </param>
            <param name="maxConnections">
            Maximum allowed number of simultaneous HTTPS connections to the webhook for update
            delivery, 1-100. Defaults to <i>40</i>. Use lower values to limit the load on your
            bot's server, and higher values to increase your bot's throughput.
            </param>
            <param name="allowedUpdates">
            <para>A list of the update types you want your bot to receive. For example, specify
            [<see cref="F:Telegram.Bot.Types.Enums.UpdateType.Message"/>, <see cref="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost"/>,
            <see cref="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery"/>] to only receive updates of these types. See
            <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/> for a complete list of available update types. Specify an empty list to receive
            all update types except <see cref="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember"/> (default). If not specified, the previous
            setting will be used
            </para>
            <para>
            Please note that this parameter doesn't affect updates created before the call to the
            <see cref="!:SetWebhookAsync(ITelegramBotClient,SetWebhookRequest,CancellationToken)"/>,
            so unwanted updates may be received for a short period of time.
            </para>
            </param>
            <param name="dropPendingUpdates">Pass <see langword="true"/> to drop all pending updates</param>
            <param name="secretToken">
            A secret token to be sent in a header "<c>X-Telegram-Bot-Api-Secret-Token</c>" in every webhook request,
            1-256 characters. Only characters <c>A-Z</c>, <c>a-z</c>, <c>0-9</c>, <c>_</c> and <c>-</c>
            are allowed. The header is useful to ensure that the request comes from a webhook set by you.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <remarks>
            <list type="number">
            <item>
            You will not be able to receive updates using
            <see cref="!:GetUpdatesAsync(ITelegramBotClient,GetUpdatesRequest,CancellationToken)"/> for as long as
            an outgoing webhook is set up
            </item>
            <item>
            To use a self-signed certificate, you need to upload your
            <a href="https://core.telegram.org/bots/self-signed">public key certificate</a> using
            <paramref name="certificate"/> parameter. Please upload as <see cref="T:Telegram.Bot.Types.InputFileStream"/>, sending a
            string will not work
            </item>
            <item>Ports currently supported for webhooks: <b>443, 80, 88, 8443</b></item>
            </list>
            If you're having any trouble setting up webhooks, please check out this
            <a href="https://core.telegram.org/bots/webhooks">amazing guide to Webhooks</a>.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteWebhookAsync(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to remove webhook integration if you decide to switch back to
            <see cref="!:GetUpdatesAsync(ITelegramBotClient,GetUpdatesRequest,CancellationToken)"/>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="dropPendingUpdates">Pass <see langword="true"/> to drop all pending updates</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetWebhookInfoAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to get current webhook status.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success, returns a <see cref="T:Telegram.Bot.Types.WebhookInfo"/> object. If the bot is using
            <see cref="!:GetUpdatesAsync(ITelegramBotClient,GetUpdatesRequest,CancellationToken)"/>,
            will return an object with the <see cref="P:Telegram.Bot.Types.WebhookInfo.Url"/> field empty.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMeAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            A simple method for testing your bot’s auth token.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns basic information about the bot in form of a <see cref="T:Telegram.Bot.Types.User"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LogOutAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to log out from the cloud Bot API server before launching the bot locally. You <b>must</b>
            log out the bot before running it locally, otherwise there is no guarantee that the bot will receive
            updates. After a successful call, you can immediately log in on a local server, but will not be able to
            log in back to the cloud Bot API server for 10 minutes.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to close the bot instance before moving it from one local server to another. You need to
            delete the webhook before calling this method to ensure that the bot isn't launched again after server
            restart. The method will return error 429 in the first 10 minutes after the bot is launched.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendTextMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.Int32},System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send text messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="text">Text of the message to be sent, 1-4096 characters after entities parsing</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for more
            details
            </param>
            <param name="entities">
            List of special entities that appear in message text, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a
            reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to forward messages of any kind. Service messages can't be forwarded.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to forward multiple messages of any kind. If some of the specified messages can't be found
            or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded.
            Album grouping is kept for forwarded messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original messages were sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageIds">
            Identifiers of 1-100 messages in the chat from_chat_id to forward.
            The identifiers must be specified in a strictly increasing order.
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound.
            </param>
            <param name="protectContent">
            Protects the contents of sent messages from forwarding and saving
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to copy messages of any kind. Service messages and invoice messages can't be copied.
            The method is analogous to the method
            <see cref="!:ForwardMessageAsync(ITelegramBotClient,ForwardMessageRequest,CancellationToken)"/>,
            but the copied message doesn't have a link to the original message.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="caption">
            New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption
            is kept
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent message on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32[],System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to copy messages of any kind. If some of the specified messages can't be found or copied,
            they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages
            can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field
            <see cref="P:Telegram.Bot.Types.Poll.CorrectOptionId">CorrectOptionId</see> is known to the bot. The method is analogous
            to the method
            <see cref="!:ForwardMessagesAsync(ITelegramBotClient,ForwardMessagesRequest,CancellationToken)"/>, but the
            copied messages don't have a link to the original message. Album grouping is kept for copied messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original messages were sent
            (or channel username in the format <c>@channelusername</c>)
            </param>
            <param name="messageIds">
            Identifiers of 1-100 messages in the chat <paramref name="fromChatId"/> to copy.
            The identifiers must be specified in a strictly increasing order.
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound.
            </param>
            <param name="protectContent">
            Protects the contents of sent messages from forwarding and saving
            </param>
            <param name="removeCaption">
            Pass <see langword="true"/> to copy the messages without their captions
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send photos.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="photo">
            Photo to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a photo that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from
            the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size.
            The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="caption">
            Photo caption (may also be used when resending photos by <see cref="T:Telegram.Bot.Types.InputFileId"/>),
            0-1024 characters after entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="hasSpoiler">
            Pass <see langword="true"/> if the photo needs to be covered with a spoiler animation
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAudioAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Nullable{System.Int32},System.String,System.String,Telegram.Bot.Types.InputFile,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display them in the music player.
            Your audio must be in the .MP3 or .M4A format. Bots can currently send audio files of up to 50 MB in size,
            this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="audio">
            Audio file to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send an audio file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio
            file from the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="caption">Audio caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="thumbnail">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height
            should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be
            reused and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDocumentAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send general files. Bots can currently send files of any type of up to 50 MB in size,
            this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="document">
            File to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a file that exists on the
            Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet,
            or upload a new one using multipart/form-data
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="thumbnail">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="caption">
            Document caption (may also be used when resending documents by file_id), 0-1024 characters after
            entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="disableContentTypeDetection">
            Disables automatic server-side content type detection for files uploaded using multipart/form-data
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as
            <see cref="T:Telegram.Bot.Types.Document"/>). Bots can currently send video files of up to 50 MB in size, this limit may be
            changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="video">
            Video to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a video that exists on
            the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the
            Internet, or upload a new video using multipart/form-data
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="width">Video width</param>
            <param name="height">Video height</param>
            <param name="thumbnail">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="caption">
            Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="hasSpoiler">
            Pass <see langword="true"/> if the video needs to be covered with a spoiler animation
            </param>
            <param name="supportsStreaming">Pass <see langword="true"/>, if the uploaded video is suitable for streaming</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAnimationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). Bots can currently
            send animation files of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="animation">
            Animation to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send an animation that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an
            animation from the Internet, or upload a new animation using multipart/form-data
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="duration">Duration of sent animation in seconds</param>
            <param name="width">Animation width</param>
            <param name="height">Animation height</param>
            <param name="thumbnail">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="caption">
            Animation caption (may also be used when resending animation by <see cref="T:Telegram.Bot.Types.InputFileId"/>),
            0-1024 characters after entities parsing
            </param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="hasSpoiler">
            Pass <see langword="true"/> if the animation needs to be covered with a spoiler animation
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVoiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Nullable{System.Int32},System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice
            message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent
            as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>). Bots can currently send voice messages of up to 50 MB
            in size, this limit may be changed in the future.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="voice">
            Audio file to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a file that exists
            on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from
            the Internet, or upload a new one using multipart/form-data
            </param>
            <param name="caption">Voice message caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="duration">Duration of the voice message in seconds</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNoteAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            As of <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>, Telegram clients
            support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="videoNote">
            Video note to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a video note that
            exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. Sending
            video notes by a URL is currently unsupported
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="length">Video width and height, i.e. diameter of the video message</param>
            <param name="thumbnail">
            Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.
            The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should
            not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused
            and can be only uploaded as a new file, so you can pass "attach://&lt;file_attach_name&gt;" if the
            thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendMediaGroupAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia},System.Nullable{System.Int32},System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio
            files can be only grouped in an album with messages of the same type.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="media">An array describing messages to be sent, must include 2-10 items</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, an array of <see cref="T:Telegram.Bot.Types.Message"/>s that were sent is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send point on the map.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="latitude">Latitude of location</param>
            <param name="longitude">Longitude of location</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="livePeriod">
            Period in seconds for which the location will be updated, should be between 60 and 86400
            </param>
            <param name="heading">
            For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
            if specified
            </param>
            <param name="proximityAlertRadius">
            For live locations, a maximum distance for proximity alerts about approaching another chat member,
            in meters. Must be between 1 and 100000 if specified
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="horizontalAccuracy">
            The radius of uncertainty for the location, measured in meters; 0-1500
            </param>
            <param name="heading">
            Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified
            </param>
            <param name="proximityAlertRadius">
            Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Double,System.Double,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit live location messages. A location can be edited until its
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires or editing is explicitly disabled by a call to
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="horizontalAccuracy">
            The radius of uncertainty for the location, measured in meters; 0-1500
            </param>
            <param name="heading">
            Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified
            </param>
            <param name="proximityAlertRadius">
            Maximum distance for proximity alerts about approaching another chat member, in meters.
            Must be between 1 and 100000 if specified
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to stop updating a live location message before
            <see cref="P:Telegram.Bot.Types.Location.LivePeriod"/> expires.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVenueAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send information about a venue.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="foursquareId">Foursquare identifier of the venue</param>
            <param name="foursquareType">
            Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
            “arts_entertainment/aquarium” or “food/icecream”.)
            </param>
            <param name="googlePlaceId">Google Places identifier of the venue</param>
            <param name="googlePlaceType">
            Google Places type of the venue. (See
            <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>)
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
            <a href="https://core.telegram.org/bots/api#sendvenue"/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendContactAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send phone contacts.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="lastName">Contact's last name</param>
            <param name="vCard">Additional data about the contact in the form of a vCard, 0-2048 bytes</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the action will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPollAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Boolean,Telegram.Bot.Types.Enums.PollType,System.Boolean,System.Nullable{System.Int32},System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send a native poll.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="question">Poll question, 1-300 characters</param>
            <param name="options">A list of answer options, 2-10 strings 1-100 characters each</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="isAnonymous"><see langword="true"/>, if the poll needs to be anonymous, defaults to <see langword="true"/></param>
            <param name="type">
            Poll type, <see cref="F:Telegram.Bot.Types.Enums.PollType.Quiz"/> or <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular"/>,
            defaults to <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular"/>
            </param>
            <param name="allowsMultipleAnswers">
            <see langword="true"/>, if the poll allows multiple answers, ignored for polls in quiz mode,
            defaults to <see langword="false"/>
            </param>
            <param name="correctOptionId">
            0-based identifier of the correct answer option, required for polls in quiz mode
            </param>
            <param name="explanation">
            Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll,
            0-200 characters with at most 2 line feeds after entities parsing
            </param>
            <param name="explanationParseMode">
            Mode for parsing entities in the explanation. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a>
            for more details
            </param>
            <param name="explanationEntities">
            List of special entities that appear in the poll explanation, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="openPeriod">
            Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together
            with <paramref name="closeDate"/>
            </param>
            <param name="closeDate">
            Point in time when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds
            in the future. Can't be used together with <paramref name="openPeriod"/>
            </param>
            <param name="isClosed">
            Pass <see langword="true"/>, if the poll needs to be immediately closed. This can be useful for poll preview
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the action will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},Telegram.Bot.Types.Enums.Emoji,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send an animated emoji that will display a random value.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="emoji">
            Emoji on which the dice throw animation is based. Currently, must be one of <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>,
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football"/>,
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/> or <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine"/>. Dice can have values 1-6 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>, <see cref="F:Telegram.Bot.Types.Enums.Emoji.Darts"/> and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Bowling"/>, values 1-5 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.Basketball"/> and <see cref="F:Telegram.Bot.Types.Enums.Emoji.Football"/>, and values 1-64 for
            <see cref="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine"/>. Defaults to <see cref="F:Telegram.Bot.Types.Enums.Emoji.Dice"/>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the action will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendChatActionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method when you need to tell the user that something is happening on the bot’s side. The status is
            set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).
            </summary>
            <example>
            <para>
            The <a href="https://t.me/imagebot">ImageBot</a> needs some time to process a request and upload the
            image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may
            use <see cref="!:SendChatActionAsync(ITelegramBotClient,SendChatActionRequest,CancellationToken)"/> with
            <see cref="!:SendChatActionRequest.Action"/> = <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/>.
            The user will see a “sending photo” status for the bot.
            </para>
            <para>
            We only recommend using this method when a response from the bot will take a <b>noticeable</b> amount of
            time to arrive.
            </para>
            </example>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="chatAction">
            Type of action to broadcast. Choose one, depending on what the user is about to receive:
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.Typing"/> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendTextMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.Int32},System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">text messages</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto"/> for
            <see cref="!:SendPhotoAsync(ITelegramBotClient,SendPhotoRequest,CancellationToken)">photos</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo"/> for
            <see cref="!:SendVideoAsync(ITelegramBotClient,SendVideoRequest,CancellationToken)">videos</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice"/> for
            <see cref="!:SendVoiceAsync(ITelegramBotClient,SendVoiceRequest,CancellationToken)">voice notes</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument"/> for
            <see cref="!:SendDocumentAsync(ITelegramBotClient,SendDocumentRequest,CancellationToken)">general files</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation"/> for
            <see cref="!:SendLocationAsync(ITelegramBotClient,SendLocationRequest,CancellationToken)">location data</see>,
            <see cref="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote"/> or <see cref="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote"/> for
            <see cref="!:SendVideoNoteAsync(ITelegramBotClient,SendVideoNoteRequest,CancellationToken)">video notes</see>
            </param>
            <param name="messageThreadId">Unique identifier for the target message thread; supergroups only</param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the action will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMessageReactionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReactionType},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the chosen reactions on a message. Service messages can't be reacted to.
            Automatically forwarded messages from a channel to its discussion group have the same
            available reactions as messages in the channel.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">
            Identifier of the target message. If the message belongs to a media group, the reaction
            is set to the first non-deleted message in the group instead.
            </param>
            <param name="reaction">
            New list of reaction types to set on the message. Currently, as non-premium users, bots can
            set up to one reaction per message. A custom emoji reaction can be used if it is either
            already present on the message or explicitly allowed by chat administrators.
            </param>
            <param name="isBig">
            Pass <see langword="true"/> to set the reaction with a big animation
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserProfilePhotosAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to get a list of profile pictures for a user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="offset">
            Sequential number of the first photo to be returned. By default, all photos are returned
            </param>
            <param name="limit">
            Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can
            download files of up to 20MB in size. The file can then be downloaded via the link
            <c>https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;</c>, where <c>&lt;file_path&gt;</c>
            is taken from the response. It is guaranteed that the link will be valid for at least 1 hour.
            When the link expires, a new one can be requested by calling
            <see cref="!:GetFileAsync(ITelegramBotClient,GetFileRequest,CancellationToken)"/> again.
            </summary>
            <remarks>
            You can use <see cref="M:Telegram.Bot.ITelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)"/> or
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetInfoAndDownloadFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.IO.Stream,System.Threading.CancellationToken)"/> methods to download the file
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="fileId">File identifier to get info about</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetInfoAndDownloadFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Use this method to get basic info about a file download it. For the moment, bots can download files
            of up to 20MB in size.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="fileId">File identifier to get info about</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.DateTime},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and
            channels, the user will not be able to return to the chat on their own using invite links, etc., unless
            <see cref="!:UnbanChatMemberAsync(ITelegramBotClient, ChatId, long, bool?, CancellationToken)">unbanned</see>
            first. The bot must be an administrator in the chat for this to work and must have the appropriate
            admin rights.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target group or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="untilDate">
            Date when the user will be unbanned. If user is banned for more than 366 days or less than 30 seconds
            from the current time they are considered to be banned forever. Applied for supergroups and channels only
            </param>
            <param name="revokeMessages">
            Pass <see langword="true"/> to delete all messages from the chat for the user that is being removed.
            If <see langword="false"/>, the user will be able to see messages in the group that were sent before the user was
            removed. Always <see langword="true"/> for supergroups and channels
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to unban a previously banned user in a supergroup or channel. The user will <b>not</b>
            return to the group or channel automatically, but will be able to join via link, etc. The bot must be an
            administrator for this to work. By default, this method guarantees that after the call the user is not a
            member of the chat, but will be able to join it. So if the user is a member of the chat they will also be
            <b>removed</b> from the chat. If you don't want this, use the parameter <paramref name="onlyIfBanned"/>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target group or username of the target supergroup or channel
            (in the format <c>@username</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="onlyIfBanned">Do nothing if the user is not banned</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RestrictChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup
            for this to work and must have the appropriate admin rights. Pass <see langword="true"/> for all permissions to
            lift restrictions from a user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="permissions">New user permissions</param>
            <param name="useIndependentChatPermissions">
            Pass <see langword="true"/> if chat permissions are set independently. Otherwise, the
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendOtherMessages"/>, and <see cref="P:Telegram.Bot.Types.ChatPermissions.CanAddWebPagePreviews"/>
            permissions will imply the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/>,
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendAudios"/>, <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendDocuments"/>,
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendPhotos"/>, <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendVideos"/>,
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendVideoNotes"/>, and <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendVoiceNotes"/>
            permissions; the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendPolls"/> permission will imply the
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/> permission.
            </param>
            <param name="untilDate">Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PromoteChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in
            the chat for this to work and must have the appropriate admin rights. Pass <c><see langword="false"/></c> for
            all boolean parameters to demote a user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="isAnonymous">
            Pass <see langword="true"/>, if the administrator's presence in the chat is hidden
            </param>
            <param name="canManageChat">
            Pass <see langword="true"/>, if the administrator can access the chat event log, chat statistics, message
            statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
            Implied by any other administrator privilege
            </param>
            <param name="canPostMessages">
            Pass <see langword="true"/>, if the administrator can create channel posts, channels only
            </param>
            <param name="canEditMessages">
            Pass <see langword="true"/>, if the administrator can edit messages of other users, channels only
            </param>
            <param name="canDeleteMessages">
            Pass <see langword="true"/>, if the administrator can delete messages of other users
            </param>
            <param name="canPostStories">
            Pass <see langword="true"/> if the administrator can post stories in the channel; channels only
            </param>
            <param name="canEditStories">
            Pass <see langword="true"/> if the administrator can edit stories posted by other users; channels only
            </param>
            <param name="canDeleteStories">
            Pass <see langword="true"/> if the administrator can delete stories posted by other users; channels only
            </param>
            <param name="canManageVideoChats">
            Pass <see langword="true"/>, if the administrator can manage voice chats, supergroups only
            </param>
            <param name="canRestrictMembers">
            Pass <see langword="true"/>, if the administrator can restrict, ban or unban chat members
            </param>
            <param name="canPromoteMembers">
            Pass <see langword="true"/>, if the administrator can add new administrators with a subset of his own
            privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators
            that were appointed by him)
            </param>
            <param name="canChangeInfo">
            Pass <see langword="true"/>, if the administrator can change chat title, photo and other settings
            </param>
            <param name="canInviteUsers">
            Pass <see langword="true"/>, if the administrator can invite new users to the chat
            </param>
            <param name="canPinMessages">
            Pass <see langword="true"/>, if the administrator can pin messages, supergroups only
            </param>
            <param name="canManageTopic">
            Pass <see langword="true"/> if the user is allowed to create, rename, close, and reopen forum topics,
            supergroups only
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatAdministratorCustomTitleAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to set a custom title for an administrator in a supergroup promoted by the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="customTitle">
            New custom title for the administrator; 0-16 characters, emoji are not allowed
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatSenderChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to ban a channel chat in a supergroup or a channel. The owner of the chat will not be
            able to send messages and join live streams on behalf of the chat, unless it is unbanned first. The bot
            must be an administrator in the supergroup or channel for this to work and must have the appropriate
            administrator rights. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="senderChatId">Unique identifier of the target sender chat</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be
            an administrator for this to work and must have the appropriate administrator rights.
            Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="senderChatId">Unique identifier of the target sender chat</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPermissionsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to set default chat permissions for all members. The bot must be an administrator
            in the group or a supergroup for this to work and must have the can_restrict_members admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="permissions">New default chat permissions</param>
            <param name="useIndependentChatPermissions">
            Pass <see langword="true"/> if chat permissions are set independently. Otherwise, the
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendOtherMessages"/>, and <see cref="P:Telegram.Bot.Types.ChatPermissions.CanAddWebPagePreviews"/>
            permissions will imply the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/>,
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendAudios"/>, <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendDocuments"/>,
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendPhotos"/>, <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendVideos"/>,
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendVideoNotes"/>, and <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendVoiceNotes"/>
            permissions; the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendPolls"/> permission will imply the
            <see cref="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages"/> permission.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to generate a new primary invite link for a chat; any previously generated primary
            link is revoked. The bot must be an administrator in the chat for this to work and must have the
            appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to create an additional invite link for a chat. The bot must be an administrator
            in the chat for this to work and must have the appropriate admin rights. The link can be revoked
            using the method
            <see cref="!:RevokeChatInviteLinkAsync(ITelegramBotClient,RevokeChatInviteLinkRequest,CancellationToken)"/>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">
            Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999
            </param>
            <param name="createsJoinRequest">
            Set to <see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators.
            If <see langword="true"/>, <paramref name="memberLimit"/> can't be specified
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit a non-primary invite link created by the bot. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="inviteLink">The invite link to edit</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">
            Maximum number of users that can be members of the chat simultaneously after joining the chat
            via this invite link; 1-99999
            </param>
            <param name="createsJoinRequest">
            Set to <see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators.
            If <see langword="true"/>, <paramref name="memberLimit"/> can't be specified
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new
            link is automatically generated. The bot must be an administrator in the chat for this to work and
            must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="inviteLink">The invite link to revoke</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns the revoked invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ApproveChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to approve a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeclineChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to decline a chat join request. The bot must be an administrator in the chat for this to
            work and must have the <see cref="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers"/> administrator right.
            Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFileStream,System.Threading.CancellationToken)">
            <summary>
            Use this method to set a new profile photo for the chat. Photos can't be changed for private chats.
            The bot must be an administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="photo">New chat photo, uploaded using multipart/form-data</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an
            administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel (in the format @channelusername)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatTitleAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the title of a chat. Titles can't be changed for private chats. The bot
            must be an administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="title">New chat title, 1-255 characters</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatDescriptionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the description of a group, a supergroup or a channel. The bot must
            be an administrator in the chat for this to work and must have the appropriate admin rights
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="description">New chat Description, 0-255 characters</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PinChatMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private
            chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of a message to pin</param>
            <param name="disableNotification">
            Pass <c><see langword="true"/></c>, if it is not necessary to send a notification to all chat members about
            the new pinned message. Notifications are always disabled in channels and private chats
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinChatMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Use this method to remove a message from the list of pinned messages in a chat. If the chat is not
            a private chat, the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">
            Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date)
            will be unpinned
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllChatMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat,
            the bot must be an administrator in the chat for this to work and must have the
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages"/>' admin right in a supergroup or
            '<see cref="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages"/>' admin right in a channel
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LeaveChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method for your bot to leave a group, supergroup or channel.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get up to date information about the chat (current name of the user for one-on-one
            conversations, current username of a user, group or channel, etc.)
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.Chat"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAdministratorsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get a list of administrators in a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success, returns an Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects that contains information about all chat
            administrators except other bots. If the chat is a group or a supergroup and no administrators were
            appointed, only the creator will be returned
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberCountAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the number of members in a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns <see cref="T:System.Int32"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to get information about a member of a chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target supergroup or channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.ChatMember"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatStickerSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the
            chat for this to work and must have the appropriate admin rights. Use the field
            <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally returned in
            <see cref="!:GetChatAsync(ITelegramBotClient,GetChatRequest,CancellationToken)"/> requests to check if the bot
            can use this method.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="stickerSetName">Name of the sticker set to be set as the group sticker set</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatStickerSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the
            chat for this to work and must have the appropriate admin rights. Use the field
            <see cref="P:Telegram.Bot.Types.Chat.CanSetStickerSet"/> optionally returned in
            <see cref="!:GetChatAsync(ITelegramBotClient,GetChatRequest,CancellationToken)"/> requests to check if the bot
            can use this method
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickersAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>
            Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns an Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{Telegram.Bot.Types.Color},System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for
            this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights.
            Returns information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="name">Topic name, 1-128 characters</param>
            <param name="iconColor">
            Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E),
            13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
            </param>
            <param name="iconCustomEmojiId">
            Unique identifier of the custom emoji shown as the topic icon. Use
            <see cref="!:GetForumTopicIconStickersAsync(ITelegramBotClient,GetForumTopicIconStickersRequest,CancellationToken)"/>
            to get all allowed custom emoji identifiers
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator
            in the chat for this to work and must have <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator
            rights, unless it is the creator of the topic. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="name">
            New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
            </param>
            <param name="iconCustomEmojiId">
            New unique identifier of the custom emoji shown as the topic icon. Use
            <see cref="!:GetForumTopicIconStickersRequest"/> to get all allowed custom emoji identifiers. Pass an empty
            string to remove the icon. If not specified, the current icon will be kept
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat
            for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights,
            unless it is the creator of the topic. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReopenForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the
            chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator
            rights, unless it is the creator of the topic. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be
            an administrator in the chat for this to work and must have the
            <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights. Returns <see langword="true"/>
            on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllForumTopicMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the
            chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanPinMessages"/> administrator
            right in the supergroup. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an
            administrator in the chat for this to work and must have <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/>
            administrator rights. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="name">New topic name, 1-128 characters</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator
            in the chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/>
            administrator rights. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReopenGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an
            administrator in the chat for this to work and must have the
            <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator rights. The topic will be automatically
            unhidden if it was hidden. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.HideGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the
            chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/> administrator
            rights. The topic will be automatically closed if it was open. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnhideGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to uhhide the 'General' topic in a forum supergroup chat. The bot must be an administrator
            in the chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics"/>
            administrator rights. Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllGeneralForumTopicMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>
            Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator
            in the chat for this to work and must have the <see cref="P:Telegram.Bot.Types.ChatAdministratorRights.CanPinMessages"/>
            administrator right in the supergroup.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@supergroupusername</c>)
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Boolean,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to send answers to callback queries sent from
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboards</see>. The answer will be displayed
            to the user as a notification at the top of the chat screen or as an alert
            </summary>
            <remarks>
            Alternatively, the user can be redirected to the specified Game URL.For this option to work, you must
            first create a game for your bot via <c>@BotFather</c> and accept the terms. Otherwise, you may use
            links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="callbackQueryId">Unique identifier for the query to be answered</param>
            <param name="text">
            Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
            </param>
            <param name="showAlert">
            If <see langword="true"/>, an alert will be shown by the client instead of a notification at the top of the chat
            screen. Defaults to <see langword="false"/>
            </param>
            <param name="url">
            URL that will be opened by the user's client. If you have created a
            <a href="https://core.telegram.org/bots/api#game">Game</a> and accepted the conditions via
            <c>@BotFather</c>, specify the URL that opens your game — note that this will only work if the query
            comes from a callback_game button
            <para>
            Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter
            </para>
            </param>
            <param name="cacheTime">
            The maximum amount of time in seconds that the result of the callback query may be cached client-side.
            Telegram apps will support caching starting in version 3.14
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserChatBoostsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the list of boosts added to a chat by a user.
            Requires administrator rights in the chat.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the chat or username of the channel (in the format <c>@channelusername</c>)
            </param>
            <param name="userId">
            Unique identifier of the target user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.UserChatBoosts"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetBusinessConnectionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get information about the connection of the bot with a business account.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="businessConnectionId">
            Unique identifier of the business connection
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Returns a <see cref="T:Telegram.Bot.Types.BusinessConnection"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyCommandsAsync(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand},Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the list of the bot’s commands.
            See <a href="https://core.telegram.org/bots#commands"/> for more details about bot commands
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="commands">
            A list of bot commands to be set as the list of the bot’s commands. At most 100 commands can be specified
            </param>
            <param name="scope">
            An object, describing scope of users for which the commands are relevant.
            Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given
            <paramref name="scope"/>, for whose language there are no dedicated commands
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMyCommandsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete the list of the bot’s commands for the given <paramref name="scope"/> and
            <paramref name="languageCode">user language</paramref>. After deletion,
            <a href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</a>
            will be shown to affected users
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="scope">
            An object, describing scope of users for which the commands are relevant.
            Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given
            <paramref name="scope"/>, for whose language there are no dedicated commands
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyCommandsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current list of the bot’s commands for the given <paramref name="scope"/> and
            <paramref name="languageCode">user language</paramref>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="scope">
            An object, describing scope of users. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code or an empty string
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> on success. If commands aren't set, an empty list is returned
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyNameAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the bot's name.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">
            New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language
            there is no dedicated name.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyNameAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current bot name for the given user language.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code or an empty string
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns <see cref="T:Telegram.Bot.Types.BotName"/> on success.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the bot's description, which is shown in the chat
            with the bot if the chat is empty.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="description">
            New bot description; 0-512 characters. Pass an empty string to remove the
            dedicated description for the given language.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, the description will be applied
            to all users for whose language there is no dedicated description.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current <see cref="T:Telegram.Bot.Types.BotDescription">bot description</see>
            for the given <paramref name="languageCode">user language</paramref>.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code or an empty string
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns <see cref="T:Telegram.Bot.Types.BotDescription"/> on success.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyShortDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the bot's short description,which is shown on
            the bot's profile page and is sent together with the link when users share the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shortDescription">
            New short description for the bot; 0-120 characters.
            Pass an empty string to remove the dedicated short description for the given language.
            </param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code. If empty, the short description will be
            applied to all users for whose language there is no dedicated short description.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyShortDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current bot <see cref="T:Telegram.Bot.Types.BotShortDescription">short description</see>
            for the given <paramref name="languageCode">user language</paramref>.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="languageCode">
            A two-letter ISO 639-1 language code or an empty string
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns <see cref="T:Telegram.Bot.Types.BotShortDescription"/> on success.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatMenuButtonAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},Telegram.Bot.Types.MenuButton,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the bot’s menu button in a private chat, or the default menu button.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target private chat. If not specified, default bot’s menu button will be changed
            </param>
            <param name="menuButton">
            An object for the new bot’s menu button. Defaults to <see cref="T:Telegram.Bot.Types.MenuButtonDefault"/>
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMenuButtonAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current value of the bot’s menu button in a private chat,
            or the default menu button.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target private chat. If not specified, default bot’s menu button will be returned
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns><see cref="T:Telegram.Bot.Types.MenuButton"/> set for the given chat id or a default one</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDefaultAdministratorRightsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatAdministratorRights,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the default administrator rights requested by the bot when it's added as an
            administrator to groups or channels. These rights will be suggested to users, but they are free to modify
            the list before adding the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="rights">
            An object describing new default administrator rights. If not specified, the default administrator rights
            will be cleared.
            </param>
            <param name="forChannels">
            Pass <see langword="true"/> to change the default administrator rights of the bot in channels. Otherwise, the default
            administrator rights of the bot for groups and supergroups will be changed.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDefaultAdministratorRightsAsync(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to get the current default administrator rights of the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="forChannels">
            Pass <see langword="true"/> to change the default administrator rights of the bot in channels. Otherwise, the default
            administrator rights of the bot for groups and supergroups will be changed.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>Default or channel <see cref="T:Telegram.Bot.Types.ChatAdministratorRights"/> </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageTextAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit text and game messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="entities">
            List of special entities that appear in message text, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageTextAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit text and game messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="entities">
            List of special entities that appear in message text, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaptionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit captions of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Nullable{Telegram.Bot.Types.Enums.ParseMode},System.Collections.Generic.IEnumerable{TL.MessageEntity},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit captions of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">
            Mode for parsing entities in the new caption. See
            <a href="https://core.telegram.org/bots/api#formatting-options">formatting</a> options for
            more details
            </param>
            <param name="captionEntities">
            List of special entities that appear in the caption, which can be specified instead
            of <see cref="T:Telegram.Bot.Types.Enums.ParseMode"/>
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMediaAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit animation, audio, document, photo, or video messages. If a message is part of
            a message album, then it can be edited only to an audio for audio albums, only to a document for document
            albums and to a photo or a video otherwise. Use a previously uploaded file via its
            <see cref="T:Telegram.Bot.Types.InputFileId"/> or specify a URL
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="media">A new media content of the message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMediaAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit animation, audio, document, photo, or video messages. If a message is part of
            a message album, then it can be edited only to an audio for audio albums, only to a document for document
            albums and to a photo or a video otherwise. Use a previously uploaded file via its
            <see cref="T:Telegram.Bot.Types.InputFileId"/> or specify a URL
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="media">A new media content of the message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkupAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit only the reply markup of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success the edited <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkupAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to edit only the reply markup of messages.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopPollAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to stop a poll which was sent by the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the original message with the poll</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the stopped <see cref="T:Telegram.Bot.Types.Poll"/> with the final results is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a message, including service messages, with the following limitations:
            <list type="bullet">
            <item>A message can only be deleted if it was sent less than 48 hours ago</item>
            <item>A dice message in a private chat can only be deleted if it was sent more than 24 hours ago</item>
            <item>Bots can delete outgoing messages in private chats, groups, and supergroups</item>
            <item>Bots can delete incoming messages in private chats</item>
            <item>Bots granted can_post_messages permissions can delete outgoing messages in channels</item>
            <item>If the bot is an administrator of a group, it can delete any message there</item>
            <item>
            If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there
            </item>
            </list>
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageId">Identifier of the message to delete</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Use this method to delete multiple messages simultaneously.
            If some of the specified messages can't be found, they are skipped.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="messageIds">
            Identifiers of 1-100 messages to delete. See
            <see cref="!:DeleteMessageAsync(ITelegramBotClient,DeleteMessageRequest,CancellationToken)"/> for limitations
            on which messages can be deleted
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendStickerAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="sticker">
            Sticker to send. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as String to send a file that
            exists on the Telegram servers (recommended), pass an HTTP URL as a String
            for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP
            or .TGS sticker using multipart/form-data.
            Video stickers can only be sent by a <see cref="T:Telegram.Bot.Types.InputFileId"/>.
            Animated stickers can't be sent via an HTTP URL.
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="emoji">
            Emoji associated with the sticker; only for just uploaded stickers
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">
            Protects the contents of sent messages from forwarding and saving
            </param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the action will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get a sticker set.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="name">
            Name of the sticker set
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success, a <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetCustomEmojiStickersAsync(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Use this method to get information about custom emoji stickers by their identifiers.
            Returns an Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="customEmojiIds">List of custom emoji identifiers. At most 200 custom emoji
            identifiers can be specified.</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UploadStickerFileAsync(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InputFileStream,Telegram.Bot.Types.Enums.StickerFormat,System.Threading.CancellationToken)">
            <summary>
            Use this method to upload a file with a sticker for later use in the
            <see cref="!:CreateNewStickerSetRequest"/> and <see cref="!:AddStickerToSetRequest"/>
            methods (the file can be used multiple times).
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="userId">
            User identifier of sticker file owner
            </param>
            <param name="sticker">
            A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format.
            </param>
            <param name="stickerFormat">
            Format of the sticker
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns the uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to create a new sticker set owned by a user.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="userId">
            User identifier of created sticker set owner
            </param>
            <param name="name">
            Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <i>animals</i>). Can contain
            only English letters, digits and underscores. Must begin with a letter, can't contain consecutive
            underscores and must end in <i>"_by_&lt;bot username&gt;"</i>. <i>&lt;bot_username&gt;</i> is case
            insensitive. 1-64 characters
            </param>
            <param name="title">
            Sticker set title, 1-64 characters
            </param>
            <param name="stickers">
            A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
            </param>
            <param name="stickerType">
            Type of stickers in the set.
            By default, a regular sticker set is created.
            </param>
            <param name="needsRepainting">
            Pass <see langword="true"/> if stickers in the sticker set must be repainted to the
            color of text when used in messages, the accent color if used as emoji status, white
            on chat photos, or another appropriate color based on context;
            for <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">custom emoji</see> sticker sets only
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">
            <summary>
            Use this method to add a new sticker to a set created by the bot.
            The format of the added sticker must match the format of the other stickers in the set.
            <list type="bullet">
            <item>
            Emoji sticker sets can have up to 200 stickers.
            </item>
            <item>
            Animated and video sticker sets can have up to 50 stickers.
            </item>
            <item>
            Static sticker sets can have up to 120 stickers.
            </item>
            </list>
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="userId">
            User identifier of sticker set owner
            </param>
            <param name="name">
            Sticker set name
            </param>
            <param name="sticker">
            A JSON-serialized object with information about the added sticker.
            If exactly the same sticker had already been added to the set, then the set isn't changed.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to move a sticker in a set created by the bot to a specific position.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">
            <see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker
            </param>
            <param name="position">New sticker position in the set, zero-based</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a sticker from a set created by the bot.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">
            <see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">
            <summary>
            Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to
            calling <see cref="!:DeleteStickerFromSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Requests.DeleteStickerFromSetRequest,System.Threading.CancellationToken)"/>,
            then <see cref="!:AddStickerToSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Requests.AddStickerToSetRequest,System.Threading.CancellationToken)"/>,
            then <see cref="!:SetStickerPositionInSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Requests.SetStickerPositionInSetRequest,System.Threading.CancellationToken)"/>.
            Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">
            User identifier of the sticker set owner
            </param>
            <param name="name">
            Sticker set name
            </param>
            <param name="oldSticker">
            File identifier of the replaced sticker
            </param>
            <param name="sticker">
            An object with information about the added sticker. If exactly the same sticker had already been added to the
            set, then the set remains unchanged.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerEmojiListAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Use this method to change the list of emoji assigned to a regular or custom emoji sticker.
            The sticker must belong to a sticker set created by the bot.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="sticker">
            <see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker
            </param>
            <param name="emojiList">
            A JSON-serialized list of 1-20 emoji associated with the sticker
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerKeywordsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Use this method to change search keywords assigned to a regular or custom emoji sticker.
            The sticker must belong to a sticker set created by the bot.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="sticker">
            <see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker
            </param>
            <param name="keywords">
            Optional. A JSON-serialized list of 0-20 search keywords for the sticker
            with total length of up to 64 characters
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerMaskPositionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>
            Use this method to change the mask position of a mask sticker.
            The sticker must belong to a sticker set that was created by the bot.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="sticker">
            <see cref="T:Telegram.Bot.Types.InputFileId">File identifier</see> of the sticker
            </param>
            <param name="maskPosition">
            A JSON-serialized object with the position where the mask should be placed on faces.
            <see cref="T:System.Nullable">Omit</see> the parameter to remove the mask position.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetTitleAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the title of a created sticker set.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="name">
            Sticker set name
            </param>
            <param name="title">
            Sticker set title, 1-64 characters
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetThumbnailAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Int64,Telegram.Bot.Types.Enums.StickerFormat,Telegram.Bot.Types.InputFile,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the thumbnail of a regular or mask sticker set.
            The format of the thumbnail file must match the format of the stickers in the set.
            Returns <see langword="true"/> on success.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="name">
            Sticker set name
            </param>
            <param name="userId">
            User identifier of the sticker set owner
            </param>
            <param name="format">Format of the thumbnail</param>
            <param name="thumbnail">
            A <b>.WEBP</b> or <b>.PNG</b> image with the thumbnail, must be up to 128 kilobytes in size and have
            a width and height of exactly 100px, or a <b>.TGS</b> animation with a thumbnail up to 32 kilobytes in
            size (see <a href="https://core.telegram.org/animated_stickers#technical-requirements"/> for animated
            sticker technical requirements), or a <b>WEBM</b> video with the thumbnail up to 32 kilobytes in size; see
            <a href="https://core.telegram.org/stickers#video-sticker-requirements"/> for video sticker technical
            requirements. Pass a <see cref="T:Telegram.Bot.Types.InputFileId"/> as a String to send a file that already exists on the
            Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or
            upload a new one using multipart/form-data. Animated and video sticker set thumbnails can't be uploaded
            via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetCustomEmojiStickerSetThumbnailAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the thumbnail of a custom emoji sticker set.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="name">
            Sticker set name
            </param>
            <param name="customEmojiId">
            Custom emoji identifier of a <see cref="T:Telegram.Bot.Types.Sticker"/> from the <see cref="T:Telegram.Bot.Types.StickerSet"/>;
            pass an <see langword="null"/> to drop the thumbnail and use the first sticker as the thumbnail.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to delete a sticker set that was created by the bot.
            </summary>
            <param name="botClient">
            An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/>
            </param>
            <param name="name">
            Sticker set name
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerInlineQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult},System.Nullable{System.Int32},System.Boolean,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton,System.Threading.CancellationToken)">
            <summary>
            Use this method to send answers to an inline query.
            </summary>
            <remarks>
            No more than <b>50</b> results per query are allowed.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineQueryId">Unique identifier for the answered query</param>
            <param name="results">An array of results for the inline query</param>
            <param name="cacheTime">
            The maximum amount of time in seconds that the result of the inline query may be cached on the server.
            Defaults to 300
            </param>
            <param name="isPersonal">
            Pass <see langword="true"/>, if results may be cached on the server side only for the user that sent the query.
            By default, results may be returned to any user who sends the same query
            </param>
            <param name="nextOffset">
            Pass the offset that a client should send in the next query with the same text to receive more results.
            Pass an empty string if there are no more results or if you don't support pagination.
            Offset length can't exceed 64 bytes
            </param>
            <param name="button">
            A JSON-serialized object describing a button to be shown above inline query results
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the result of an interaction with a Web App and send a corresponding message on
            behalf of the user to the chat from which the query originated. On success, a <see cref="T:Telegram.Bot.Types.SentWebAppMessage"/>
            object is returned.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="webAppQueryId">Unique identifier for the query to be answered</param>
            <param name="result">
            An object describing the message to be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendInvoiceAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>
            Use this method to send invoices.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">
            Unique identifier for the target chat or username of the target channel
            (in the format <c>@channelusername</c>)
            </param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">
            Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,
            use for your internal processes
            </param>
            <param name="providerToken">
            Payments provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>
            </param>
            <param name="currency">
            Three-letter ISO 4217 currency code, see
            <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>
            </param>
            <param name="prices">
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax,
            bonus, etc.)
            </param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="maxTipAmount">
            The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).
            For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>.
            See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            Defaults to 0
            </param>
            <param name="suggestedTipAmounts">
            An array of suggested amounts of tips in the <i>smallest units</i> of the currency (integer,
            <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must
            be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/>
            </param>
            <param name="startParameter">
            Unique deep-linking parameter. If left empty, <b>forwarded copies</b> of the sent message will have
            a <i>Pay</i> button, allowing multiple users to pay directly from the forwarded message, using the same
            invoice. If non-empty, forwarded copies of the sent message will have a <i>URL</i> button with a deep
            link to the bot (instead of a <i>Pay</i> button), with the value used as the start parameter
            </param>
            <param name="providerData">
            A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
            description of required fields should be provided by the payment provide
            </param>
            <param name="photoUrl">
            URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
            People like it better when they see what they are paying for
            </param>
            <param name="photoSize">Photo size</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <see langword="true"/>, if you require the user's full name to complete the order</param>
            <param name="needPhoneNumber">
            Pass <see langword="true"/>, if you require the user's phone number to complete the order
            </param>
            <param name="needEmail">Pass <see langword="true"/>, if you require the user's email to complete the order</param>
            <param name="needShippingAddress">
            Pass <see langword="true"/>, if you require the user's shipping address to complete the order
            </param>
            <param name="sendPhoneNumberToProvider">
            Pass <see langword="true"/>, if user's phone number should be sent to provider
            </param>
            <param name="sendEmailToProvider">
            Pass <see langword="true"/>, if user's email address should be sent to provider
            </param>
            <param name="isFlexible">Pass <see langword="true"/>, if the final price depends on the shipping method</param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateInvoiceLinkAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to create a link for an invoice.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">
            Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user,
            use for your internal processes
            </param>
            <param name="providerToken">
            Payments provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>
            </param>
            <param name="currency">
            Three-letter ISO 4217 currency code, see
            <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>
            </param>
            <param name="prices">
            Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax,
            bonus, etc.)
            </param>
            <param name="maxTipAmount">
            The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).
            For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>.
            See the <i>exp</i> parameter in
            <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the
            number of digits past the decimal point for each currency (2 for the majority of currencies).
            Defaults to 0
            </param>
            <param name="suggestedTipAmounts">
            An array of suggested amounts of tips in the <i>smallest units</i> of the currency (integer,
            <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must
            be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/>
            </param>
            <param name="providerData">
            JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
            description of required fields should be provided by the payment provide
            </param>
            <param name="photoUrl">
            URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
            </param>
            <param name="photoSize">Photo size</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <see langword="true"/>, if you require the user's full name to complete the order</param>
            <param name="needPhoneNumber">
            Pass <see langword="true"/>, if you require the user's phone number to complete the order
            </param>
            <param name="needEmail">Pass <see langword="true"/>, if you require the user's email to complete the order</param>
            <param name="needShippingAddress">
            Pass <see langword="true"/>, if you require the user's shipping address to complete the order
            </param>
            <param name="sendPhoneNumberToProvider">
            Pass <see langword="true"/>, if user's phone number should be sent to provider
            </param>
            <param name="sendEmailToProvider">
            Pass <see langword="true"/>, if user's email address should be sent to provider
            </param>
            <param name="isFlexible">Pass <see langword="true"/>, if the final price depends on the shipping method</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption},System.Threading.CancellationToken)">
            <summary>
            If you sent an invoice requesting a shipping address and the parameter <c>isFlexible"</c> was specified,
            the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <see cref="T:Telegram.Bot.Types.Payments.ShippingQuery"/> field
            to the bot. Use this method to reply to shipping queries
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="shippingOptions">
            Required if ok is <see langword="true"/>. An array of available shipping options
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            If you sent an invoice requesting a shipping address and the parameter <c>isFlexible"</c> was specified,
            the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <see cref="T:Telegram.Bot.Types.Payments.ShippingQuery"/> field
            to the bot. Use this method to indicate failed shipping query
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">
            Required if <see cref="!:AnswerShippingQueryRequest.Ok"/> is <see langword="false"/>. Error message in
            human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to
            your desired address is unavailable'). Telegram will display this message to the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation
            in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <see cref="T:Telegram.Bot.Types.Payments.PreCheckoutQuery"/>.
            Use this method to respond to such pre-checkout queries.
            </summary>
            <remarks>
            <b>Note</b>: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation
            in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <see cref="T:Telegram.Bot.Types.Payments.PreCheckoutQuery"/>.
            Use this method to respond to indicate failed pre-checkout query
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">
            Required if <see cref="!:AnswerPreCheckoutQueryRequest.Ok"/> is <see langword="false"/>. Error message in
            human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry,
            somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment
            details. Please choose a different color or garment!"). Telegram will display this message to the user
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendGameAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to send a game.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageThreadId">
            Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
            </param>
            <param name="gameShortName">
            Short name of the game, serves as the unique identifier for the game. Set up your games via
            <a href="https://t.me/botfather">@BotFather</a>
            </param>
            <param name="disableNotification">
            Sends the message silently. Users will receive a notification with no sound
            </param>
            <param name="protectContent">Protects the contents of sent messages from forwarding and saving</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see>,
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">custom reply keyboard</see>, instructions to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">remove reply keyboard</see> or to
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">force a reply</see> from the user
            </param>
            <param name="businessConnectionId">
            Unique identifier of the business connection on behalf of which the message will be sent
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, the sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScoreAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the score of the specified user in a game.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="force">
            Pass <see langword="true"/>, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters
            </param>
            <param name="disableEditMessage">
            Pass <see langword="true"/>, if the game message should not be automatically edited to include the current scoreboard
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            On success returns the edited <see cref="T:Telegram.Bot.Types.Message"/>. Returns an error, if the new score is not greater
            than the user's current score in the chat and <paramref name="force"/> is <see langword="false"/>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScoreAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Use this method to set the score of the specified user in a game.
            </summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="inlineMessageId">Identifier of the inline message.</param>
            <param name="force">
            Pass <see langword="true"/>, if the high score is allowed to decrease. This can be useful when fixing mistakes
            or banning cheaters
            </param>
            <param name="disableEditMessage">
            Pass <see langword="true"/>, if the game message should not be automatically edited to include the current scoreboard
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>
            Returns an error, if the new score is not greater than the user's current score in the chat and
            <paramref name="force"/> is <see langword="false"/>
            </returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScoresAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to get data for high score tables. Will return the score of the specified user and
            several of their neighbors in a game.
            </summary>
            <remarks>
            This method will currently return scores for the target user, plus two of their closest neighbors on
            each side. Will also return the top three users if the user and his neighbors are not among them.
            Please note that this behavior is subject to change.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Target user id</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScoresAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Use this method to get data for high score tables. Will return the score of the specified user and
            several of their neighbors in a game.
            </summary>
            <remarks>
            This method will currently return scores for the target user, plus two of their closest neighbors
            on each side. Will also return the top three users if the user and his neighbors are not among them.
            Please note that this behavior is subject to change.
            </remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation
            </param>
            <returns>On success, returns an Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClient">
            <summary>
            A client to use the Telegram Bot API
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.Bot">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.Token">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.LocalBotServer">
            <inheritdoc />
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.Timeout">
            <summary>
            Timeout for requests
            </summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.#ctor(Telegram.Bot.TelegramBotClientOptions)">
            <summary>
            Create a new <see cref="T:Telegram.Bot.TelegramBotClient"/> instance.
            </summary>
            <param name="options">Configuration for <see cref="T:Telegram.Bot.TelegramBotClient" /></param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="options"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.#ctor(System.String,System.Int32,System.String,System.Data.Common.DbConnection)">
            <summary>
            Create a new <see cref="T:Telegram.Bot.TelegramBotClient"/> instance.
            </summary>
            <param name="token">The bot token</param>
            <param name="apiId">API id (see https://my.telegram.org/apps)</param>
            <param name="apiHash">API hash (see https://my.telegram.org/apps)</param>
            <param name="dbConnection">DB connection for storage and later resume</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.MakeRequestAsync(Telegram.Bot.Requests.GetUpdatesRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.TestApiAsync(System.Threading.CancellationToken)">
            <summary>
            Test the API token
            </summary>
            <returns><see langword="true"/> if token is valid</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.DownloadFileAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.MakeException(WTelegram.WTException)">
            <summary>Convert WTelegram Exception into ApiRequestException</summary>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClientOptions">
            <summary>
            This class is used to provide configuration for <see cref="T:Telegram.Bot.TelegramBotClient"/>
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.Token">
            <summary>
            Bot token
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.ApiId">
            <summary>Your api_id, obtained at https://my.telegram.org/apps</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.ApiHash">
            <summary>Your api_hash, obtained at https://my.telegram.org/apps</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.DbConnection">
            <summary>Connection to Database for loading/storing the bot state</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.SqlCommands">
            <summary>You can set the SQL queries for your specific DB engine</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.WaitForLogin">
            <summary>Should the constructor wait synchronously for login to complete <i>(necessary before further API calls)</i>.<br/>Set to <see langword="false"/> and use <c>await botClient.GetMeAsync()</c> to wait for login asynchronously instead</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.UseTestEnvironment">
            <summary>
            Indicates that test environment will be used
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.BotId">
            <summary>
            Unique identifier for the bot from bot token. For example, for the bot token
            "1234567:4TT8bAc8GHUspu3ERYn-KGcvsvGB9u_n4ddy", the bot id is "1234567".
            Token format is not public API so this property is optional and may stop working
            in the future if Telegram changes it's token format.
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.LocalBotServer">
            <summary>
            Indicates that local bot server will be used
            </summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.BaseServerAddress">
            <summary>
            Use a custom Telegram server address (used only on first connection)
            </summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientOptions.#ctor(System.String,System.Int32,System.String,System.Data.Common.DbConnection,WTelegram.SqlCommands,System.Boolean)">
            <summary>
            Create a new <see cref="T:Telegram.Bot.TelegramBotClientOptions"/> instance.
            </summary>
            <param name="token">API token</param>
            <param name="apiId">API id (see https://my.telegram.org/apps)</param>
            <param name="apiHash">API hash (see https://my.telegram.org/apps)</param>
            <param name="dbConnection">DB connection for storage and later resume</param>
            <param name="sqlCommands">Template for SQL strings</param>
            <param name="useTestEnvironment"></param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="token"/> format is invalid
            </exception>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientOptions.WTCConfig(System.String)">
            <summary>The Config callback used by WTelegramClient</summary>
        </member>
    </members>
</doc>
